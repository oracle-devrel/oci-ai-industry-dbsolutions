    ```sql 
        <copy>
        ----------
        </copy>
    ```

    ```sql 
        <copy>
        ----------
        </copy>
    ```
------------ 
   CREATE TABLE "PIZZASHOPS" 
   (	
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 99999999999 
    INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ADDRESS" VARCHAR2(255), 
	"CITY" VARCHAR2(50), 
	"LATITUDE" NUMBER, 
	"LONGITUDE" NUMBER, 
	"PRICE" NUMBER, 
	"DESCRIPTION" VARCHAR2(2000), 
	"PIZZA_NAME" VARCHAR2(255), 
	"SHOP" VARCHAR2(255), 
	"IMAGE" VARCHAR2(200), 
	"QUANTITY_AVAILABLE" NUMBER, 
	"UNIT_TYPE" VARCHAR2(50), 
	"SDO_GEOM" "SDO_GEOMETRY", 
	 PRIMARY KEY ("ID")
    USING INDEX  ENABLE
   ) 
    VARRAY "SDO_GEOM"."SDO_ELEM_INFO" STORE AS SECUREFILE LOB 
    VARRAY "SDO_GEOM"."SDO_ORDINATES" STORE AS SECUREFILE LOB ;
------------ Show Pizza ------------
SELECT * FROM   (
    select ID, ADDRESS, CITY, 
       PRICE, DESCRIPTION, PIZZA_NAME,
       SHOP, IMAGE, QUANTITY_AVAILABLE, UNIT_TYPE 
       from PIZZASHOPS
        where city='seattle' and Unit_type = 'Pizza' 
        ORDER BY DBMS_RANDOM.RANDOM) 
        where rownum < 3
UNION
SELECT * FROM   (
    select ID, ADDRESS, CITY, 
       PRICE, DESCRIPTION, PIZZA_NAME,
       SHOP, IMAGE, QUANTITY_AVAILABLE, UNIT_TYPE 
       from PIZZASHOPS
        where city='seattle' and Unit_type = 'Burger' 
        ORDER BY DBMS_RANDOM.RANDOM) 
        where rownum < 3
UNION
SELECT * FROM   (
    select ID, ADDRESS, CITY, 
       PRICE, DESCRIPTION, PIZZA_NAME,
       SHOP, IMAGE, QUANTITY_AVAILABLE, UNIT_TYPE 
       from PIZZASHOPS
        where city='seattle' and Unit_type = 'Coke' 
        ORDER BY DBMS_RANDOM.RANDOM) 
        where rownum < 3
UNION
SELECT * FROM   (
    select ID, ADDRESS, CITY, 
       PRICE, DESCRIPTION, PIZZA_NAME,
       SHOP, IMAGE, QUANTITY_AVAILABLE, UNIT_TYPE 
       from PIZZASHOPS
        where city='seattle' and Unit_type = 'Sundae' 
        ORDER BY DBMS_RANDOM.RANDOM) 
        where rownum < 3

-------- PIZZA_ORDER (Master table) --------------
  CREATE TABLE "PIZZA_ORDER" 
   (	
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"SESSID" VARCHAR2(4000 CHAR), 
	"CUSTOMER_NAME" VARCHAR2(255 CHAR), 
	"CUSTOMER_ADDRESS" VARCHAR2(4000 CHAR), 
	"CUSTOMER_INSTRUCTIONS" VARCHAR2(4000 CHAR), 
	"ORDER_TOTAL" NUMBER, 
	"ORDER_STATUS" VARCHAR2(4000 CHAR), 
	"MODE" VARCHAR2(100), 
	"DELIVERY_CHARGES" NUMBER, 
	"PHONE_NUMBER" VARCHAR2(100), 
	"CITY" VARCHAR2(100), 
	"C_LATITUDE" NUMBER, 
	"C_LONGITUDE" NUMBER, 
	"S_LATITUDE" NUMBER, 
	"S_LONGITUDE" NUMBER, 
	 CONSTRAINT "PIZZA_ORDER_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

-------- PIZZA_ORDER_DETAILS (Master table) --------------

   CREATE TABLE "PIZZA_ORDER_DETAILS" 
   (	
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 99999999999 
    INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PIZZA_ORDER_ID" NUMBER, 
	"SESSID" VARCHAR2(4000 CHAR), 
	"PIZZA_NAME" VARCHAR2(255 CHAR), 
	"SHOP_NAME" VARCHAR2(255 CHAR), 
	"SHOP_ADDRESS" VARCHAR2(4000 CHAR), 
	"TOPPINGS" VARCHAR2(4000 CHAR), 
	"TOPPINGS_COST" NUMBER, 
	"CRUST_TYPE" VARCHAR2(4000 CHAR), 
	"CUST_COST" NUMBER, 
	"GIFT_WRAP" VARCHAR2(4000 CHAR), 
	"GIFT_WRAP_COST" NUMBER, 
	"QUANTITY" NUMBER, 
	"DELIVERY_MODE" VARCHAR2(4000 CHAR), 
	"DISCOUNT_COUPON" VARCHAR2(4000 CHAR), 
	"DISCOUNT_AMOUNT" NUMBER, 
	"LINE_TOTAL" NUMBER, 
	"SIZE" VARCHAR2(50), 
	"IMAGE" VARCHAR2(200), 
	"PIZZASHOPS_ID" NUMBER, 
	 CONSTRAINT "PIZZA_ORDER_DETAILS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "PIZZA_ORDER_DETAILS" ADD CONSTRAINT "PIZZA_ORDER_DETAILS_PIZZA_ORDER_ID_FK" FOREIGN KEY ("PIZZA_ORDER_ID")
	  REFERENCES "PIZZA_ORDER" ("ID") ENABLE;

  CREATE INDEX "PIZZA_ORDER_DETAILS_I1" ON "PIZZA_ORDER_DETAILS" ("PIZZA_ORDER_ID") 
  ;

----------------

-- Save Pizza -------
begin 
     PIZZA_CART_INSERTS(:P55_PIZZA_NAME, V('SESSION'), 'Payment-Pending', :P55_SIZE, 
     :P55_CRUST, :P55_TOPPINGS, :P55_UNIT_PRICE, :P55_QTY, :P55_PIZZA_ID);  
end;
------------------- Save Pizza Procedure -------------

create or replace PROCEDURE PIZZA_CART_INSERTS 
(
    v_pizza_name IN PIZZASHOPS.PIZZA_NAME%TYPE,
    v_sessid IN varchar2,  
    v_order_status IN PIZZA_ORDER.ORDER_STATUS%TYPE,
    v_size IN  PIZZA_ORDER_DETAILS."SIZE"%TYPE,
    v_crust  IN  PIZZA_ORDER_DETAILS.CRUST_TYPE%TYPE,
    v_toppings IN  PIZZA_ORDER_DETAILS.TOPPINGS%TYPE,
    v_unit_price IN  PIZZA_ORDER_DETAILS.LINE_TOTAL%TYPE,
    v_qty IN  PIZZA_ORDER_DETAILS.QUANTITY%TYPE,  
    v_pizza_id IN PIZZA_ORDER_DETAILS.ID%TYPE 
)
AS   
v_rand_no number; 
v_any_rows_found number := 0;
---- Get Session Details --------- 
v_master_pk number;
v_customer_name varchar2(200);
v_phone_number varchar2(200);
v_address varchar2(200);
v_city varchar2(200);
c_latitude number;
c_longitude number;
v_shop varchar2(200);
s_latitude number;
s_longitude number;
v_order_total number := 0;

BEGIN
     

     ---- Check if Master Records already exists? ---------
        select count(*) into  v_any_rows_found from  pizza_order where sessid = v_sessid;
       
        ------ get random data ----------
        select  customer_name, phone_number into v_customer_name, v_phone_number from (select customer_name, phone_number  from  customers where country_id = 'US' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
        -- Get Customer Location ------------
        select  address, city, latitude, longitude into v_address, v_city, c_latitude, c_longitude from (select address, city, latitude, longitude from pizzashops 
        where city = 'seattle' or city = 'kirkland' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
         -- Get Shop Location ------------
        select  shop, latitude, longitude into v_shop, s_latitude, s_longitude from (select shop, latitude, longitude from pizzashops 
        where city = 'seattle' or  city = 'kirkland' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
  
         --------- 
        if v_any_rows_found > 0 then 
             ---- Check if Master Records exists? Get PK of Master table ---------
            select ID into v_master_pk from  PIZZA_ORDER where sessid = v_sessid; 
             -- Insert into Detail table
            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_unit_price, v_qty ); 
            select sum(line_total) into  v_order_total from  pizza_order_details where sessid = v_sessid; 
            UPDATE PIZZA_ORDER SET ORDER_STATUS = v_order_status, ORDER_TOTAL = v_order_total WHERE sessid = v_sessid;

        else 

            INSERT INTO PIZZA_ORDER (SESSID, CUSTOMER_NAME, ORDER_STATUS,   CUSTOMER_ADDRESS, PHONE_NUMBER, C_LATITUDE, C_LONGITUDE,  S_LATITUDE, S_LONGITUDE, CITY, ORDER_TOTAL)  VALUES 
                                    (v_sessid, v_customer_name, v_order_status,  v_address, v_phone_number, c_latitude, c_longitude ,s_latitude, s_longitude , v_city ,v_unit_price ) RETURNING ID INTO v_master_pk; 
            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY  ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_unit_price, v_qty );

        end if;
 
     

    COMMIT;
       
END;
/

--------------------- Customer Details 

select ID,
       SESSID,
       CUSTOMER_NAME,
       CUSTOMER_ADDRESS,
       CUSTOMER_INSTRUCTIONS,
       ORDER_TOTAL, 
       "MODE",
       ORDER_STATUS, DELIVERY_CHARGES 
  from PIZZA_ORDER
  where SESSID = V('SESSION') 

---------- Order Details 

select ID,
       PIZZA_ORDER_ID,
       SESSID,
       PIZZA_NAME,
       SHOP_NAME,
       SHOP_ADDRESS,
       TOPPINGS,
       TOPPINGS_COST,
       CRUST_TYPE,
       CUST_COST,
       GIFT_WRAP,
       GIFT_WRAP_COST,
       QUANTITY,
       DELIVERY_MODE,
       DISCOUNT_COUPON,
       DISCOUNT_AMOUNT,
       LINE_TOTAL,
       "SIZE"
  from PIZZA_ORDER_DETAILS
 where SESSID = V('SESSION')

 ----------

 create or replace json relational duality view pizzaorders_pizzaorderdetails_jdv as
select json {
         'id' : po.id,
         'customer_name'   : po.customer_name,
         'customer_address' : po.customer_address, 
         'order_total' : po.order_total, 
         'delivery_charges' : po.delivery_charges, 
         'order_status' : po.order_status, 
         'pizza_order_details' :
                [ 
                    select json {
                        'id' : pod.id,  
                        'pizza_name'   : pod.pizza_name,
                        'toppings' : pod.toppings,
                        'quantity' : pod.quantity,
                        'line_total' : pod.line_total 
                        }
                        from pizza_order_details pod with insert update delete 
                        where  po.id = pod.pizza_order_id 
                    ]
          }
from pizza_order po with insert update delete;
 ----------

create or replace json relational duality view pizzaorders_pizzaorderdetails_jdv as
select json {
         '_id' : po.id,
         'customer_name'   : po.customer_name,
         'customer_address' : po.customer_address, 
         'order_total' : po.order_total, 
         'delivery_charges' : po.delivery_charges, 
         'order_status' : po.order_status, 
         'pizza_order_details' :
                [ 
                    select json {
                        'id' : pod.id,  
                        'pizza_name'   : pod.pizza_name,
                        'toppings' : pod.toppings,
                        'quantity' : pod.quantity,
                        'line_total' : pod.line_total 
                        }
                        from pizza_order_details pod with insert update delete 
                        where  po.id = pod.pizza_order_id 
                    ]
          }
from pizza_order po with insert update delete;

select * from pizzaorders_pizzaorderdetails_jdv;

SELECT JSON_SERIALIZE (data pretty) from pizzaorders_pizzaorderdetails_jdv;

SELECT JSON_SERIALIZE (data pretty) from pizzaorders_pizzaorderdetails_jdv WHERE json_value(data, '$.customer_name') = 'Karen Gordon'

SELECT JSON_SERIALIZE (data pretty) from pizzaorders_pizzaorderdetails_jdv WHERE json_value(data, '$.pizza_order_details.line_total') > 10

------------------- Insert Single Record ---------------- 
insert into pizzaorders_pizzaorderdetails_jdv d (data) values 
('
    {     
        "customer_name"   : "Jane Doe",
        "customer_address" : "Address 1", 
        "order_total" : 100, 
        "delivery_charges" : 10, 
        "order_status" : "Pending-Payment", 
        "pizza_order_details" : 
        [ 
            {    
                "pizza_name"   : "Pizza1",
                "toppings" : "Paneer",
                "quantity" : 1,
                "line_total" : 30 
            } 
        ] 
    }
')

select * from pizzaorders_pizzaorderdetails_jdv

------- Multiple records example 1------------
insert into pizzaorders_pizzaorderdetails_jdv d (data) values 
('
    {     
        "customer_name"   : "Peter Parkar",
        "customer_address" : "Address 13", 
        "order_total" : 100, 
        "delivery_charges" : 10, 
        "order_status" : "Pending-Payment", 
        "pizza_order_details" : 
        [ 
            {    
                "pizza_name"   : "Pizza1",
                "toppings" : "Paneer",
                "quantity" : 1,
                "line_total" : 30 
            } ,
            {    
                "pizza_name"   : "Pizza2",
                "toppings" : "Chicken",
                "quantity" : 1,
                "line_total" : 30 
            } 
        ] 
    } 
')