    ```sql 
    <copy> 
    --- Your code
    </copy>
    ``` 

    ```sql 
    <copy> 
    --- Your code
    </copy>
    ``` 

    ```sql 
    <copy> 
    --- Your code
    </copy>
    ``` 

    ```sql 
    <copy> 
    --- Your code
    </copy>
    ``` 

------ Vector Search --------
DECLARE
    l_input varchar2(32000) := :P78_Q;
    l_checkint varchar2(50) := :P78_CHECKINT;
    v_response varchar2(32000) := '- - -';
BEGIN  
    if l_input is not null and l_checkint = 'Y' then
         v_response := rag_function ( l_input ); 
        :P78_A := v_response;
    end if;
END;

-------- Rag function --------------

create or replace Function rag_function ( rag_input IN varchar2 )  
RETURN varchar2 
IS   
  
    query_vector CLOB; 
    text_variable VARCHAR2(1000) := rag_input; 
    l_doc_id VARCHAR2(100);  
    l_answer varchar2(32000) := 'Querying ...'; 
    cursor c1 is SELECT *  
                    FROM vector_store  
                    ORDER BY VECTOR_DISTANCE( EMBED_VECTOR, query_vector, EUCLIDEAN_SQUARED)  
                    FETCH FIRST 1 ROWS ONLY WITH TARGET ACCURACY 90;   
BEGIN  
    -- select vector_embedding into query_vector based on  
    SELECT vector_embedding(doc_model using text_variable as data) into query_vector;  
    For row_1 In C1 Loop   
           --Htp.p('<pre>'||row_1.embed_data|| '</pre>');  
           l_answer := row_1.embed_data; 
           -- clean up result 
           l_answer := TRANSLATE(l_answer, '~!@#$%^&*()_+=\{}[]:”;’<,>./?',' '); 
           -- clean up result 
     End Loop;  
return (l_answer);  
END;
/

------ Gen AI Search -------

DECLARE
  
  l_genai_rest_url    VARCHAR2(4000) := 'https://inference.generativeai.us-chicago-1.oci.oraclecloud.com/20231130/actions/chat';  
  l_web_cred        CONSTANT VARCHAR2(50)   := 'replace-this';   
  l_input varchar2(4000) := :P78_Q;
  l_check varchar2(50) := :P78_CHECK;
  l_response_json CLOB;
  l_text varchar2(32000);
   
l_ocigabody varchar2(32000) := ' 
{
    "compartmentId": "ocid1.compartment.oc1..replace-this",
    "servingMode": {
        "servingType": "ON_DEMAND",
        "modelId": "cohere.command-r-08-2024"
    },
    "chatRequest": {
        "message": "'||l_input||'",
        "maxTokens": 500,
        "isStream": false,
        "apiFormat": "COHERE",
        "temperature": 0.75,
        "frequencyPenalty": 1,
        "presencePenalty": 0,
        "topP": 0.7,
        "topK": 1
    }
}
'; 

  CURSOR C1  IS 
            SELECT jt.* 
            FROM   JSON_TABLE(l_response_json, '$'  COLUMNS (text VARCHAR2(32000)  PATH '$.chatResponse[0].text' )) jt;   
BEGIN

  if l_input is not null and l_check = 'Y' then

        apex_web_service.g_request_headers.DELETE; 
        apex_web_service.g_request_headers(1).name  := 'Content-Type'; 
        apex_web_service.g_request_headers(1).value := 'application/json'; 
    

         l_response_json := apex_web_service.make_rest_request 
           (p_url                  => l_genai_rest_url, 
            p_http_method          => 'POST', 
            p_body                 => l_ocigabody, 
            p_credential_static_id => l_web_cred);
 

    For row_1 In C1 Loop
           l_text := row_1.text; 
           :P78_GA := l_text;
           :P78_OP_TEXT := l_text; 
     End Loop;

    end if;

END;

------- AICHAT

   CREATE TABLE "AICHAT" 
   (	
    "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 999999999 
    INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"PROMPT" VARCHAR2(1000), 
	"CTIMESTAMP" TIMESTAMP (6), 
	"ACTION" VARCHAR2(50), 
	"IS_VALID" VARCHAR2(1), 
	"AISQL" VARCHAR2(32000), 
	"AIRESPONSE" VARCHAR2(32000), 
	"SESSID" VARCHAR2(100), 
	"VOICE" VARCHAR2(20), 
	"GENDATE" DATE DEFAULT sysdate, 
	"AUDIOURL" VARCHAR2(1000), 
	 PRIMARY KEY ("ID")
     USING INDEX  ENABLE
   ) ;

----------- Search DB --------
declare

l_input varchar2(100) := :P78_Q;
l_input_upper varchar2(4000) := upper(l_input);
l_sess varchar2(100) := V('SESSION');
l_action varchar2(10) := 'chat';
l_qry varchar2(4000);
l_ai_resp varchar2(32000);
l_db_check varchar2(20) := :P78_DB;

CURSOR C1  IS 
    SELECT DBMS_CLOUD_AI.GENERATE(prompt  => l_input,
                              profile_name => 'COHERE',
                              action       => l_action ) as qry
    FROM dual;  

begin 

    if 
    l_input_upper like 'SHOW%' or  
    l_input_upper like 'LIST%' or 
    l_input_upper like 'HOW MANY%' or 
    l_input_upper like 'WHAT IS THE NAME%' or 
    l_input_upper like 'WHAT ARE THE NAME%'
    then
        l_action := 'showsql';
    end if;
    
    ---------------- Insert into DB Table ----------
    if l_input is not null and l_db_check = 'Y' then
        For row_1 In C1 Loop
            l_qry := row_1.qry; 
        End Loop;  
        if l_action = 'showsql' then  
            l_qry := lower(l_qry);
            --  save conversation
            insert into AICHAT (PROMPT, SESSID, ACTION, AISQL) values 
            (:P66_INPUT, l_sess, l_action, l_qry);
            else 
            --  save conversation
            insert into AICHAT (PROMPT, SESSID, ACTION, AIRESPONSE) values 
            (:P66_INPUT, l_sess, l_action, l_qry);
        end if; 
    end if;
 

end;

------- file upload --------- 

DECLARE
  l_url         VARCHAR2(1000);
  l_length      NUMBER;
  l_response    CLOB;    
  failed_upload EXCEPTION;
  l_bucket_url varchar2(4000) := 'https://replace-this.objectstorage.us-phoenix-1.oci.customer-oci.com/n/replace-this/b/X-Ray-Lung-replace-this-for-Training/o/KB/';
BEGIN
  FOR lr_files in (SELECT * FROM apex_application_temp_files WHERE name = :P78_FILE) 
  LOOP 
    l_url := l_bucket_url||apex_util.url_encode(lr_files.filename);
    apex_web_service.g_request_headers(1).name := 'Content-Type';
    apex_web_service.g_request_headers(1).value := lr_files.mime_type;
    l_response := apex_web_service.make_rest_request(p_url                  => l_url,
                                                     p_http_method          => 'PUT',
                                                     p_body_blob            => lr_files.blob_content,
                                                     p_credential_static_id => 'replace-this');  
    ------ store in db
    INSERT INTO PDF_BOOKS (FILE_NAME, file_type,FILE_CONTENT,FILE_SIZE)
        SELECT filename, mime_type,blob_content, dbms_lob.getlength(blob_content) FROM apex_application_temp_files
        WHERE name = :P78_FILE;
    ------ store in db
    IF apex_web_service.g_status_code != 200 then
      RAISE failed_upload;
    END IF;
  END LOOP;
END;

------------------- MY_BOOKS to be replaced as PDF_BOOKS

    CREATE TABLE "PDF_BOOKS" 
   (	
    "ID" NUMBER(*,0) GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 
    INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(900), 
	"FILE_SIZE" NUMBER(*,0), 
	"FILE_TYPE" VARCHAR2(100), 
	"FILE_CONTENT" BLOB, 
	PRIMARY KEY ("ID")
    USING INDEX  ENABLE
   ) ;

    CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_PDF_BOOKS_VECTOR_STORE_COMPOUND" 
    FOR INSERT ON PDF_BOOKS 
    COMPOUND TRIGGER 
 
    TYPE t_id_tab IS TABLE OF PDF_BOOKS.id%TYPE INDEX BY PLS_INTEGER; 
    v_ids t_id_tab; 
 
    AFTER EACH ROW IS 
    BEGIN 
        v_ids(v_ids.COUNT + 1) := :NEW.id; 
    END AFTER EACH ROW; 
 
    AFTER STATEMENT IS 
    BEGIN 
        FOR i IN 1 .. v_ids.COUNT LOOP 
            INSERT INTO vector_store (doc_id, embed_id, embed_data, embed_vector) 
            SELECT dt.id AS doc_id,  
                  et.embed_id,  
                  et.embed_data,  
                  to_vector(et.embed_vector) AS embed_vector 
            FROM PDF_BOOKS dt  
            CROSS JOIN TABLE( 
                dbms_vector_chain.utl_to_embeddings( 
                    dbms_vector_chain.utl_to_chunks( 
                        dbms_vector_chain.utl_to_text(dt.file_content),   
                        json('{"normalize":"all"}') 
                    ), 
                    json('{"provider":"database", "model":"doc_model"}') 
                ) 
            )  t 
            CROSS JOIN JSON_TABLE( 
                t.column_value,  
                '$[*]' COLUMNS ( 
                    embed_id NUMBER PATH '$.embed_id', 
                    embed_data VARCHAR2(4000) PATH '$.embed_data', 
                    embed_vector CLOB PATH '$.embed_vector' 
                ) 
            ) AS et 
            WHERE dt.id = v_ids(i); 
        END LOOP; 
    END AFTER STATEMENT; 
 
    END TRG_PDF_BOOKS_VECTOR_STORE_COMPOUND;
    /
    ALTER TRIGGER "TRG_PDF_BOOKS_VECTOR_STORE_COMPOUND" ENABLE;

-------- Translation -------
declare
 
        l_rest_url    VARCHAR2(4000) := 'https://language.aiservice.us-phoenix-1.oci.oraclecloud.com/20221001/actions/batchLanguageTranslation';  
        l_web_cred        CONSTANT VARCHAR2(50)   := 'replace-this';    
        l_input varchar2(4000) := :P78_OP_TEXT;
        l_target_lang varchar2(20) := :P78_TRG_LANG;
        l_src_lang varchar2(10);  
        l_response_json CLOB;
        l_text varchar2(32000);  
        l_body varchar2(4000) :='{  
                
                         "documents": [  { 
                            "key": "1x",
                            "text": "'||l_input||'",
                            "languageCode": "auto"  
                          } ],
                          "targetLanguageCode": "'||l_target_lang||'" ,
                           "compartmentId": "ocid1.compartment.oc1..replace-this"
                 
        }';    
         
        CURSOR C1  IS 
            SELECT jt.* 
            FROM   JSON_TABLE(l_response_json, '$' 
                     COLUMNS (
                                text VARCHAR2(4000)  
                                PATH '$.documents[0].translatedText',
                                src_lang VARCHAR2(20)  
                                PATH '$.documents[0].sourceLanguageCode', 
                                target_lang VARCHAR2(20)  
                                PATH '$.documents[0].targetLanguageCode'
                             )) jt; 
                       
begin 
         
        apex_web_service.g_request_headers.DELETE; 
        apex_web_service.g_request_headers(1).name  := 'Content-Type'; 
        apex_web_service.g_request_headers(1).value := 'application/json'; 

        l_response_json := apex_web_service.make_rest_request 
           (p_url                  => l_rest_url, 
            p_http_method          => 'POST', 
            p_body                 => l_body, 
            p_credential_static_id => l_web_cred); 

         For row_1 In C1 Loop
                   l_text := row_1.text;
                   l_src_lang := row_1.src_lang;
                   l_target_lang := row_1.target_lang;   
                    :P78_TRG_LANG := l_target_lang; 
                    :P78_TRANSLATED_OP := row_1.text; 
         End Loop; 
         
end;