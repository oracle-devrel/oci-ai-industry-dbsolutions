SELECT t.id, t.inv_no as Invoice, '$ '||t.total_pay as Amount, 
trans_status, comments, 
transaction_status as Status,
category,time_difference_number,merchant_state, merchant_place,
CREDIT_CARD_NO as Card, 
LAG(CREDIT_CARD_NO) OVER (ORDER BY id) AS Prev_card, 
MALL Place, 
LAG(MALL) OVER (ORDER BY id) AS Prev_mall,  
to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss') Curr_Timestamp,   
LAG(to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss')) OVER (ORDER BY id)  Prev_Timestamp, 
t.TX_TIMESTAMP - LAG(t.TX_TIMESTAMP) OVER (ORDER BY t.TX_TIMESTAMP) AS time_difference, 
abs(LAG(to_char(TX_TIMESTAMP,'yyyymmddHH24MISS')) OVER (ORDER BY id)  - to_char(TX_TIMESTAMP,'yyyymmddHH24MISS') ) AS  time_diff_number  
FROM RETAIL_SHOPPING_FD t 
WHERE TX_TYPE = 'FDTX'  
order by id desc

----

    ```sql 
        <copy>
        BEGIN 
            -- Call function to generate random transactions between date range
            -- Page numbers and Page item names will vary as per your setup
            FD_BANK_TXS_INSERTS(  :P85_START , :P85_END);
        END;
        </copy>
    ``` 

--------- Start Tx ------
declare

v2_MERCHANT_REGION   RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE;
v2_MERCHANT_STATE   RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE;  

begin 
 DBMS_SCHEDULER.ENABLE( 'RealTime_TX_Job');
 DBMS_SCHEDULER.ENABLE( 'MY_TX_JOB');
end;

------- Stop Tx --------------

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE ); 
end;

--- Clear Tx -------------

begin 
        delete from RETAIL_SHOPPING_FD where TX_TYPE = 'FDTX' ;
        delete from BANK_TRANSFERS; 
        UPDATE CC_FD SET STATUS = 'Active';
end;

------------------------- BANK_TRANSFERS DDL --------------

  CREATE TABLE "BANK_TRANSFERS" 
   (	"TXN_ID" NUMBER, 
	"SRC_ACCT_ID" NUMBER, 
	"DST_ACCT_ID" NUMBER, 
	"DESCRIPTION" VARCHAR2(400), 
	"AMOUNT" NUMBER, 
	"PROFILE" VARCHAR2(20), 
	"INV_NO" VARCHAR2(50), 
	"MERCHANT_REGION" VARCHAR2(100), 
	"MERCHANT_STATE" VARCHAR2(100), 
	"MERCHANT_PLACE" VARCHAR2(100), 
	 PRIMARY KEY ("TXN_ID")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "BANK_TRANSFERS" ADD FOREIGN KEY ("SRC_ACCT_ID")
	  REFERENCES "BANK_ACCOUNTS" ("ID") ENABLE;
  ALTER TABLE "BANK_TRANSFERS" ADD FOREIGN KEY ("DST_ACCT_ID")
	  REFERENCES "BANK_ACCOUNTS" ("ID") ENABLE;

------------------------- RETAIL_SHOPPING_FD DDL --------------

   CREATE TABLE "RETAIL_SHOPPING_FD" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"INV_NO" VARCHAR2(50), 
	"GENDER" VARCHAR2(50), 
	"AGE" NUMBER, 
	"CATEGORY" VARCHAR2(50), 
	"QTY" NUMBER, 
	"PRICE" NUMBER, 
	"TOTAL_PAY" NUMBER, 
	"METHOD" VARCHAR2(50), 
	"INV_DATE" TIMESTAMP (6), 
	"MALL" VARCHAR2(50), 
	"CUST_ID" NUMBER, 
	"CUST_FIRST_NAME" VARCHAR2(100), 
	"CUST_LAST_NAME" VARCHAR2(100), 
	"CREDIT_CARD_NO" NUMBER, 
	"TRANS_STATUS" VARCHAR2(20), 
	"CUST_CITY" VARCHAR2(100), 
	"CUST_STATE_PROVINCE" VARCHAR2(100), 
	"TRANSACTION_STATUS" VARCHAR2(50), 
	"COMMENTS" VARCHAR2(500), 
	"COUNTRY_ID" VARCHAR2(50), 
	"TX_TIMESTAMP" TIMESTAMP (6), 
	"MERCHANT_ID" NUMBER, 
	"MERCHANT_CITY" VARCHAR2(50), 
	"MERCHANT_REGION" VARCHAR2(255), 
	"MERCHANT_STATE" VARCHAR2(100), 
	"MERCHANT_PLACE" VARCHAR2(100), 
	"LONGITUDE" NUMBER, 
	"LATITUDE" NUMBER, 
	"MERCHANT_PLACE_ID" NUMBER, 
	"CUSTOMER_FULLNAME" VARCHAR2(50), 
	"MERCHANT_FULLNAME" VARCHAR2(50), 
	"INV_TIMESTAMP" TIMESTAMP (6) WITH LOCAL TIME ZONE, 
	"CC_ID" NUMBER, 
	"TIME_DIFFERENCE_NUMBER" NUMBER, 
	"TX_TYPE" VARCHAR2(20), 
	"WORKFLOW_STATUS" VARCHAR2(100), 
	 PRIMARY KEY ("ID")
         USING INDEX  ENABLE
   ) ;

CREATE OR REPLACE EDITIONABLE TRIGGER "RETAIL_SHOPPING_FD_TRG" 
before 
insert on "RETAIL_SHOPPING_FD"  
for each row 
declare 
        v_ccid number; 
        v_n number := 0; 
        v_min_time_diff_number number; 
        v_min_tx_value number; 
        v_max_tx_value number; 
begin 
 
    SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = 'Minimum Time Frequency'; 
    SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = 'Approved Purchase'; 
    SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = 'Rejected Purchase'; 
 
    SELECT id 
      INTO v_ccid  
      FROM cc_fd 
     WHERE cc_no = :new.credit_card_no;    
    if inserting then 
        if :new.total_pay < v_min_tx_value then 
                :new.transaction_status := 'APPROVE'; 
                :new.comments := 'Lower than minimum amount of $ '||v_min_tx_value||''; 
        elsif :new.total_pay >= v_min_tx_value AND :new.total_pay < v_max_tx_value then 
                :new.transaction_status := 'OnHold'; 
                :new.trans_status := 'UNREAD'; 
        else  
                :new.transaction_status := 'REJECT'; 
                :new.comments := 'Higher than allowed amount of $ '||v_max_tx_value||''; 
        end if;  
        :new.cc_id := v_ccid;     
   end if;      
    
end;
/
ALTER TRIGGER "RETAIL_SHOPPING_FD_TRG" ENABLE;

--------  CC_FD DDL ---------------- 

  CREATE TABLE "CC_FD" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"CUST_ID" NUMBER, 
	"CC_NO" NUMBER, 
	"STATUS" VARCHAR2(50), 
	"VALIDITY" DATE, 
	"FIRST_NAME" VARCHAR2(50), 
	"LAST_NAME" VARCHAR2(50), 
	"BANK_NAME" VARCHAR2(50), 
	"COMMENTS" VARCHAR2(100), 
	"CARD_TYPE" VARCHAR2(10), 
	 PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

--------------- JOBS ------------------
 
begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE ); 
end;


begin
  dbms_scheduler.create_job (
     job_name           =>  'RealTime_TX_Job',
     job_type           =>  'STORED_PROCEDURE',
     job_action         =>  'FD_TX_INSERTS',
     start_date         =>  systimestamp, 
     repeat_interval    =>  'freq=SECONDLY; interval = 20;',
     enabled            =>  true,
     comments           => 'Realtime Transaction Create Job Data'
  );
end; 

begin
  dbms_scheduler.create_job (
     job_name           =>  'My_Tx_Job',
     job_type           =>  'STORED_PROCEDURE',
     job_action         =>  'FD_TX_PROC',
     start_date         =>  systimestamp, 
     repeat_interval    =>  'freq=minutely; interval = 1;',
     enabled            =>  true,
     comments           => 'Realtime Transaction Create Apply ML'
  );
end;

---------
Begin 
dbms_scheduler.disable('RealTime_TX_Job',TRUE );
DBMS_SCHEDULER.SET_ATTRIBUTE ( name => 'RealTime_TX_Job', 
                            attribute => 'repeat_interval', 
                            value => 'freq=SECONDLY; interval = 5;'); 
dbms_scheduler.enable('RealTime_TX_Job');
End;
---------
Begin 
dbms_scheduler.disable('MY_TX_JOB',TRUE );
DBMS_SCHEDULER.SET_ATTRIBUTE ( name => 'MY_TX_JOB', 
                            attribute => 'repeat_interval', 
                            value => 'freq=SECONDLY; interval = 10;'); 
dbms_scheduler.enable('MY_TX_JOB');
End;



begin
 DBMS_SCHEDULER.STOP_JOB( 'RealTime_TX_Job',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'MY_TX_JOB',TRUE );
end;

begin
 DBMS_SCHEDULER.DISABLE( 'RealTime_TX_Job',TRUE );
end;

-------
create or replace PROCEDURE FD_TX_INSERTS  
AS  
v_INV_NO RETAIL_SHOPPING_FD.INV_NO%TYPE;
v_CATEGORY RETAIL_SHOPPING_FD.CATEGORY%TYPE;
v_TOTAL_PAY RETAIL_SHOPPING_FD.TOTAL_PAY%TYPE; 
v_CUST_ID RETAIL_SHOPPING_FD.CUST_ID%TYPE;
v_MERCHANT_ID RETAIL_SHOPPING_FD.MERCHANT_ID%TYPE;
v_CUSTOMER_FULLNAME RETAIL_SHOPPING_FD.CUSTOMER_FULLNAME%TYPE; 
v_MERCHANT_FULLNAME RETAIL_SHOPPING_FD.MERCHANT_FULLNAME%TYPE;  
v_MERCHANT_PLACE_ID   RETAIL_SHOPPING_FD.MERCHANT_PLACE_ID%TYPE; 
v_MERCHANT_PLACE   RETAIL_SHOPPING_FD.MERCHANT_PLACE%TYPE; 
v_LONGITUDE   RETAIL_SHOPPING_FD.LONGITUDE%TYPE;
v_LATITUDE   RETAIL_SHOPPING_FD.LATITUDE%TYPE; 
v_MERCHANT_REGION   RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE := 'Europe and North America';
v_MERCHANT_STATE   RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE := 'United States of America';  
v_MALL  RETAIL_SHOPPING_FD.MALL%TYPE;
v_CREDIT_CARD_NO   RETAIL_SHOPPING_FD.CREDIT_CARD_NO%TYPE; 
v_TX_TIMESTAMP   RETAIL_SHOPPING_FD.TX_TIMESTAMP%TYPE; 
v_GENDER  RETAIL_SHOPPING_FD.GENDER%TYPE; 
v_AGE  RETAIL_SHOPPING_FD.AGE%TYPE;  
v_rand_no number;
v_which_country number;
BEGIN
    -- Generate Random transactions in random locations    
    v_TOTAL_PAY := round(DBMS_Random.Value(1,11000),0); 
    v_INV_NO := 'INV-RAND_'||v_TOTAL_PAY;  
    v_CUST_ID := round(DBMS_Random.Value(1,40),0);
    select distinct FIRST_NAME||' '||LAST_NAME, GENDER, AGE into v_CUSTOMER_FULLNAME, v_GENDER, v_AGE from FINBANK_ACCOUNTS where id = v_CUST_ID;
    v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);
    select distinct FIRST_NAME||' '||LAST_NAME, GENDER, AGE into v_MERCHANT_FULLNAME, v_GENDER, v_AGE from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; 
    SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
 
        
      v_which_country := round(DBMS_Random.Value(1,6),0); 
       if (v_which_country <= 4) then 
               select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE
               from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = 'Europe and North America' AND STATES_NAME_EN = 'United States of America' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  
        else  
                select  ID, NAME_EN, LONGITUDE, LATITUDE , REGION_EN, STATES_NAME_EN  into v_MERCHANT_PLACE_ID, v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE, v_MERCHANT_REGION, v_MERCHANT_STATE
                from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  
      end if;  
           
    select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
    select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = 'Active' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
 
    v_rand_no := round(DBMS_Random.Value(1,59),0);  
    v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_rand_no, 'second' ); 
    --dbms_output.put_line('BEGIN INSERT          -------------------------------');  
    INSERT INTO RETAIL_SHOPPING_FD 
      (
        INV_NO, 
        CATEGORY, 
        TOTAL_PAY,  
        MALL, 
        CUST_ID, 
        CREDIT_CARD_NO, 
        TX_TIMESTAMP, 
        MERCHANT_ID, 
        MERCHANT_REGION, 
        MERCHANT_STATE, 
        MERCHANT_PLACE, 
        LONGITUDE, 
        LATITUDE, 
        MERCHANT_PLACE_ID, 
        CUSTOMER_FULLNAME, 
        MERCHANT_FULLNAME,
        TX_TYPE,
        GENDER,
        AGE
       ) 
      values
      (
        v_INV_NO, 
        v_CATEGORY, 
        v_TOTAL_PAY,  
        v_MALL, 
        v_CUST_ID, 
        v_CREDIT_CARD_NO, 
        v_TX_TIMESTAMP, 
        v_MERCHANT_ID, 
        v_MERCHANT_REGION, 
        v_MERCHANT_STATE, 
        v_MERCHANT_PLACE, 
        v_LONGITUDE, 
        v_LATITUDE, 
        v_MERCHANT_PLACE_ID, 
        v_CUSTOMER_FULLNAME, 
        v_MERCHANT_FULLNAME,
        'FDTX',  --- Non money laundering
        v_GENDER,
        v_AGE
       );

       --dbms_output.put_line('BEGIN INSERT INTO BANK TRANSFERS         -------------------------------');  
        insert into BANK_TRANSFERS (TXN_ID, SRC_ACCT_ID, DST_ACCT_ID, AMOUNT, DESCRIPTION) 
        values ( EMP_SEQ.NEXTVAL , v_CUST_ID, v_MERCHANT_ID, v_TOTAL_PAY, 'FDTX');
       
END;
/
-------

create or replace Function my_dashboard ( name_in IN varchar2 ) RETURN number
IS
        v_id number;
        v_total_pay number;
        v_this_credit_card varchar2(50);
        v_previous_card  varchar2(50);
        v_this_mall varchar2(50);
        v_previous_mall varchar2(50);
        v_time_diff_number number;
        v_comment varchar2(500);
        v_credit_card_no varchar2(50);
        v_category varchar2(50);
        v_trans_status varchar2(50);
 
        Cursor C1 IS   
        SELECT t.id, t.inv_no, t.total_pay, trans_status, comments, transaction_status,CATEGORY,  
        CREDIT_CARD_NO this_credit_card, 
        LAG(CREDIT_CARD_NO) OVER (ORDER BY id) AS Prev_card, 
        MALL this_mall, 
        LAG(MALL) OVER (ORDER BY id) AS prev_mall,  
        to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss') Curr_Timestamp,   
        LAG(to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss')) OVER (ORDER BY id)  Prev_Timestamp, 
        t.TX_TIMESTAMP - LAG(t.TX_TIMESTAMP) OVER (ORDER BY t.TX_TIMESTAMP) AS time_difference, 
        (LAG(to_char(TX_TIMESTAMP,'yyyymmddHH24MISS')) OVER (ORDER BY id)  - to_char(TX_TIMESTAMP,'yyyymmddHH24MISS') ) AS time_diff_number 
        FROM RETAIL_SHOPPING_FD t  
        order by id desc;

        v_min_time_diff_number number;
        v_min_tx_value number;
        v_max_tx_value number;

--Cursor C2 IS  select credit_card_no from RETAIL_SHOPPING_FD where trans_status = 'BLOCK CARD';
 
BEGIN

       -- dbms_output.put_line('Hi '); 

        SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = 'Minimum Time Frequency';
        SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = 'Approved Purchase';
        SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = 'Rejected Purchase';

        For row_1 In C1 Loop
                v_id := row_1.id; 
                v_time_diff_number := abs(row_1.time_diff_number);
                v_comment := row_1.comments; 
                v_total_pay := row_1.total_pay; 
                v_category := row_1.category; 
                v_this_mall := row_1.this_mall;
                v_previous_mall := row_1.prev_mall;
                v_trans_status := row_1.trans_status;
                v_this_credit_card := row_1.this_credit_card; 
                
                if   (v_time_diff_number <= v_min_time_diff_number AND v_comment is null)  
                        then 
                        v_comment := 'The same credit card has been reused in less than '||v_min_time_diff_number||' seconds and '||v_this_credit_card||' is blocked'; 
                        UPDATE RETAIL_SHOPPING_FD 
                        SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS='REJECT', TRANS_STATUS = 'REJECT' WHERE ID = v_id   
                        AND (TRANS_STATUS != 'UNDER REVIEW' OR  TRANS_STATUS != 'REVIEW COMPLETED');
                       -- dbms_output.put_line('v_id '||v_id||' time_diff_number -->'||v_time_diff_number||'v_comment -> '||v_comment); 
                        ----------- Block credit card ------------------
                         UPDATE CC_FD SET STATUS='Blocked', COMMENTS='Card Auto Blocked' WHERE CC_NO = v_this_credit_card;
                         ---------------------------------------

                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_max_tx_value)  
                        then 
                        v_comment := 'Exceeds max allowed amount of $ '||v_max_tx_value||' for '||v_category||' '; 
                        UPDATE RETAIL_SHOPPING_FD 
                        SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS='REJECT'  WHERE ID = v_id  
                        AND (TRANS_STATUS != 'UNDER REVIEW' OR  TRANS_STATUS != 'REVIEW COMPLETED');
                        --dbms_output.put_line('v_id '||v_id||' time_diff_number -->'||v_time_diff_number||'v_comment -> '||v_comment); 
                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_min_tx_value AND  v_total_pay < v_max_tx_value AND 
                        (v_this_mall = v_previous_mall) )  
                        then 
                        v_comment := 'Higher than normal amount of $ '||v_min_tx_value||' for '||v_category||' in same location '; 
                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number,  TRANSACTION_STATUS='OnHold'  WHERE ID = v_id 
                        AND (TRANS_STATUS != 'UNDER REVIEW' OR  TRANS_STATUS != 'REVIEW COMPLETED');
                       -- dbms_output.put_line('v_id '||v_id||' time_diff_number -->'||v_time_diff_number||'v_comment -> '||v_comment); 
                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_min_tx_value AND  v_total_pay < v_max_tx_value AND  (v_this_mall != v_previous_mall) )  
                        then  
                        v_comment := 'Higher than normal amount of $2000 '||v_category||' Location:Different '; 
                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number,  TRANSACTION_STATUS='OnHold'   WHERE ID = v_id  
                        AND (TRANS_STATUS != 'UNDER REVIEW' OR  TRANS_STATUS != 'REVIEW COMPLETED');
                       --dbms_output.put_line('v_id '||v_id||' time_diff_number -->'||v_time_diff_number||'v_comment -> '||v_comment); 
                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND 
                        v_total_pay <= 2000 AND (v_this_mall = v_previous_mall) )  
                        then 
                        v_comment := 'Valid amount for '||v_category||' Location:Same '; 
                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS='APPROVE', TRANS_STATUS = 'APPROVE' WHERE ID = v_id  
                        AND (TRANS_STATUS != 'UNDER REVIEW' OR  TRANS_STATUS != 'REVIEW COMPLETED');
                        --dbms_output.put_line('v_id '||v_id||' time_diff_number -->'||v_time_diff_number||'v_comment -> '||v_comment); 
                end if;

        End Loop; 

        return (1);
 

END;
/

---------

create or replace procedure FD_TX_PROC is 
    v_myname varchar2(20) := 'Madhu';
    v_n number;
begin
  v_n := my_dashboard ( v_myname );
end;
/

----------------
Select 1 as sort_order,
apex_page.get_url (p_page => 36 ) as LINK1,
'Open Bank Account' title,
'' data,
'bankaccount' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 36 ) as link
from dual

union all

Select 2 as sort_order,
apex_page.get_url (p_page => 41 ) as LINK1,
'Update My Profile' title,
'' AS data,
'updateprofile' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 41 ) as link
from dual

union all

Select 3 as sort_order,
apex_page.get_url (p_page => 56 ) as LINK1,
'Apply for Card' title,
'' data,
'applyforcard' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 56 ) as link
from dual  

union all

Select 4 as sort_order,
apex_page.get_url (p_page => 31 ) as LINK1, 
'Application History' title,
'' data,
'applicationhistory' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 31 ) as link
from dual

union all

Select 5 as sort_order,
apex_page.get_url (p_page => 58 ) as LINK1,
'Online Shopping' title,
'' data,
'cart' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 58 ) as link
from dual

union all

Select 6 as sort_order,
apex_page.get_url (p_page => 85 ) as LINK1,
'ATM Cash Withdrawal' title,
'' data,
'cashwithdrawal' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 85 ) as link
from dual

union all

Select 7 as sort_order,
apex_page.get_url (p_page => 78 ) as LINK1,
'Cheque Deposit' title,
'' data,
'chequedeposit' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 78 ) as link
from dual

union all

Select 8 as sort_order,
apex_page.get_url (p_page => 78 ) as LINK1,
'Generate Bank Statement' title,
'' data,
'bankstatement' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 78 )  as link
from dual

union all

Select 9 as sort_order,
apex_page.get_url (p_page => 78 ) as LINK1,
'Funds Transfer' title,
'' data,
'fundtransfer' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 78 )  as link
from dual

union all

Select 10 as sort_order,
apex_page.get_url (p_page => 78 ) as LINK1,
'Home Loan EMI' title,
'' data,
'loanemi' as icon_class,
'green' as class1,
'green' as class2,
apex_page.get_url (p_page => 78 )  as link
from dual