prompt --application/deployment/install/install_12mayfunctionspackgstriggersseqs_sql
begin
--   Manifest
--     INSTALL: INSTALL-12MayFunctionsPackgsTriggersSeqs.sql
--   Manifest End
wwv_flow_imp.component_begin (
 p_version_yyyy_mm_dd=>'2024.11.30'
,p_release=>'24.2.0'
,p_default_workspace_id=>7477895910065199
,p_default_application_id=>114
,p_default_id_offset=>8992108442064454
,p_default_owner=>'DEMOUSER'
);
wwv_flow_imp_shared.create_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_install_id=>wwv_flow_imp.id(76582507129861619)
,p_name=>'12MayFunctionsPackgsTriggersSeqs.sql'
,p_sequence=>20
,p_script_type=>'INSTALL'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'create or replace function add_to_cart (l_custname varchar2) return number ',
'as  ',
' l_seq number ; ',
' l_sess varchar2(100) := V(''SESSION''); ',
'BEGIN ',
'  Htp.p(''Hello world ''+l_custname); ',
'  return 1; ',
'END; ',
'/',
'create or replace FUNCTION BASE64_TO_BLOB(',
'                          P_BASE64_CLOB CLOB',
'                         )',
'    RETURN BLOB',
'    IS',
'        V_BLOB BLOB;',
'        V_CHUNK_SIZE PLS_INTEGER := 24000;',
'        V_CHUNK VARCHAR2(24000);',
'    BEGIN',
'        DBMS_LOB.CREATETEMPORARY(V_BLOB,FALSE,DBMS_LOB.CALL);',
'        FOR V_I IN 0..TRUNC((DBMS_LOB.GETLENGTH(P_BASE64_CLOB) - 1 ) / V_CHUNK_SIZE) LOOP',
'          DBMS_LOB.APPEND(',
'                          V_BLOB,',
'                          TO_BLOB(',
'                                  UTL_ENCODE.BASE64_DECODE(',
'                                                           UTL_RAW.CAST_TO_RAW(',
'                                                                               DBMS_LOB.SUBSTR(',
'                                                                                               P_BASE64_CLOB,',
'                                                                                               V_CHUNK_SIZE,',
'                                                                                               V_I * V_CHUNK_SIZE + 1',
'                                                                                              )',
'                                                                              )',
'                                                          )',
'                                 )',
'                         );',
'        END LOOP;',
'        RETURN V_BLOB;',
'END;',
'/',
'create or replace FUNCTION BLOB_TO_BASE64(',
'                          P_BLOB BLOB',
'                         )',
'    RETURN CLOB',
'    IS',
'        V_CLOB CLOB;',
'        V_CHUNK_SIZE PLS_INTEGER := 24000;',
'    BEGIN',
'        FOR V_I IN 0..TRUNC((DBMS_LOB.GETLENGTH(P_BLOB) - 1 ) / V_CHUNK_SIZE) LOOP',
'          V_CLOB := V_CLOB || UTL_RAW.CAST_TO_VARCHAR2(',
'                                                       UTL_ENCODE.BASE64_ENCODE(',
'                                                                                DBMS_LOB.SUBSTR(',
'                                                                                                P_BLOB,',
'                                                                                                V_CHUNK_SIZE,',
'                                                                                                V_I * V_CHUNK_SIZE + 1',
'                                                                                               )',
'                                                                               )',
'                                                      );',
'        END LOOP;',
'        RETURN V_CLOB;',
'END;',
'/',
'create or replace FUNCTION card2speech (custname IN VARCHAR2 )  RETURN VARCHAR2  ',
'AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;       ',
'    p_file_blob    BLOB; ',
'    x_object_store_url  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'    l_response            CLOB;  ',
'    v_rand_no number; ',
'    v_filename varchar2(200); ',
'    v_compartment_id varchar2(1000) := ''ocid1.compartment.oc1..replace-this''; ',
'    --- GenAI variables -------------------------------- ',
'    l_genai_rest_url    VARCHAR2(4000) := ''https://inference.generativeai.us-chicago-1.oci.oraclecloud.com/20231130/actions/chat'';    ',
'    l_web_cred        CONSTANT VARCHAR2(50)   := ''replace-this'';     ',
'    l_response_json CLOB; ',
'    l_text varchar2(4000); ',
'    l_prompt varchar2(1000);   ',
'    v_planetext varchar2(32000); ',
'    l_ocigabody varchar2(32000);  ',
'    v_voice varchar2(20) := ''Cindy''; ',
'    --v_custname varchar2(50);',
'    v_amount number;',
' ',
'    CURSOR C1  IS  ',
'            SELECT jt.*  ',
'            FROM   JSON_TABLE(l_response_json, ''$''  COLUMNS (text VARCHAR2(32000)  PATH ''$.chatResponse[0].text'' )) jt;  ',
' ',
'  ',
'BEGIN ',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,10000),0);  ',
'    v_filename := ''Audio''||v_rand_no||''.mp3'';  ',
'    x_object_store_url := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/medical_transcripts/o/Speech/''||v_filename;   ',
' ',
'    v_planetext := custname||''. Please collect your Cash before leaving the ATM. Thank you for Banking with us. Have a great day'';',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "''||v_compartment_id||''", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "''||v_voice||''" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": true, ',
'          "text": "''||v_planetext||''"            ',
'        }'' ',
'    ); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8'');  ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    );    ',
'    p_file_blob := dbms_cloud.get_response_raw(resp);   ',
'     ',
'    apex_web_service.g_request_headers.DELETE;  ',
'    apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'    apex_web_service.g_request_headers(1).value := ''audio/mpeg'';   ',
'    -- Call Web Service to PUT file in OCI.  ',
'    l_response := apex_web_service.make_rest_request  ',
'    (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,   ',
'    p_credential_static_id => l_web_cred);  ',
' ',
'    IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'    END IF;  ',
' ',
'    RETURN v_filename;  ',
'',
'',
'-- declare',
'-- l_custname varchar2(100) := ''replace-this'';',
'-- v_filename varchar2(200); ',
'',
'-- begin',
'',
'--     v_filename := card2speech (l_custname );',
'',
'-- end;',
'',
'',
'END card2speech;',
'/',
'create or replace function CLOB_TO_BLOB (p_clob CLOB) return BLOB',
'as',
' l_blob          blob;',
' l_dest_offset   integer := 1;',
' l_source_offset integer := 1;',
' l_lang_context  integer := DBMS_LOB.DEFAULT_LANG_CTX;',
' l_warning       integer := DBMS_LOB.WARN_INCONVERTIBLE_CHAR;',
'BEGIN',
'',
'  DBMS_LOB.CREATETEMPORARY(l_blob, TRUE);',
'  DBMS_LOB.CONVERTTOBLOB',
'  (',
'   dest_lob    =>l_blob,',
'   src_clob    =>p_clob,',
'   amount      =>DBMS_LOB.LOBMAXSIZE,',
'   dest_offset =>l_dest_offset,',
'   src_offset  =>l_source_offset,',
'   blob_csid   =>DBMS_LOB.DEFAULT_CSID,',
'   lang_context=>l_lang_context,',
'   warning     =>l_warning',
'  );',
'  return l_blob;',
'END;',
'/',
'create or replace FUNCTION CUST_SQLGRAPH_JSON (',
'  QUERY VARCHAR2,',
'  PAGE_START NUMBER DEFAULT NULL,',
'  PAGE_SIZE NUMBER DEFAULT NULL',
') RETURN CLOB',
'  AUTHID CURRENT_USER IS',
'  INCUR    SYS_REFCURSOR;',
'  L_CUR    NUMBER;',
'  RETVALUE CLOB;',
'BEGIN',
'',
'  OPEN INCUR FOR QUERY;',
'  L_CUR := DBMS_SQL.TO_CURSOR_NUMBER(INCUR);',
'  RETVALUE := ORA_SQLGRAPH_TO_JSON(L_CUR, PAGE_START, PAGE_SIZE);',
'  DBMS_SQL.CLOSE_CURSOR(L_CUR);',
'  RETURN RETVALUE;',
'END;',
'/',
'create or replace FUNCTION generate_qry(p_view_name in varchar2 default null) ',
'return varchar2 is ',
'sql_qry varchar2(2000) := null; ',
'row_cnt varchar2(500) := null; ',
'begin ',
'	sql_qry := ''select count(*) from ''||p_view_name; ',
'	execute immediate sql_qry into row_cnt; ',
'	return row_cnt; ',
'    --return sql_qry; ',
'end; ',
'/',
'create or replace FUNCTION generate_text_response2 ( ',
'    user_question VARCHAR2, ',
'    doc_id        NUMBER, ',
'    topn          NUMBER ',
') RETURN CLOB IS ',
' ',
'    messages          CLOB; ',
'    params            CLOB; ',
'    output            CLOB; ',
'    message_line      VARCHAR2(4000); ',
'    message_cursor    SYS_REFCURSOR; ',
'    user_question_vec vector; ',
'    pages_1             varchar2(4000); ',
'    embed_id          number ; ',
'BEGIN ',
' ',
'  --vectorize the user_question ',
' ',
'    OPEN message_cursor FOR ''WITH a AS ( ',
'    SELECT TO_VECTOR(VECTOR_EMBEDDING(TINYBERT_MODEL USING  :user_question AS data)) AS embed ',
'    FROM DUAL) ',
'    SELECT  EMBED_DATA, embed_id ',
'     FROM VECTOR_STORE, a ',
'     WHERE doc_id = :doc_id ',
'     ORDER BY VECTOR_DISTANCE(EMBED_VECTOR, a.embed, COSINE) ',
'     FETCH FIRST :topn ROWS ONLY '' ',
'     USING user_question, doc_id, topn; ',
' ',
'  --select embed_data from vector_store where doc_id=7; ',
'  -- Initialize messages CLOB ',
'    messages := ''Your task  is to answer the Question from the give text. ''; ',
'    pages_1  := ''--''; ',
' ',
'  -- Loop through cursor results and construct messages ',
'    LOOP ',
'        FETCH message_cursor INTO message_line,embed_id; ',
'        EXIT WHEN message_cursor%notfound; ',
' ',
'    -- Append message line to messages CLOB ',
'        messages := messages|| ''{"message": "''|| message_line|| ''"},''|| chr(10); ',
'        pages_1 := embed_id||'',''||pages_1; ',
' ',
'    END LOOP; ',
' ',
'    messages := messages|| ''{"Question": "''|| user_question|| ''"},''|| chr(10); ',
'  -- Close the cursor ',
'    CLOSE message_cursor; ',
' ',
'  -- Remove the trailing comma and newline character ',
'    messages := rtrim(messages, '','' || chr(10)); ',
' ',
'  -- Construct oci genai params JSON ',
'    params := '' ',
'    { ',
'      "provider":"ocigenai", ',
'      "credential_name": "GENAI_CRED", ',
'      "url": "https://inference.generativeai.us-chicago-1.oci.oraclecloud.com/20231130/actions/generateText", ',
'      "model": "cohere.command", ',
'      "inferenceRequest": { ',
'        "maxTokens": 2000, ',
'        "temperature": 1 ',
'      } ',
'    }''; ',
' ',
'    dbms_output.put_line(''------------------------''); ',
'   -- dbms_output.put_line(messages); ',
'    dbms_output.put_line(pages_1); ',
'  --dbms_output.put_line(to_char(user_question_vec)); ',
' ',
'  -- Call UTL function to generate text ',
'  output := dbms_vector_chain.utl_to_generate_text(messages, json(params)); ',
' ',
'  -- Return the generated text ',
'    RETURN output; ',
'EXCEPTION ',
'    WHEN OTHERS THEN ',
'        RETURN sqlerrm || sqlcode; ',
'END; ',
'/',
'create or replace Function getData ( page IN varchar2 )   ',
'RETURN varchar2 ',
'IS     ',
'    l_response VARCHAR2(32000); ',
'    cursor c1 is select term1link from related_labels where label_name = page;   ',
'BEGIN   ',
'    l_response := ''No results'';  ',
'    For row_1 In C1 Loop   ',
'            l_response := row_1.term1link; ',
'            Htp.p(l_response);   ',
'     End Loop;    ',
'    return (l_response); ',
'END;',
'/',
'create or replace FUNCTION get_blob (i_dir IN VARCHAR2, i_file IN VARCHAR2)',
'   RETURN BLOB',
'AS',
'   l_bfile   BFILE;',
'   l_blob    BLOB;',
'BEGIN',
'   DBMS_LOB.createtemporary (l_blob, FALSE);',
'   l_bfile := BFILENAME (i_dir, i_file);',
'   DBMS_LOB.fileopen (l_bfile, DBMS_LOB.file_readonly);',
'   DBMS_LOB.loadfromfile (l_blob, l_bfile, DBMS_LOB.getlength (l_bfile));',
'   DBMS_LOB.fileclose (l_bfile);',
'',
'   RETURN l_blob;',
'EXCEPTION',
'   WHEN OTHERS',
'   THEN',
'      IF DBMS_LOB.fileisopen (l_bfile) = 1',
'      THEN',
'         DBMS_LOB.fileclose (l_bfile);',
'      END IF;',
'',
'      DBMS_LOB.freetemporary (l_blob);',
'      RAISE;',
'END get_blob;',
'/',
'create or replace FUNCTION get_external_image (image_url in VARCHAR2) RETURN CLOB AS     ',
'    image_resp dbms_cloud_types.RESP;',
'BEGIN',
'    image_resp := dbms_cloud.send_request(uri => image_url, method => dbms_cloud.METHOD_GET);',
'        ',
'    return APEX_WEB_SERVICE.BLOB2CLOBBASE64(dbms_cloud.get_response_raw(image_resp),''N'',''N'');',
'END get_external_image;',
'/',
'create or replace Function my_dashboard ( name_in IN varchar2 ) RETURN number',
'IS',
'        v_id number;',
'        v_total_pay number;',
'        v_this_credit_card varchar2(50);',
'        v_previous_card  varchar2(50);',
'        v_this_mall varchar2(50);',
'        v_previous_mall varchar2(50);',
'        v_time_diff_number number;',
'        v_comment varchar2(500);',
'        v_credit_card_no varchar2(50);',
'        v_category varchar2(50);',
'        v_trans_status varchar2(50);',
' ',
'        Cursor C1 IS   ',
'        SELECT t.id, t.inv_no, t.total_pay, trans_status, comments, transaction_status,CATEGORY,  ',
'        CREDIT_CARD_NO this_credit_card, ',
'        LAG(CREDIT_CARD_NO) OVER (ORDER BY id) AS Prev_card, ',
'        MALL this_mall, ',
'        LAG(MALL) OVER (ORDER BY id) AS prev_mall,  ',
'        to_char(TX_TIMESTAMP,''dd/mm/yyyy hh24:mi:ss'') Curr_Timestamp,   ',
'        LAG(to_char(TX_TIMESTAMP,''dd/mm/yyyy hh24:mi:ss'')) OVER (ORDER BY id)  Prev_Timestamp, ',
'        t.TX_TIMESTAMP - LAG(t.TX_TIMESTAMP) OVER (ORDER BY t.TX_TIMESTAMP) AS time_difference, ',
'        (LAG(to_char(TX_TIMESTAMP,''yyyymmddHH24MISS'')) OVER (ORDER BY id)  - to_char(TX_TIMESTAMP,''yyyymmddHH24MISS'') ) AS time_diff_number ',
'        FROM RETAIL_SHOPPING_FD t  ',
'        order by id desc;',
'',
'        v_min_time_diff_number number;',
'        v_min_tx_value number;',
'        v_max_tx_value number;',
'',
'--Cursor C2 IS  select credit_card_no from RETAIL_SHOPPING_FD where trans_status = ''BLOCK CARD'';',
' ',
'BEGIN',
'',
'       -- dbms_output.put_line(''Hi ''); ',
'',
'        SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = ''Minimum Time Frequency'';',
'        SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = ''Approved Purchase'';',
'        SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = ''Rejected Purchase'';',
'',
'        For row_1 In C1 Loop',
'                v_id := row_1.id; ',
'                v_time_diff_number := abs(row_1.time_diff_number);',
'                v_comment := row_1.comments; ',
'                v_total_pay := row_1.total_pay; ',
'                v_category := row_1.category; ',
'                v_this_mall := row_1.this_mall;',
'                v_previous_mall := row_1.prev_mall;',
'                v_trans_status := row_1.trans_status;',
'                v_this_credit_card := row_1.this_credit_card; ',
'                ',
'                if   (v_time_diff_number <= v_min_time_diff_number AND v_comment is null)  ',
'                        then ',
'                        v_comment := ''The same credit card has been reused in less than ''||v_min_time_diff_number||'' seconds and ''||v_this_credit_card||'' is blocked''; ',
'                        UPDATE RETAIL_SHOPPING_FD ',
'                        SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS=''REJECT'', TRANS_STATUS = ''REJECT'' WHERE ID = v_id   ',
'                        AND (TRANS_STATUS != ''UNDER REVIEW'' OR  TRANS_STATUS != ''REVIEW COMPLETED'');',
'                       -- dbms_output.put_line(''v_id ''||v_id||'' time_diff_number -->''||v_time_diff_number||''v_comment -> ''||v_comment); ',
'                        ----------- Block credit card ------------------',
'                         UPDATE CC_FD SET STATUS=''Blocked'', COMMENTS=''Card Auto Blocked'' WHERE CC_NO = v_this_credit_card;',
'                         ---------------------------------------',
'',
'                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_max_tx_value)  ',
'                        then ',
'                        v_comment := ''Exceeds max allowed amount of $ ''||v_max_tx_value||'' for ''||v_category||'' ''; ',
'                        UPDATE RETAIL_SHOPPING_FD ',
'                        SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS=''REJECT''  WHERE ID = v_id  ',
'                        AND (TRANS_STATUS != ''UNDER REVIEW'' OR  TRANS_STATUS != ''REVIEW COMPLETED'');',
'                        --dbms_output.put_line(''v_id ''||v_id||'' time_diff_number -->''||v_time_diff_number||''v_comment -> ''||v_comment); ',
'                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_min_tx_value AND  v_total_pay < v_max_tx_value AND ',
'                        (v_this_mall = v_previous_mall) )  ',
'                        then ',
'                        v_comment := ''Higher than normal amount of $ ''||v_min_tx_value||'' for ''||v_category||'' in same location ''; ',
'                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number,  TRANSACTION_STATUS=''OnHold''  WHERE ID = v_id ',
'                        AND (TRANS_STATUS != ''UNDER REVIEW'' OR  TRANS_STATUS != ''REVIEW COMPLETED'');',
'                       -- dbms_output.put_line(''v_id ''||v_id||'' time_diff_number -->''||v_time_diff_number||''v_comment -> ''||v_comment); ',
'                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND  v_total_pay >= v_min_tx_value AND  v_total_pay < v_max_tx_value AND  (v_this_mall != v_previous_mall) )  ',
'                        then  ',
'                        v_comment := ''Higher than normal amount of $2000 ''||v_category||'' Location:Different ''; ',
'                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number,  TRANSACTION_STATUS=''OnHold''   WHERE ID = v_id  ',
'                        AND (TRANS_STATUS != ''UNDER REVIEW'' OR  TRANS_STATUS != ''REVIEW COMPLETED'');',
'                       --dbms_output.put_line(''v_id ''||v_id||'' time_diff_number -->''||v_time_diff_number||''v_comment -> ''||v_comment); ',
'                elsif   (v_time_diff_number > v_min_time_diff_number AND v_comment is null AND ',
'                        v_total_pay <= 2000 AND (v_this_mall = v_previous_mall) )  ',
'                        then ',
'                        v_comment := ''Valid amount for ''||v_category||'' Location:Same ''; ',
'                        UPDATE RETAIL_SHOPPING_FD SET COMMENTS = v_comment, TIME_DIFFERENCE_NUMBER = v_time_diff_number, TRANSACTION_STATUS=''APPROVE'', TRANS_STATUS = ''APPROVE'' WHERE ID = v_id  ',
'                        AND (TRANS_STATUS != ''UNDER REVIEW'' OR  TRANS_STATUS != ''REVIEW COMPLETED'');',
'                        --dbms_output.put_line(''v_id ''||v_id||'' time_diff_number -->''||v_time_diff_number||''v_comment -> ''||v_comment); ',
'                end if;',
'',
'        End Loop; ',
'',
'        return (1);',
' ',
'',
'END;',
'/',
'create or replace FUNCTION ORA_SQLGRAPH_TO_JSON (',
'  CURS_ID INTEGER,',
'  PAGE_START NUMBER DEFAULT NULL,',
'  PAGE_SIZE NUMBER DEFAULT NULL',
') RETURN CLOB',
'  AUTHID CURRENT_USER IS',
'  M_VCSIZ_4K                              CONSTANT PLS_INTEGER := 4000;',
'  M_VCSIZ_32K                             CONSTANT PLS_INTEGER := 32672;',
'  JSON_FILE                               CLOB; --the returned result',
'  GRAPHNAME                               VARCHAR2(M_VCSIZ_4K);',
'  ELEMENT_NAME                            VARCHAR2(M_VCSIZ_4K);',
'  GRAPHOWNER                              VARCHAR2(M_VCSIZ_4K);',
'  L_COLS                                  INTEGER;',
'  TAB_REC                                 SYS.DBMS_SQL.DESC_TAB;',
'  CUR                                     SYS_REFCURSOR;',
'  L_FLAG                                  NUMBER;',
'  L_JSON                                  VARCHAR2(M_VCSIZ_4K);',
'  VERTEX_ID_COLUMN_LIST                   SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();',
'  EDGE_ID_COLUMN_LIST                     SYS.ODCINUMBERLIST := SYS.ODCINUMBERLIST();',
'  P1                                      NUMBER := 1;',
'  V1                                      NUMBER := 1;',
'  E1                                      NUMBER := 1;',
'  VERTEX_TABLE                            SYS.ODCIRIDLIST := SYS.ODCIRIDLIST();',
'  EDGE_TABLE                              SYS.ODCIRIDLIST := SYS.ODCIRIDLIST();',
'  V2                                      NUMBER := 1;',
'  E2                                      NUMBER := 1;',
'  L_HAVING_ELEMENT_ID                     BOOLEAN := FALSE;',
'  COUNTER                                 NUMBER := 0;',
'BEGIN',
'  SYS.DBMS_SQL.DESCRIBE_COLUMNS(',
'    C => CURS_ID,',
'    COL_CNT => L_COLS,',
'    DESC_T => TAB_REC',
'  );',
'  FOR POS IN 1 .. L_COLS LOOP',
'    CASE TAB_REC (POS).COL_TYPE',
'      WHEN 119 THEN',
'        SYS.DBMS_SQL.DEFINE_COLUMN (CURS_ID, POS, L_JSON, 2000);',
'      ELSE',
'        NULL;',
'    END CASE;',
'  END LOOP;',
'  WHILE SYS.DBMS_SQL.FETCH_ROWS (CURS_ID) != 0 LOOP',
'    COUNTER := COUNTER + 1;',
'    IF ((PAGE_START < 0',
'    OR PAGE_SIZE <= 0)',
'    AND (PAGE_START IS NOT NULL',
'    AND PAGE_SIZE IS NOT NULL)) THEN',
'      RAISE_APPLICATION_ERROR(-20000, ''Please provide valid values for page_start and page_size parameter. page_start should be an integer equal to or greater than 0. page_size should be an integer greater than 0'');',
'    END IF;',
'    IF ((COUNTER > PAGE_START',
'    AND COUNTER <= PAGE_START + PAGE_SIZE)',
'    OR (PAGE_START IS NULL',
'    AND PAGE_START IS NULL) ) THEN',
'      IF P1 = 1 THEN',
'        FOR POS IN 1 .. L_COLS LOOP',
'          IF TAB_REC(POS).COL_TYPE = 119 THEN',
'            SYS.DBMS_SQL.COLUMN_VALUE (CURS_ID, POS, L_JSON);',
'            IF JSON_EXISTS(L_JSON, ''$.ELEM_TABLE'') AND JSON_EXISTS(L_JSON, ''$.GRAPH_OWNER'') AND JSON_EXISTS(L_JSON, ''$.GRAPH_NAME'') AND JSON_EXISTS(L_JSON, ''$.KEY_VALUE'') THEN',
'              L_HAVING_ELEMENT_ID := TRUE;',
'              IF GRAPHNAME IS NULL AND GRAPHOWNER IS NULL THEN',
'                GRAPHNAME := JSON_VALUE(L_JSON, ''$.GRAPH_NAME'');',
'                GRAPHOWNER := JSON_VALUE(L_JSON, ''$.GRAPH_OWNER'');',
'              END IF;',
'              SELECT',
'                ELEMENT_KIND INTO ELEMENT_NAME',
'              FROM',
'                SYS.ALL_PG_ELEMENTS',
'              WHERE',
'                ELEMENT_NAME = JSON_VALUE(L_JSON, ''$.ELEM_TABLE'')',
'                AND GRAPH_NAME = GRAPHNAME',
'                AND OWNER = GRAPHOWNER;',
'              IF ELEMENT_NAME = ''VERTEX'' THEN',
'                VERTEX_ID_COLUMN_LIST.EXTEND;',
'                VERTEX_ID_COLUMN_LIST(V1) := POS;',
'                V1 := V1 + 1;',
'                VERTEX_TABLE.EXTEND();',
'                VERTEX_TABLE(V2) := L_JSON;',
'                V2 := V2 + 1;',
'              ELSE',
'                EDGE_ID_COLUMN_LIST.EXTEND;',
'                EDGE_ID_COLUMN_LIST(E1) := POS;',
'                E1 := E1 + 1;',
'                EDGE_TABLE.EXTEND();',
'                EDGE_TABLE(E2) := L_JSON;',
'                E2 := E2 + 1;',
'              END IF;',
'            END IF;',
'          END IF;',
'        END LOOP;',
'      ELSE',
'        FOR I IN 1..VERTEX_ID_COLUMN_LIST.COUNT LOOP',
'          IF V2 = 32768 THEN',
'            RAISE_APPLICATION_ERROR(-20000,''The number of vertices in the result set exceeds the limit of 32767. Add FETCH/OFFSET clauses to your query or set the page size parameters of the ORA_SQLGRAPH_TO_JSON function to reduce the result size.'');',
'          END IF;',
'          SYS.DBMS_SQL.COLUMN_VALUE (CURS_ID, VERTEX_ID_COLUMN_LIST(I), L_JSON);',
'          VERTEX_TABLE.EXTEND();',
'          VERTEX_TABLE(V2) := L_JSON;',
'          V2 := V2 + 1;',
'        END LOOP;',
'        FOR I IN 1..EDGE_ID_COLUMN_LIST.COUNT LOOP',
'          IF E2 = 32768 THEN',
'            RAISE_APPLICATION_ERROR(-20000,''The number of edges in the result set exceeds the limit of 32767. Add FETCH/OFFSET clauses to your query or set the page size parameters of the ORA_SQLGRAPH_TO_JSON function to reduce the result size.'');',
'          END IF;',
'          SYS.DBMS_SQL.COLUMN_VALUE (CURS_ID, EDGE_ID_COLUMN_LIST(I), L_JSON);',
'          EDGE_TABLE.EXTEND();',
'          EDGE_TABLE(E2) := L_JSON;',
'          E2 := E2 + 1;',
'        END LOOP;',
'      END IF;',
'      P1 := P1 + 1;',
'    END IF;',
'  END LOOP;',
'  IF NOT L_HAVING_ELEMENT_ID AND COUNTER != 0 THEN',
'    RAISE_APPLICATION_ERROR(-20000, ''Please add vertex_id/edge_id in both the COLUMNS and SELECT clause'');',
'  END IF;',
'    JSON_FILE := DBMS_GVT.BUILD_JSON(VERTEX_TABLE, EDGE_TABLE, COUNTER, GRAPHNAME, GRAPHOWNER);',
'  RETURN JSON_FILE;',
'END ORA_SQLGRAPH_TO_JSON;',
'/',
'create or replace FUNCTION order2speech (order_id IN VARCHAR2, cust_name IN VARCHAR2 )  RETURN VARCHAR2  ',
'AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;       ',
'    p_file_blob    BLOB; ',
'    x_object_store_url  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'    l_response            CLOB;  ',
'    v_rand_no number; ',
'    v_filename varchar2(100); ',
'    v_compartment_id varchar2(1000) := ''ocid1.compartment.oc1..replace-this''; ',
'    --- GenAI variables -------------------------------- ',
'    l_genai_rest_url    VARCHAR2(4000) := ''https://inference.generativeai.us-chicago-1.oci.oraclecloud.com/20231130/actions/chat'';    ',
'    l_web_cred        CONSTANT VARCHAR2(50)   := ''replace-this'';     ',
'    l_response_json CLOB; ',
'    l_text varchar2(4000); ',
'    l_prompt varchar2(1000);   ',
'    v_planetext varchar2(32000); ',
'    l_ocigabody varchar2(32000);  ',
'    v_voice varchar2(20) := ''Cindy''; ',
'    v_custname varchar2(50);',
'    v_amount number;',
' ',
'    CURSOR C1  IS  ',
'            SELECT jt.*  ',
'            FROM   JSON_TABLE(l_response_json, ''$''  COLUMNS (text VARCHAR2(32000)  PATH ''$.chatResponse[0].text'' )) jt;  ',
'  ',
'BEGIN ',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,10000),0);  ',
'    v_filename := ''Audio''||v_rand_no||''.mp3'';  ',
'    x_object_store_url := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/medical_transcripts/o/Speech/''||v_filename;   ',
'',
'    select ORDER_TOTAL into v_amount  from PIZZA_ORDER where  id = order_id; ',
'     ',
' ',
'    --v_planetext := ''replace-this is a complex group of diseases characterized by uncontrolled cell growth and division which can then invade and spread to other parts of the body It is a multifaceted disease that can affect any part of the body including'
||' organs tissues and even the blood replace-this is a leading cause of death worldwide and its impact extends beyond the physical symptoms as it can also have profound emotional psychological and social effects on individuals and their families At the core '
||'of replace-thiss development is an alteration in the cells DNA Mutations or changes in the DNA can cause cells to grow out of control and divide uncontrollably leading to the formation of a tumor These abnormal cells can then invade nearby tissues and in s'
||'ome cases spread to other organs through a process known as metastasis There are over 100 types of replace-this each with its unique characteristics and causes The most common types include breast lung colorectal prostate and skin replace-this These types vary i'
||'n their causes risk factors and treatment approaches Some of the key risk factors associated with replace-this include age genetic predisposition lifestyle choices such as smoking and unhealthy diets exposure to carcinogens and previous radiation exposure '
||'among others''; ',
'    --v_custname := ''Jane Smith''; ',
'    --v_amount := 12.56;',
'    --Htp.p(''Test'');',
'    v_planetext := cust_name||''. We have confirmed your ''||v_amount||'' $ payment for Order number ''||order_id||'' . Thank you for your patronage. For more billing information, please visit our website'';',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "''||v_compartment_id||''", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "''||v_voice||''" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": true, ',
'          "text": "''||v_planetext||''"            ',
'        }'' ',
'    ); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8'');  ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    );    ',
'    p_file_blob := dbms_cloud.get_response_raw(resp);   ',
'     ',
'    apex_web_service.g_request_headers.DELETE;  ',
'    apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'    apex_web_service.g_request_headers(1).value := ''audio/mpeg'';   ',
'    -- Call Web Service to PUT file in OCI.  ',
'    l_response := apex_web_service.make_rest_request  ',
'    (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,   ',
'    p_credential_static_id => l_web_cred);  ',
' ',
'    IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'    END IF;  ',
' ',
'    RETURN v_filename;  ',
'END order2speech;',
'/',
'create or replace function PIZZA_DASHBOARD_FUNCTION RETURN number',
'AS ',
'    ----Set Variables --------- ',
'    v_toppings  PIZZA_ORDER_DETAILS.TOPPINGS%TYPE; ',
'    v_pizza_name PIZZASHOPS.PIZZA_NAME%TYPE;',
'    v_qty PIZZASHOPS.QUANTITY_AVAILABLE%TYPE;',
'    v_unit_price PIZZASHOPS.PRICE%TYPE;',
'    v_order_status PIZZA_ORDER.ORDER_STATUS%TYPE; ',
'    v_crust PIZZA_ORDER_DETAILS.CRUST_TYPE%TYPE;',
'    v_sessid PIZZA_ORDER.SESSID%TYPE;',
'    v_mode PIZZA_ORDER."MODE"%TYPE;',
'    v_rand_no number; ',
'    v_any_rows_found number := 0;',
'    ---- Get Session Details --------- ',
'    v_master_pk number;',
'    v_customer_name varchar2(200);',
'    v_phone_number varchar2(200);',
'    v_address varchar2(200);',
'    v_city varchar2(200);',
'    c_latitude number;',
'    c_longitude number;',
'    v_shop varchar2(200);',
'    s_latitude number;',
'    s_longitude number;',
'    v_order_total number := 0;',
'    -- New variable set ',
'    v_size number;',
'    v_dowhat number := 0;',
'    v_nooforders number := 0;',
'    v_line_total number:= '))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'0; ',
'BEGIN ',
'   -- Get Pizza Name',
'     SELECT PIZZA_NAME, QUANTITY_AVAILABLE, PRICE into v_pizza_name, v_qty, v_unit_price FROM  ',
'     ( select PIZZA_NAME, QUANTITY_AVAILABLE, PRICE from PIZZASHOPS where city=''Seattle'' AND QUANTITY_AVAILABLE > 0',
'        ORDER BY DBMS_RANDOM.RANDOM) ',
'        where rownum < 2; ',
'    SELECT   CASE round(dbms_random.value(1,5))  WHEN 1 THEN ''Payment-Pending''  WHEN 1 THEN ''Paid''   WHEN 2 THEN ''Order-Received''  WHEN 3 THEN ''Shipped''  WHEN 4 THEN ''Delivered''  WHEN 5 THEN ''Canceled'' END into v_order_status FROM dual; ',
'    SELECT   CASE round(dbms_random.value(1,3))  WHEN 1 THEN ''Medium''  WHEN 2 THEN ''Thin''   WHEN 3 THEN ''Thick'' END into v_crust FROM dual;',
'    SELECT   CASE round(dbms_random.value(1,6))  WHEN 1 THEN ''Pepperoni''  WHEN 2 THEN ''Capsicum'' WHEN 3 THEN ''Corn'' WHEN 4 THEN ''Cheese'' WHEN 5 THEN ''Paneer''  WHEN 6 THEN ''Chicken'' END into v_toppings FROM dual;',
'    select count(*) into v_nooforders from pizza_order;',
'',
'    ',
' ',
'     -- Random Unit Price ',
'     v_dowhat := round(dbms_random.value(1,10000),0); ',
'     DBMS_OUTPUT.PUT_LINE(''Welcome to PIZZA_DASHBOARD_FUNCTION v_dowhat ''||v_dowhat);',
'     --Htp.p(''Pizza Name is ''||v_pizza_name);',
'     --Htp.p(''Session is v_sessid''||v_sessid);',
'',
'    -- if v_dowhat <= 5000 then ',
'    --     -- Generate Random Session Id',
'    --     v_sessid := v_dowhat;',
'    --     Htp.p(''Random session generated with v_sessid ''||v_sessid);',
'    -- elsif v_nooforders > 0 then',
'    --     -- Get Existing Session Id',
'    --     select sessid into v_sessid from (select sessid from  pizza_order ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'    --     Htp.p(''Used existing session with v_sessid ''||v_sessid);',
'    -- else ',
'    --     v_sessid := 5000;',
'    -- end if;',
'',
'    if v_dowhat <= 5000 then ',
'        -- Generate Random Session Id',
'        v_sessid := v_dowhat;',
'        --v_sessid := 1000;',
'        --Htp.p(''Random session generated with v_sessid ''||v_sessid); ',
'    else ',
'        --v_sessid := 7000;',
'        select sessid into v_sessid from (select sessid from  pizza_order ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'    end if;',
'',
'        ---- Check if Master Records already exists? ---------',
'        select count(*) into  v_any_rows_found from  pizza_order where sessid = v_sessid;',
'        --where  SESSID = v_sess;',
'',
'        -- Our scope of delivery is  where city = ''Seattle'' or city = ''Auburn'' or city = ''Tacoma'' or city = ''Federal Way'' or city = ''Kirkland''',
'        ------ get random data ----------',
'        select  customer_name, phone_number into v_customer_name, v_phone_number from (select customer_name, phone_number  from  customers where country_id = ''US'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'        -- Get Customer Location ------------',
'        select  address, city, latitude, longitude into v_address, v_city, c_latitude, c_longitude from (select address, city, latitude, longitude from pizzashops where city = ''Seattle'' or city = ''Kirkland'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum '
||'< 2; ',
'         -- Get Shop Location ------------',
'        select  shop, latitude, longitude into v_shop, s_latitude, s_longitude from (select shop, latitude, longitude from pizzashops where city = ''Seattle'' or  city = ''Kirkland'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'   ',
'         --------- ',
'          --DBMS_OUTPUT.PUT_LINE(''v_any_rows_found ''||v_any_rows_found);',
'        if v_any_rows_found > 0 then ',
'             ---- Check if Master Records exists? Get PK of Master table ---------',
'            select ID into v_master_pk from  PIZZA_ORDER where sessid = v_sessid;',
'            --DBMS_OUTPUT.PUT_LINE(''Loop 2 Inserting PIZZA_ORDER_DETAILS, Updating PIZZA_ORDER  Rec v_master_pk ''||v_master_pk);',
'            --Htp.p(''Master Record is Found v_any_rows_found ''||v_any_rows_found);',
'             -- Insert into Detail table',
'             v_line_total := v_unit_price * v_qty;',
'            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_line_total, v_qty );',
'            --Htp.p(''Detail Record is Inserted v_master_pk ''||v_master_pk);  ',
'            ---------- get latest sum total',
'            --select sum(line_total) into  v_order_total from  pizza_order_details where sessid = v_sessid;',
'            select sum(line_total) into  v_order_total from  pizza_order_details where sessid = v_sessid;',
'',
'             -- Ensure that Payment Status is set as Payment-Pending',
'            UPDATE PIZZA_ORDER SET ORDER_STATUS = v_order_status, ORDER_TOTAL = v_order_total WHERE sessid = v_sessid;',
'',
'        else',
'            --Htp.p(''Inserting Master Record Firstime'');',
'            ---- Check if Master Records does not exists? Add Master record table and get PK ---------',
'            -- RETURNING ID INTO v_master_pk',
'            --DBMS_OUTPUT.PUT_LINE(''Loop 1 Inserting PIZZA_ORDER_DETAILS, Inserting PIZZA_ORDER  Rec v_sessid ''||v_sessid);',
'            v_line_total := v_unit_price * v_qty;',
'             INSERT INTO PIZZA_ORDER (SESSID, CUSTOMER_NAME, ORDER_STATUS,   CUSTOMER_ADDRESS, PHONE_NUMBER, C_LATITUDE, C_LONGITUDE,  S_LATITUDE, S_LONGITUDE, CITY, ORDER_TOTAL, "MODE")  VALUES ',
'                                    (v_sessid, v_customer_name, v_order_status,  v_address, v_phone_number, c_latitude, c_longitude ,s_latitude, s_longitude , v_city ,v_line_total, v_mode ) RETURNING ID INTO v_master_pk;',
'            --Htp.p(''Detail Record is Inserted'');',
'             v_line_total := v_unit_price * v_qty;',
'            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY  ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_line_total, v_qty );',
'',
'        end if;',
'  ',
'',
'    COMMIT; ',
'  return (1);',
'END;',
'/',
'create or replace FUNCTION rag2speech (v_text_input IN VARCHAR2, v_voice IN varchar2)  RETURN VARCHAR2  ',
'AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;      ',
'    --GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this'';  ',
'    p_file_blob    BLOB; ',
'    x_object_store_url  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'    l_response            CLOB;  ',
'    v_rand_no number; ',
'    v_filename varchar2(500); ',
'    v_compartment_id varchar2(1000) := ''ocid1.compartment.oc1..replace-this''; ',
'    --- GenAI variables -------------------------------- ',
'    l_genai_rest_url    VARCHAR2(4000) := ''https://inference.generativeai.us-chicago-1.oci.oraclecloud.com/20231130/actions/chat'';    ',
'    l_web_cred        CONSTANT VARCHAR2(50)   := ''replace-this'';     ',
'    l_response_json CLOB; ',
'    l_text varchar2(32000); ',
'    l_prompt varchar2(32000);  ',
'    -- l_name varchar2(100) := :P68_NAME; ',
'    -- l_gender varchar2(10) := :P68_GENDER; ',
'    -- l_age varchar2(10) := :P68_AGE; ',
'    -- l_fbs varchar2(100) := :P68_FBS; ',
'    -- l_history varchar2(100) := :P68_HISTORY; ',
'    -- l_smoking varchar2(100) := :P68_SMOKING; ',
'    -- l_excercise varchar2(100) := :P68_EXCERCISE; ',
'    -- l_bp varchar2(100) := :P68_BP; ',
'    v_planetext varchar2(32000); ',
'    l_ocigabody varchar2(32000);  ',
'  ',
' ',
'    CURSOR C1  IS  ',
'            SELECT jt.*  ',
'            FROM   JSON_TABLE(l_response_json, ''$''  COLUMNS (text VARCHAR2(32000)  PATH ''$.chatResponse[0].text'' )) jt;  ',
' ',
'BEGIN ',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,10000),0);  ',
'    v_filename := ''Audio''||v_rand_no||''.mp3'';  ',
'    x_object_store_url := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/medical_transcripts/o/Speech/''||v_filename;    ',
'    --------------- Generate AI Output ---------------- ',
'    l_prompt := v_text_input; ',
'    l_ocigabody  := ''  ',
'    { ',
'        "compartmentId": "''||v_compartment_id||''", ',
'        "servingMode": { ',
'            "servingType": "ON_DEMAND", ',
'            "modelId": "cohere.command-r-08-2024" ',
'        }, ',
'        "chatRequest": { ',
'            "message": "''||l_prompt||''", ',
'            "maxTokens": 600, ',
'            "isStream": false, ',
'            "apiFormat": "COHERE", ',
'            "temperature": 0.75, ',
'            "frequencyPenalty": 1, ',
'            "presencePenalty": 0, ',
'            "topP": 0.7, ',
'            "topK": 1 ',
'        } ',
'    } ',
'    '';   ',
' ',
'    if l_prompt is not null then ',
' ',
'        apex_web_service.g_request_headers.DELETE;  ',
'        apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'        apex_web_service.g_request_headers(1).value := ''application/json'';   ',
' ',
'         l_response_json := apex_web_service.make_rest_request  ',
'           (p_url                  => l_genai_rest_url,  ',
'            p_http_method          => ''POST'',  ',
'            p_body                 => l_ocigabody,  ',
'            p_credential_static_id => l_web_cred);  ',
' ',
'     For row_1 In C1 Loop ',
'           l_text := row_1.text;   ',
'     End Loop;  ',
' ',
'    end if; ',
'   ',
'    --------------- Generate Audio File --------------- ',
'    Htp.p(''Generating Audio File Gen AI Output: <br/> ''||l_text); ',
' ',
unistr('    v_planetext := TRANSLATE(l_text, ''~!@#$%^&*()_+=\005C{}[]:\201D;\2019<,>./?'','' '') ;  '),
'    v_planetext := REPLACE(v_planetext,chr(39),''''); ',
'    v_planetext := REPLACE(v_planetext,chr(10),'' ''); ',
'    v_planetext := REPLACE(v_planetext, ''"'', '' '');',
'    --REPLACE(notes, CHR(10), '' '') ',
' ',
'    Htp.p(''Plane Text: <br/> ''||v_planetext); ',
' ',
'    --v_planetext := ''replace-this is a complex group of diseases characterized by uncontrolled cell growth and division which can then invade and spread to other parts of the body It is a multifaceted disease that can affect any part of the body including'
||' organs tissues and even the blood replace-this is a leading cause of death worldwide and its impact extends beyond the physical symptoms as it can also have profound emotional psychological and social effects on individuals and their families At the core '
||'of replace-thiss development is an alteration in the cells DNA Mutations or changes in the DNA can cause cells to grow out of control and divide uncontrollably leading to the formation of a tumor These abnormal cells can then invade nearby tissues and in s'
||'ome cases spread to other organs through a process known as metastasis There are over 100 types of replace-this each with its unique characteristics and causes The most common types include breast lung colorectal prostate and skin replace-this These types vary i'
||'n their causes risk factors and treatment approaches Some of the key risk factors associated with replace-this include age genetic predisposition lifestyle choices such as smoking and unhealthy diets exposure to carcinogens and previous radiation exposure '
||'among others''; ',
'     ',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "''||v_compartment_id||''", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "''||v_voice||''" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": true, ',
'          "text": "''||v_planetext||''"            ',
'        }'' ',
'    ); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8'');  ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    );    ',
'    p_file_blob := dbms_cloud.get_response_raw(resp);   ',
'     ',
'    apex_web_service.g_request_headers.DELETE;  ',
'    apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'    apex_web_service.g_request_headers(1).value := ''audio/mpeg'';   ',
'    -- Call Web Service to PUT file in OCI.  ',
'    l_response := apex_web_service.make_rest_request  ',
'    (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,   ',
'    p_credential_static_id => l_web_cred);  ',
' ',
'    IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'    END IF;  ',
' ',
'    RETURN v_filename;  ',
'END rag2speech;',
'/',
'create or replace Function rag_function ( rag_input IN varchar2 )  ',
'RETURN varchar2 ',
'IS   ',
'  ',
'    query_vector CLOB; ',
'    text_variable VARCHAR2(1000) := rag_input; ',
'    l_doc_id VARCHAR2(100);  ',
'    l_answer varchar2(32000) := ''Querying ...''; ',
'    cursor c1 is SELECT *  ',
'                    FROM vector_store  ',
'                    ORDER BY VECTOR_DISTANCE( EMBED_VECTOR, query_vector, EUCLIDEAN_SQUARED)  ',
'                    FETCH FIRST 1 ROWS ONLY WITH TARGET ACCURACY 90;   ',
'BEGIN  ',
'    -- select vector_embedding into query_vector based on  ',
'    SELECT vector_embedding(doc_model using text_variable as data) into query_vector;  ',
'    For row_1 In C1 Loop   ',
'           --Htp.p(''<pre>''||row_1.embed_data|| ''</pre>'');  ',
'           l_answer := row_1.embed_data; ',
'           -- clean up result ',
unistr('           l_answer := TRANSLATE(l_answer, ''~!@#$%^&*()_+=\005C{}[]:\201D;\2019<,>./?'','' ''); '),
'           -- clean up result ',
'     End Loop;  ',
'return (l_answer);  ',
'END;',
'/',
'create or replace Function rag_function_v2 ( rag_input IN varchar2 )  ',
'RETURN varchar2 ',
'IS   ',
'  ',
'    query_vector CLOB; ',
'    text_variable VARCHAR2(1000) := rag_input; ',
'    l_doc_id VARCHAR2(100);  ',
'    l_response VARCHAR2(32000); ',
'    cursor c1 is SELECT *  ',
'                    FROM vector_store  ',
'                    ORDER BY VECTOR_DISTANCE( EMBED_VECTOR, query_vector, EUCLIDEAN_SQUARED)  ',
'                    --ORDER BY VECTOR_DISTANCE(EMBED_VECTOR, query_vector, COSINE) ',
'                    FETCH FIRST 1 ROWS ONLY WITH TARGET ACCURACY 90;   ',
'BEGIN  ',
'    -- select vector_embedding into query_vector based on  ',
'    -- SELECT TO_VECTOR(VECTOR_EMBEDDING(TINYBERT_MODEL USING  :user_question AS data)) AS embed ',
'    --SELECT vector_embedding(doc_model using text_variable as data) into query_vector;  ',
'    -- Embedding the user question	VECTOR_EMBEDDING(tinybert_model USING user_question as data) ',
'    -- Do vector search on question against text chunk embeddings	VECTOR_DISTANCE(EMBED_VECTOR, :user_question_vec, COSINE) ',
'    -- Pass the result chunks and the user question to the LLM	DBMS_VECTOR_CHAIN.UTL_TO_GENERATE_TEXT(messages, json(params_genai)) ',
'    -- all-MiniLM-L6-v2.onnx  TINYBERT_MODEL ALL_MINILM_L6V2MODEL ',
'    l_response := ''No results''; ',
'    SELECT vector_embedding(ALL_MINILM_L6V2MODEL using text_variable as data) into query_vector;  ',
'    For row_1 In C1 Loop   ',
'            Htp.p(''<pre> row_1.embed_data ------> ''||row_1.embed_data|| '' <----------- </pre>'');  ',
'           l_response := row_1.embed_data; ',
'     End Loop;  ',
'return (l_response);  ',
'END;',
'/',
'create or replace FUNCTION speech_synthesizespeech (v_text_input IN VARCHAR2)  RETURN BLOB AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;     ',
'    myaudio blob; ',
'BEGIN ',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "ocid1.compartment.oc1..replace-this", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "Annabelle" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": false, ',
'          "text": "''||v_text_input||''"              ',
'        }'' ',
'    ); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8''); ',
'     ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    ); ',
'      ',
'    RETURN dbms_cloud.get_response_raw(resp); ',
'END speech_synthesizespeech;',
'/',
'create or replace FUNCTION speech_synthesizespeech_uploadfile (v_text_input IN VARCHAR2, v_voice IN varchar2)  RETURN VARCHAR2 ',
'--RETURN BLOB  ',
'AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;      ',
'    GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this'';  ',
'    p_file_blob    BLOB; ',
'    x_object_store_url  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'    l_response            CLOB;  ',
'    v_rand_no number; ',
'    v_filename varchar2(100); ',
' ',
'BEGIN ',
'   ',
'    v_rand_no := round(DBMS_Random.Value(1,10000),0);  ',
'    v_filename := ''Audio''||v_rand_no||''.mp3''; ',
' ',
'    --- Generate Speech MP3 file from Text Input ',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "ocid1.compartment.oc1..replace-this", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "''||v_voice||''" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": true, ',
'          "text": "''||v_text_input||''"              ',
'        }'' ',
'    ); ',
'',
'    dbms_output.put_line(''------------------------''); ',
'   -- dbms_output.put_line(messages); ',
'    --dbms_output.put_line(request_body); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8''); ',
'    --Htp.p(request_body);',
'    --Htp.p(''request_body ''+request_body); ',
'    ',
'     ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    );   ',
' ',
'    p_file_blob := dbms_cloud.get_response_raw(resp);  ',
' ',
'    -- Upload file to OCI Object storage ',
'    x_object_store_url := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/medical_transcripts/o/Speech/''||v_filename;   ',
' ',
'    -- Set Mime Type of the file in the Request Header.  ',
'    apex_web_service.g_request_headers.DELETE;  ',
'    apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'    apex_web_service.g_request_headers(1).value := ''audio/mpeg'';  ',
' ',
'    -- Call Web Service to PUT file in OCI.  ',
'    l_response := apex_web_service.make_rest_request  ',
'    (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,   ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
' ',
'    IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'    END IF;  ',
' ',
'      RETURN v_filename;  ',
'END speech_synthesizespeech_uploadfile;',
'/',
'create or replace FUNCTION text2speech (text_input IN VARCHAR2 )  RETURN VARCHAR2  ',
'AS  ',
'    speech_endpoint  varchar2(500) := ''https://speech.aiservice.us-phoenix-1.oci.oraclecloud.com/20220101/actions/synthesizeSpeech''; ',
'    resp dbms_cloud_types.RESP; ',
'    request_json CLOB; ',
'    request_body BLOB;       ',
'    p_file_blob    BLOB; ',
'    x_object_store_url  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'    l_response            CLOB;  ',
'    v_rand_no number; ',
'    v_filename varchar2(100); ',
'    v_compartment_id varchar2(1000) := ''ocid1.compartment.oc1..replace-this''; ',
'    --- GenAI variables --------------------------------  ',
'    l_web_cred        CONSTANT VARCHAR2(50)   := ''replace-this'';     ',
'    l_response_json CLOB; ',
'    l_text varchar2(4000); ',
'    l_prompt varchar2(1000);   ',
'    v_planetext varchar2(32000); ',
'    l_ocigabody varchar2(32000);  ',
'    v_voice varchar2(20) := ''Cindy''; ',
'    v_custname varchar2(50);',
'    v_amount number;',
' ',
'    CURSOR C1  IS  ',
'            SELECT jt.*  ',
'            FROM   JSON_TABLE(l_response_json, ''$''  COLUMNS (text VARCHAR2(32000)  PATH ''$.chatResponse[0].text'' )) jt;  ',
'  ',
'BEGIN ',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,10000),0);  ',
'    v_filename := ''Audio''||v_rand_no||''.mp3'';  ',
'    x_object_store_url := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/medical_transcripts/o/Speech/''||v_filename;   ',
'    --Htp.p (''Test'');',
'     ',
'    request_json := to_clob( ',
'        ''{ ',
'          "audioConfig": { ',
'            "configType": "BASE_AUDIO_CONFIG" ',
'          }, ',
'          "compartmentId": "''||v_compartment_id||''", ',
'          "configuration": { ',
'            "modelDetails": { ',
'              "modelName": "TTS_2_NATURAL", ',
'              "voiceId": "''||v_voice||''" ',
'            }, ',
'            "modelFamily": "ORACLE", ',
'            "speechSettings": { ',
'              "outputFormat": "MP3", ',
'              "sampleRateInHz": 23600, ',
'              "speechMarkTypes": ["WORD"], ',
'              "textType": "TEXT" ',
'            } ',
'          }, ',
'          "isStreamEnabled": true, ',
'          "text": "''||text_input||''"            ',
'        }'' ',
'    ); ',
'     ',
'    request_body := apex_util.clob_to_blob(p_clob => request_json,p_charset => ''AL32UTF8'');  ',
'    resp := dbms_cloud.send_request( ',
'        credential_name => ''GENAI_CRED'', ',
'        uri => speech_endpoint, ',
'        method => dbms_cloud.METHOD_POST, ',
'        body => request_body ',
'    );    ',
'    p_file_blob := dbms_cloud.get_response_raw(resp);   ',
'     ',
'    apex_web_service.g_request_headers.DELETE;  ',
'    apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'    apex_web_service.g_request_headers(1).value := ''audio/mpeg'';   ',
'    -- Call Web Service to PUT file in OCI.  ',
'    l_response := apex_web_service.make_rest_request  ',
'    (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,   ',
'    p_credential_static_id => l_web_cred);  ',
' ',
'    IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'    END IF;  ',
' ',
'    RETURN v_filename;  ',
'END text2speech;',
'/',
'create or replace function viewBookingDetails ( bookingid_in IN varchar2 ) RETURN clob ',
'IS ',
'l_prompt AICHAT.PROMPT%TYPE; ',
'l_action AICHAT.ACTION%TYPE;  ',
'v_passenger_name varchar2(200); ',
'v_passport_number varchar2(20); ',
'v_destination varchar2(100); ',
'v_which_country number; ',
'v_NAME_EN UNESCO_SITES.NAME_EN%TYPE;  ',
'v_STATES_NAME_EN UNESCO_SITES.STATES_NAME_EN%TYPE;  ',
'v_clob clob;  ',
' ',
'BEGIN  ',
' ',
'      ',
'     select  customer_name  into v_passenger_name  from (select customer_name   from  customers where country_id = ''US'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'     v_passport_number := dbms_random.string(''x'',10); ',
'     v_which_country := round(DBMS_Random.Value(1,6),0);  ',
' ',
'     select   NAME_EN, STATES_NAME_EN into v_NAME_EN, v_STATES_NAME_EN  ',
'               from (select NAME_EN, STATES_NAME_EN from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_NAME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;   ',
' ',
'    --  Htp.p(''Booking Details for Reservation ''||bookingid_in); ',
'    --  Htp.p(''<hr/>''); ',
'    --  Htp.p(''<br/>Customer Name: ''||v_customer_name); ',
'    --  Htp.p(''<br/>Passport Number: ''||v_passport_number); ',
'    --  Htp.p(''<br/>Destination: ''||v_NAME_EN||'',''||v_STATES_NAME_EN); ',
'    v_destination := v_NAME_EN||'',''||v_states_name_en; ',
' ',
'    v_clob := v_clob|| ''Booking Details for Reservation ''||bookingid_in; ',
'    v_clob := v_clob|| ''<hr/>'' ; ',
'    v_clob := v_clob|| ''<b>Passenger Name</b>: ''||v_passenger_name ; ',
'    v_clob := v_clob|| ''<br/><b>Passport Number</b>: ''||v_passport_number ; ',
'    v_clob := v_clob|| ''<br/><b>Destination</b>: ''||v_NAME_EN||'',''||v_states_name_en ; ',
' ',
'    -- v_clob := ''<b/> Hello World </b>''; ',
'    --- Insert Data ------ ',
'    Insert into passenger_list  (PASSENGER_NAME, PASSPORT_NUMBER , DESTINATION, BOOKING_ID) values (v_passenger_name, v_passport_number,	v_destination, bookingid_in); ',
'    commit; ',
' ',
'    return (v_clob); ',
'     --return (1); ',
'END; ',
'/',
'create or replace function viewchat ( name_in IN varchar2 ) RETURN number ',
'IS ',
'  ',
'l_prompt AICHAT.PROMPT%TYPE; ',
'l_action AICHAT.ACTION%TYPE;  ',
'l_aisql AICHAT.AISQL%TYPE; ',
'l_airesponse AICHAT.AIRESPONSE%TYPE; ',
'l_qry varchar2(32000);      ',
'CUR1 SYS_REFCURSOR;   ',
'l_rc              SYS_REFCURSOR;  ',
'l_cursor_number   INTEGER; ',
'l_col_cnt         INTEGER; ',
'l_desc_tab        DBMS_SQL.desc_tab; ',
'l_col_num         INTEGER; ',
' ',
'TYPE myrec1 IS RECORD  ',
' ( ',
'   col1 VARCHAR(100)  ',
' );  ',
'myrecord1 myrec1;  ',
' ',
'TYPE myrec2 IS RECORD  ',
' ( ',
'   col1 VARCHAR(100), ',
'   col2 VARCHAR(100) ',
' );  ',
'myrecord2 myrec2;  ',
'    ',
'TYPE myrec3 IS RECORD  ',
' ( ',
'   col1 VARCHAR(100), ',
'   col2 VARCHAR(100), ',
'   col3 VARCHAR(100) ',
' );  ',
' myrecord3 myrec3;  ',
' ',
' ',
' ',
'l_colcount number; ',
'  ',
' ',
'CURSOR C1 IS SELECT PROMPT, ACTION, replace(AISQL,''"'','''') AISQL, AIRESPONSE FROM AICHAT WHERE SESSID = V(''SESSION'') ORDER BY ID DESC; ',
' ',
'BEGIN  ',
'        For row_1 In C1 Loop ',
'            l_prompt := row_1.PROMPT;  ',
'            l_action := row_1.ACTION;  ',
'            l_aisql := row_1.AISQL; ',
'            l_airesponse := row_1.AIRESPONSE;  ',
'            --Htp.p(''<br/> <b>AI Prompt:</b>  ''||l_prompt);  --<b>AI Prompt:</b>  ',
'              ',
'           if l_aisql is not null then  ',
'                Htp.p(''<p/><br/><font color=brown> <b>AI Response:</b>  ''||l_aisql||'' </font><br/> ''); --<b>AI Response:</b> ',
'           end if; ',
' ',
'           if l_airesponse is not null then  ',
'                Htp.p(''<p/><br/><font color=brown> <b>AI Response:</b>    ''||l_airesponse||''  </font><br/> ''); --<b>AI Response:</b> ',
'           end if; ',
' ',
' ',
'            if  l_aisql like ''select%'' then ',
'            l_colcount := 0;  ',
'            l_qry := trim(l_aisql);  ',
'                Htp.p(''<table border=0 cellspacing=2 cellpadding=2>'');   ',
'                OPEN l_rc FOR l_qry;  ',
'                  l_cursor_number   := DBMS_SQL.to_cursor_number (l_rc);  ',
'                  DBMS_SQL.describe_columns (l_cursor_number, l_col_cnt, l_desc_tab);  ',
'                  l_col_num         := l_desc_tab.FIRST;  ',
'                  IF (l_col_num IS NOT NULL) THEN ',
'                    Htp.p(''<tr>'');  ',
'                    LOOP  ',
'                       Htp.p('' <td><b>  ''||l_desc_tab (l_col_num).col_name||''  </b> <td>   ''); ',
'                      l_colcount :=l_colcount+1; ',
'                      l_col_num   := l_desc_tab.NEXT (l_col_num); ',
'                      EXIT WHEN (l_col_num IS NULL); ',
'                    END LOOP; ',
'                   Htp.p(''</tr>'');  ',
'                  END IF;  ',
'                  DBMS_SQL.close_cursor (l_cursor_number);  ',
'  ',
'                          ',
'                  if (l_colcount = 1) then  ',
'                        OPEN CUR1 FOR l_qry;  ',
'                        LOOP ',
'                                FETCH CUR1 INTO myrecord1;   ',
'                                    Htp.p(''<tr><td>   ''||myrecord1.col1||''   <td><tr>''); ',
'                                EXIT WHEN CUR1%NOTFOUND;  ',
'                        END LOOP;  ',
'                        CLOSE cur1;  ',
'                    end if;   ',
' ',
'                  if (l_colcount = 2) then  ',
'                        OPEN CUR1 FOR l_qry;  ',
'                        LOOP ',
'                        FETCH CUR1 INTO myrecord2;   ',
'                            Htp.p(''<tr><td>   ''||myrecord2.col1||''    <td> ',
'                                      <td>   ''||myrecord2.col2||''  <td><tr>''); ',
'                        EXIT WHEN CUR1%NOTFOUND;  ',
'                        END LOOP; ',
'                        Htp.p(''</table>'');        ',
'                        CLOSE cur1;  ',
'                    end if;     ',
' ',
'                    if (l_colcount = 3) then  ',
'                        OPEN CUR1 FOR l_qry;  ',
'                        LOOP ',
'                        FETCH CUR1 INTO myrecord3;   ',
'                            Htp.p(''<tr><td>   ''||myrecord3.col1||''    <td> ',
'                                      <td>  ''||myrecord3.col2||''  <td> ',
'                                      <td>  ''||myrecord3.col3||''  <td><tr>''); ',
'                        EXIT WHEN CUR1%NOTFOUND;  ',
'                        END LOOP; ',
'                        Htp.p(''</table>'');        ',
'                        CLOSE cur1;  ',
'                    end if;     ',
' ',
' ',
'                    Htp.p(''</table>'');  ',
'                  ',
' ',
'            end if;   ',
'            Htp.p(''<hr/>'');      ',
' ',
'        End Loop;  ',
'        return (1); ',
'END;',
'/',
'create or replace function viewqueue ( name_in IN varchar2 ) RETURN number ',
'IS ',
'l_aisql AICHAT.AISQL%TYPE; ',
'l_qry varchar2(4000);  ',
'CUR1 SYS_REFC'))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'URSOR;   ',
'l_rc              SYS_REFCURSOR;  ',
'l_cursor_number   INTEGER; ',
'l_col_cnt         INTEGER; ',
'l_desc_tab        DBMS_SQL.desc_tab; ',
'l_col_num         INTEGER; ',
'l_colcount number := 0;  ',
'tbl_name varchar2(200) := ''AQ$''||name_in; ',
'v_recipients varchar2(200) := ''SINGLE'';  ',
'bgcolor varchar2(100) := ''red''; ',
'fgcolor varchar2(100) := ''black''; ',
' ',
'TYPE myrec5 IS RECORD  ',
' ( ',
'   col1 VARCHAR(100), ',
'   col2 VARCHAR(100), ',
'   col3 VARCHAR(100), ',
'   col4 VARCHAR(100), ',
'   col5 VARCHAR(100), ',
'   col6 VARCHAR(100)   ',
' );  ',
' myrecord5 myrec5;  ',
' ',
' TYPE myrec6 IS RECORD  ',
' ( ',
'   col1 VARCHAR(100), ',
'   col2 VARCHAR(100), ',
'   col3 VARCHAR(100), ',
'   col4 VARCHAR(100), ',
'   col5 VARCHAR(100),  ',
'   col6 VARCHAR(100), ',
'   col7 VARCHAR(100) ',
' );  ',
' myrecord6 myrec6;  ',
' ',
'BEGIN  ',
' ',
'    SELECT distinct RECIPIENTS into v_recipients FROM USER_QUEUES where QUEUE_TABLE = name_in; ',
'  ',
' ',
'    l_aisql := ''SELECT QUEUE, MSG_ID, MSG_PRIORITY, MSG_STATE, ENQ_TIMESTAMP, DEQ_TIMESTAMP  FROM ''||tbl_name||'' order by MSG_PRIORITY'';   ',
' ',
'    if v_recipients = ''MULTIPLE'' then ',
'        l_aisql := ''SELECT QUEUE, MSG_ID, MSG_PRIORITY, MSG_STATE, ENQ_TIMESTAMP, DEQ_TIMESTAMP, CONSUMER_NAME  FROM ''||tbl_name||'' order by MSG_PRIORITY'';    ',
'    end if; ',
' ',
'    Htp.p (l_aisql||''<br/>''); ',
' ',
' ',
'     ',
'                  l_qry := trim(l_aisql);   ',
'                  Htp.p(''<table border=0 cellspacing=2 cellpadding=2>'');  ',
'                  OPEN l_rc FOR l_qry;  ',
'                  l_cursor_number   := DBMS_SQL.to_cursor_number (l_rc);  ',
'                  DBMS_SQL.describe_columns (l_cursor_number, l_col_cnt, l_desc_tab);  ',
'                  l_col_num         := l_desc_tab.FIRST;  ',
'                  IF (l_col_num IS NOT NULL) THEN ',
'                    Htp.p(''<tr>'');  ',
'                    LOOP  ',
'                       Htp.p('' <th><b>  ''||l_desc_tab (l_col_num).col_name||''  </b> </th>   ''); ',
'                      l_colcount := l_colcount+1; ',
'                      l_col_num   := l_desc_tab.NEXT (l_col_num); ',
'                      EXIT WHEN (l_col_num IS NULL); ',
'                    END LOOP; ',
'                   Htp.p(''</tr>'');  ',
'                  END IF;  ',
'                  DBMS_SQL.close_cursor (l_cursor_number);  ',
'  ',
'                  if (l_colcount = 6) then  ',
'                        OPEN CUR1 FOR l_qry;  ',
'                        LOOP ',
'                        FETCH CUR1 INTO myrecord5;   ',
'                            Htp.p(''<tr  bgcolor=#F5F4F1  ><td>    ''||myrecord5.col1||''    </td> ',
'                                      <td>  ''||myrecord5.col2||''  </td> ',
'                                      <td>  ''||myrecord5.col3||''  </td> ',
'                                      <td>  ''||myrecord5.col4||''  </td> ',
'                                      <td>  ''||myrecord5.col5||''  </td> ',
'                                      <td>  ''||myrecord5.col6||''  </td> ',
'                                      <tr>''); ',
'                        EXIT WHEN CUR1%NOTFOUND;  ',
'                        END LOOP; ',
'                        Htp.p(''</table>'');        ',
'                        CLOSE cur1;  ',
'                    end if;   ',
' ',
'                    if (l_colcount = 7) then  ',
'                        OPEN CUR1 FOR l_qry;  ',
'                        LOOP ',
'                        FETCH CUR1 INTO myrecord6;   ',
' ',
'                            if myrecord6.col3 = ''READY'' then ',
'                                bgcolor := ''#F5F4F1''; ',
'                                fgcolor := ''black''; ',
'                            else ',
'                                bgcolor := ''#8B8B8A''; ',
'                                fgcolor := ''black''; ',
'                            end if; ',
' ',
'                            Htp.p(''<tr  bgcolor=''||bgcolor||'' color=''||fgcolor||''><td>    ''||myrecord6.col1||''    </td> ',
'                                      <td>  ''||myrecord6.col2||''  </td> ',
'                                      <td>   ''||myrecord6.col3||''  </td> '');   ',
'                             Htp.p(''  <td>  ''||myrecord6.col4||''  </td> ',
'                                      <td>  ''||myrecord6.col5||''  </td> ',
'                                      <td>  ''||myrecord6.col6||''  </td> ',
'                                      <td>  ''||myrecord6.col7||''  </td> ',
'                                      <tr>''); ',
'                        EXIT WHEN CUR1%NOTFOUND;  ',
'                        END LOOP; ',
'                        Htp.p(''</table>'');        ',
'                        CLOSE cur1;  ',
'                    end if;   ',
' ',
' ',
'                Htp.p(''</table>'');    ',
' ',
'    return 1; ',
'END; ',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'  CREATE UNIQUE INDEX "PASSENGER_LIST_ID_PK" ON "PASSENGER_LIST" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "CNDEMO_DOCUMENT_AI_DOCS_PK" ON "CNDEMO_DOCUMENT_AI_DOCS" ("DOCUMENT_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "DEVREL_MAIN_ID_PK" ON "DEVREL_MAIN" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "ANSWERS_ID_PK" ON "SQLS" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MTL_ROLE_PK" ON "MTL_ROLE" ("ROLE_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MTL_USER_PK" ON "MTL_USER" ("USER_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MSGLOGS_ID_PK" ON "MSGLOGS" ("ID") ',
'  ;',
'',
'  CREATE INDEX "DEVREL_MONTHLYMETRICS_I1" ON "DEVREL_MONTHLYMETRICS" ("DEVREL_MAIN_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_LOC_ID_PK" ON "EBA_GRAPHVIZ_LOCATIONS" ("LOCATION_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "HLTERM_PK" ON "HLTERM" ("TERMID") ',
'  ;',
'',
'  CREATE INDEX "CNDEMO_DOCUMENT_AI_FIELDS_N1" ON "CNDEMO_DOCUMENT_AI_FIELDS" ("DOCUMENT_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "CRM_ID_PK" ON "EBA_DEMO_MD_CRM_CONTACTS" ("CRM_ID") ',
'  ;',
'',
'  CREATE INDEX "ANSWERS_I1" ON "SQLS" ("QUERY") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "STUDENTS_ID_PK" ON "STUDENTS" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_EMP_EMP_ID_PK" ON "EBA_GRAPHVIZ_EMPLOYEES" ("EMPLOYEE_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "CNDEMO_DOCUMENT_AI_FIELDS_PK" ON "CNDEMO_DOCUMENT_AI_FIELDS" ("WORD_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "RELATED_LABELS_ID_PK" ON "RELATED_LABELS" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "BANK_CUSTOMERS_BENEFICIARIES_ID_PK" ON "BANK_CUSTOMERS_BENEFICIARIES" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "AUDIO_T_ID_PK" ON "AUDIO_T" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "COMMON_USER_PK" ON "COMMON_USERS" ("USER_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MTL_CITY_PK" ON "MTL_CITY" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "DEVREL_MONTHLYMETRICS_ID_PK" ON "DEVREL_MONTHLYMETRICS" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_COUNTRY_C_ID_PK" ON "EBA_GRAPHVIZ_COUNTRIES" ("COUNTRY_ID") ',
'  ;',
'',
'  CREATE INDEX "AQ$_FUNDSTRANSFER_QUEUE_TABLE_T" ON "FUNDSTRANSFER_QUEUE_TABLE" ("TIME_MANAGER_INFO") ',
'  ;',
'',
'  CREATE INDEX "AQ$_FUNDSTRANSFER_QUEUE_TABLE_I" ON "FUNDSTRANSFER_QUEUE_TABLE" ("Q_NAME", "STATE", "ENQ_TIME", "STEP_NO", "CHAIN_NO", "LOCAL_ORDER_NO") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "FD_TRANSACTIONS_LOG_ID_PK" ON "FD_TRANSACTIONS_LOG" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_EMP_EMAIL_UK" ON "EBA_GRAPHVIZ_EMPLOYEES" ("EMAIL") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_DEPT_ID_PK" ON "EBA_GRAPHVIZ_DEPARTMENTS" ("DEPARTMENT_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "FD_BANK_NAMES_ID_PK" ON "FD_BANK_NAMES" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "PK_SHOP_ID" ON "SHOPS" ("SHOP_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MYAUDIODATA_ID_PK" ON "MYAUDIODATA" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "MACHINE_LEARNING_C_ID_PK" ON "MACHINE_LEARNING_CONFIGS" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_JOB_ID_PK" ON "EBA_GRAPHVIZ_JOBS" ("JOB_ID") ',
'  ;',
'',
'  CREATE INDEX "BANK_CUSTOMERS_BENEFICIARIES_I1" ON "BANK_CUSTOMERS_BENEFICIARIES" ("BENEFICIARIES_FROM_CUSTID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_REG_ID_PK" ON "EBA_GRAPHVIZ_REGIONS" ("REGION_ID") ',
'  ;',
'',
'  CREATE INDEX "PIZZA_ORDER_DETAILS_I1" ON "PIZZA_ORDER_DETAILS" ("PIZZA_ORDER_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "DELIVERY_MODE_ID_PK" ON "PIZZA_DELIVERY_MODE" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "INS_TEST2_ID_PK" ON "INS_TEST2" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "COMMON_ROLE_PK" ON "COMMON_ROLE" ("ROLE_ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "EBA_GRAPHVIZ_GRAPH_ACTION_PK" ON "EBA_GRAPHVIZ_GRAPH_ACTION" ("ID") ',
'  ;',
'',
'  CREATE INDEX "PIZZASHOPS_IDX" ON "PIZZASHOPS" ("SDO_GEOM") ',
'   INDEXTYPE IS "MDSYS"."SPATIAL_INDEX" ;',
'  ALTER INDEX "PIZZASHOPS_IDX"  UNUSABLE;',
'',
'  CREATE UNIQUE INDEX "PIZZA_ORDER_ID_PK" ON "PIZZA_ORDER" ("ID") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "PK_ITEM_NO" ON "SHOP_ITEMS" ("ITEM_NO") ',
'  ;',
'',
'  CREATE UNIQUE INDEX "PIZZA_ORDER_DETAILS_ID_PK" ON "PIZZA_ORDER_DETAILS" ("ID") ',
'  ;',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'create or replace PACKAGE ANOMALYDETECT_AI_PK AS ',
' ',
'  GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this'';  ',
' ',
'  --- Dynamic variables --- ',
'  v_GC_OCI_OBJ_STORE_BASE_URL  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE;',
'  v_GC_OCI_DOC_AI_URL          MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_URL%TYPE;',
'  v_GC_OCI_DOC_AI_TIMEOUT_SECS  MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_TIMEOUT_SECS%TYPE;',
'  v_GC_WC_CREDENTIAL_ID  MACHINE_LEARNING_CONFIGS.GC_WC_CREDENTIAL_ID%TYPE;',
'  v_GC_OCI_REQ_AI_PAYLOAD MACHINE_LEARNING_CONFIGS.GC_OCI_REQ_AI_PAYLOAD%TYPE;',
'  --PROCEDURE initialize;',
'   ',
'PROCEDURE process_file ',
'  (p_apex_file_name  IN VARCHAR2, ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE,',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE); ',
' ',
'PROCEDURE render_document ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE); ',
'   ',
'END ANOMALYDETECT_AI_PK;',
'/',
'create or replace PACKAGE "BANK_PKG" as',
'    ',
'    function update_application_status(',
'        cust_id in varchar2,',
'        status              in varchar2 )',
'        return                  varchar2;',
'',
'    function update_card_status(',
'        cc_no in varchar2,',
'        status in varchar2,',
'        comments in varchar2  ) return varchar2;',
'',
'end;',
'/',
'create or replace package COM_COMMON_AUTH_PKG as ',
'',
unistr('---------  \D835\DD6F\D835\DD86\D835\DD99\D835\DD8A: 2\D835\DD93\D835\DD89 \D835\DD75\D835\DD86\D835\DD93, 2025 ------------------------------------------------------------------------------'),
unistr('---------  \D835\DD38\D835\DD66\D835\DD65\D835\DD59\D835\DD56\D835\DD5F\D835\DD65\D835\DD5A\D835\DD54\D835\DD52\D835\DD65\D835\DD5A\D835\DD60\D835\DD5F \2119\D835\DD52\D835\DD54\D835\DD5C\D835\DD52\D835\DD58\D835\DD56 -------------------------------------------------------------------------------'),
unistr('---------  \D835\DD38\D835\DD66\D835\DD65\D835\DD59\D835\DD60\D835\DD63 \D835\DD44\D835\DD52\D835\DD55\D835\DD59\D835\DD66\D835\DD64\D835\DD66\D835\DD55\D835\DD59\D835\DD52\D835\DD5F \211D\D835\DD52\D835\DD60  ---------------------------------------------------------------------------- '),
unistr('---------  \D835\DD3B\D835\DD56\D835\DD64\D835\DD54\D835\DD63\D835\DD5A\D835\DD61\D835\DD65\D835\DD5A\D835\DD60\D835\DD5F: \D835\DD38\D835\DD66\D835\DD65\D835\DD59\D835\DD56\D835\DD5F\D835\DD65\D835\DD5A\D835\DD54\D835\DD52\D835\DD65\D835\DD56 \D835\DD4C\D835\DD64\D835\DD56\D835\DD63 -------------------------------------------------------------------------'),
' ',
'function custom_authenticate  ',
'  (  ',
'    p_username in varchar2,  ',
'    p_password in varchar2  ',
'  )  ',
'  return boolean;  ',
' ',
'procedure create_account(  ',
'    p_email    in varchar2,  ',
'    p_password in varchar2,',
'    p_answer in varchar2); ',
'',
'',
' function forgot_password(  ',
'    p_email in varchar2,  ',
'    p_answer in varchar2) ',
'    return varchar2  ;',
' ',
' ',
'function verify_reset_password(  ',
'    p_id in number,  ',
'    p_verification_code in varchar2)  ',
'  return number;  ',
' ',
' procedure request_reset_password(  ',
'    p_email in varchar2) ; ',
' ',
' ',
' procedure mail_reset_password(  ',
'  p_email    in varchar2,  ',
'  p_url      in varchar2) ; ',
'   ',
' procedure reset_password(  ',
'    p_id       in number,  ',
'    p_password in varchar2) ; ',
' ',
' function authz_administrator(  ',
'    p_username in varchar2)  ',
'  return boolean ; ',
' ',
' function authz_user(  ',
'    p_username in varchar2)  ',
'  return boolean ; ',
'end;',
'/',
'create or replace PACKAGE DBMS_GVT',
'  AUTHID CURRENT_USER IS',
' -----------------------------------------------------------------------------',
' -- VERTEX_LATERAL_STRING - prepare vertex query string in LATERAL()',
' -----------------------------------------------------------------------------',
'  FUNCTION PROPERTIES_LATERAL_STRING (',
'    DB_TABLE_NAME_LIST SYS.ODCIVARCHAR2LIST,',
'    DB_OBJECT_OWNER_LIST SYS.ODCIVARCHAR2LIST,',
'    GRAPH_VIZ_TABLE_NAME IN VARCHAR2,',
'    VERTEX_ID_COL_NAME IN VARCHAR2,',
'    GRAPHNAME IN VARCHAR2,',
'    GRAPHOWNER IN VARCHAR2,',
'    ELEMENT_TYPE IN VARCHAR2',
'  ) RETURN VARCHAR2;',
' -----------------------------------------------------------------------------',
' -- EDGE_LATERAL_STRING - prepare edge subquery string in LATERAL()',
' -----------------------------------------------------------------------------',
'  FUNCTION EDGE_LATERAL_STRING (',
'    DB_TABLE_NAME_LIST SYS.ODCIVARCHAR2LIST,',
'    DB_OBJECT_OWNER_LIST SYS.ODCIVARCHAR2LIST,',
'    EDGE_ELEMENT_NAME SYS.ODCIVARCHAR2LIST,',
'    GRAPH_VIZ_TABLE_NAME IN VARCHAR2,',
'    EDGE_ID_COL_NAME IN VARCHAR2,',
'    GRAPHNAME IN VARCHAR2,',
'    GRAPHOWNER IN VARCHAR2',
'  ) RETURN CLOB;',
'  FUNCTION GET_VERSION RETURN VARCHAR2;',
' ----------------------------------------------------------------------------- ',
' -- BUILD_JSON - prepare JSON result from vertex_id and edge_id tables',
' ----------------------------------------------------------------------------- ',
'  FUNCTION BUILD_JSON(',
'      VERTEX_TABLE SYS.ODCIRIDLIST,',
'      EDGE_TABLE SYS.ODCIRIDLIST,',
'      COUNTER NUMBER,',
'      GRAPHNAME VARCHAR2,',
'      GRAPHOWNER VARCHAR2',
'  ) RETURN CLOB;',
'  ',
'END DBMS_GVT;',
'/',
'create or replace PACKAGE IMAGE_AI_PK AS  ',
'-------------------------------------------------------------------------------  ',
'-- NAME        : IMAGE_AI_PK   ',
'-- 2022.1.0   19-Mar-2023  Updated for IMAGE AI Service.  ',
'-------------------------------------------------------------------------------  ',
'   ',
'  GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this'';   ',
'  -- Old Model ocid1.aivisionmodel.oc1.phx.amaaaaaaknuwtjianuvt7rx6r6wdasaz5yp6cnyhhgzktzsvsvgeltvdioyg2f6rey4nahv6liheupktfthw3gakucq ',
' ',
'  --- Dynamic variables --------- ',
'  v_GC_OCI_OBJ_STORE_BASE_URL  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'  v_GC_OCI_DOC_AI_URL          MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_URL%TYPE; ',
'  v_GC_OCI_DOC_AI_TIMEOUT_SECS  MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_TIMEOUT_SECS%TYPE; ',
'  v_GC_WC_CREDENTIAL_ID  MACHINE_LEARNING_CONFIGS.GC_WC_CREDENTIAL_ID%TYPE; ',
'  v_GC_OCI_REQ_AI_PAYLOAD MACHINE_LEARNING_CONFIGS.GC_OCI_REQ_AI_PAYLOAD%TYPE; ',
'  --PROCEDURE initialize; ',
'  -- Updated on 20th Feb -> changed bucket from "bucketName": "X-Ray-Images-Staging", to replace-this',
'   ',
' ',
' GC_OCY_DOC_AI_PAYLOAD      CONSTANT VARCHAR2(32000) := ''{ ',
'  "compartmentId": "ocid1.compartment.oc1..replace-this", ',
'  "image": { ',
'    "source": "OBJECT_STORAGE", ',
'    "namespaceName": "replace-this", ',
'    "bucketName": "replace-this", ',
'    "objectName": "ImageAI/#FILE_NAME#" ',
'  }, ',
'  "features": [ ',
'    { ',
'      "modelId": "ocid1.aivisionmodel.oc1.phx.amaaaaaaknuwtjiaknai2cp5dioyg2f6rey4nahv6liheupktfthw3gakucq", ',
'      "featureType": "IMAGE_CLASSIFICATION", ',
'      "maxResults": 5 ',
'    } ',
'  ] ',
'}'';  ',
' ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE, ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE);  ',
'  ',
'PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE);  ',
'    ',
'END IMAGE_AI_PK;',
'/',
'create or replace package MTL_AUTH_PKG as ',
' ',
'function custom_authenticate  ',
'  (  ',
'    p_username in varchar2,  ',
'    p_password in varchar2  ',
'  )  ',
'  return boolean;  ',
' ',
'procedure create_account(  ',
'    p_email    in varchar2,  ',
'    p_password in varchar2,',
'    p_answer in varchar2); ',
'',
'',
' function forgot_password(  ',
'    p_email in varchar2,  ',
'    p_answer in varchar2) ',
'    return varchar2  ;',
' ',
' ',
'function verify_reset_password(  ',
'    p_id in number,  ',
'    p_verification_code in varchar2)  ',
'  return number;  ',
' ',
' procedure request_reset_password(  ',
'    p_email in varchar2) ; ',
' ',
' ',
' procedure mail_reset_password(  ',
'  p_email    in varchar2,  ',
'  p_url      in varchar2) ; ',
'   ',
' procedure reset_password(  ',
'    p_id       in number,  ',
'    p_password in varchar2) ; ',
' ',
' function authz_administrator(  ',
'    p_username in varchar2)  ',
'  return boolean ; ',
' ',
' function authz_user(  ',
'    p_username in varchar2)  ',
'  return boolean ; ',
'end;',
'/',
'create or replace PACKAGE SENTIMENTAL_AI_PK AS   ',
'   ',
'  GC_OCI_OBJ_STORE_BASE_URL  CONSTANT VARCHAR2(500)  := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/replace-this/o/KV/'';   ',
'  GC_OCI_DOC_AI_URL VARCHAR2(500) := ''https://document.aiservice.us-phoenix-1.oci.oraclecloud.com/20221109/processorJobs'';   ',
'  GC_OCI_DOC_AI_TIMEOUT_SECS CONSTANT NUMBER         := 15;  ',
'  GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this''; --APEX_OCI_BLOG_CREDENTIAL  ',
'    ',
' ',
'  GC_OCY_DOC_AI_PAYLOAD      CONSTANT VARCHAR2(32000) := '' { ',
'    "processorConfig": { ',
'        "processorType": "GENERAL", ',
'        "features": [ ',
'            { ',
'                "featureType": "TABLE_EXTRACTION" ',
'            } ',
'        ] ',
'    }, ',
'    "inputLocation": { ',
'        "sourceType": "OBJECT_STORAGE_LOCATIONS", ',
'        "objectLocations": [ ',
'            { ',
'                "source": "OBJECT_STORAGE", ',
'                "namespaceName": "replace-this", ',
'                "bucketName": "replace-this", ',
'                "objectName": "KV/#FILE_NAME#" ',
'            } ',
'        ] ',
'    }, ',
'    "outputLocation": { ',
'        "bucketName": "replace-this", ',
'        "namespaceName": "replace-this", ',
'        "prefix": "KV" ',
'    }, ',
'   "compartmentId": "ocid1.compartment.oc1..replace-this" ',
'} '';  ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE);  ',
'  ',
'PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE);  ',
' ',
' ',
'PROCEDURE upload_file  ',
'  (p_apex_file_name    IN VARCHAR2,  ',
'   x_file_name        OUT VARCHAR2,  ',
'   x_object_store_url OUT VARCHAR2,  ',
'   x_document_id      OUT cndemo_document_ai_docs.document_id%TYPE); ',
' ',
'  ',
' PROCEDURE put_file  ',
' (p_mime_type         IN VARCHAR2,  ',
'  p_file_blob         IN BLOB,  ',
'  p_file_name         IN VARCHAR2,  ',
'  x_object_store_url OUT VARCHAR2); ',
' ',
' ',
'PROCEDURE sentiment_ai  ',
'  (p_file_name   IN VARCHAR2,  ',
'   p_document_id IN cndemo_document_ai_docs.document_id%TYPE); ',
' ',
'FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB ; ',
'    ',
'END SENTIMENTAL_AI_PK;',
'/',
'create or replace PACKAGE SPEECH_AI_PK AS  ',
' ',
'-------------------------------------------------------------------------------  ',
'-- NAME        : SPEECH_AI_PK  ',
'-- FILE NAME   : SPEECH_AI_PK.sql  ',
'-- 2022.1.0   19-Mar-2023  Updated for SPEECH_AI Service.  ',
'-------------------------------------------------------------------------------  ',
'  ',
'  GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this'';   ',
'  ',
'  --- Dynamic variables --------- ',
'  v_GC_OCI_OBJ_STORE_BASE_URL  MACHINE_LEARNING_CONFIGS.GC_OCI_OBJ_STORE_BASE_URL%TYPE; ',
'  v_GC_OCI_DOC_AI_URL          MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_URL%TYPE; ',
'  v_GC_OCI_DOC_AI_TIMEOUT_SECS  MACHINE_LEARNING_CONFIGS.GC_OCI_DOC_AI_TIMEOUT_SECS%TYPE; ',
'  v_GC_WC_CREDENTIAL_ID  MACHINE_LEARNING_CONFIGS.GC_WC_CREDENTIAL_ID%TYPE; ',
'  v_GC_OCI_REQ_AI_PAYLOAD MACHINE_LEARNING_CONFIGS.GC_OCI_REQ_AI_PAYLOAD%TYPE; ',
'  --PROCEDURE initialize; ',
'   ',
' GC_OCY_DOC_AI_PAYLOAD      CONSTANT VARCHAR2(32000) := ''{ ',
'  "compartmentId": "ocid1.compartment.oc1..replace-this", ',
'  "image": { ',
'    "source": "OBJECT_STORAGE", ',
'    "namespaceName": "replace-this", ',
'    "bucketName": "X-Ray-Images-Staging", ',
'    "objectName": "ImageAI/#FILE_NAME#" ',
'  }, ',
'  "features": [ ',
'    { ',
'      "modelId": "ocid1.aivisionmodel.oc1.phx.amaaaaaaknuwtjiaknai2cp5dioyg2f6rey4nahv6liheupktfthw3gakucq", ',
'      "featureType": "IMAGE_CLASSIFICATION", ',
'      "maxResults": 5 ',
'    } ',
'  ] ',
'}'';  ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE, ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE);  ',
'  ',
'PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE);  ',
'    ',
'END SPEECH_AI_PK; ',
'/',
'create or replace package youtube_utils authid definer as ',
'',
'    procedure capture_stats;',
'    -- updated',
'',
'end youtube_utils;',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'create or replace PROCEDURE CLEAN_JOURNAL_PARTITION AS ',
'BEGIN ',
'    INSERT INTO TEST (RUN_TIME, DTS) VALUES (SYSDATE, SYSDATE); ',
'    COMMIT; ',
'END; ',
'/',
'create or replace PROCEDURE FD_BANK_TXS_INSERTS (v_start_date IN DATE, v_end_date IN DATE)',
'AS ',
'       v_random_number NUMBER;',
'       v_transaction_type VARCHAR2(20);',
'       v_initial_balance number := 1000000;',
'       v_amount number;',
'       v_random_description VARCHAR2(50);',
'       v_random_transfer_to VARCHAR2(50); ',
'       v_random_sentence VARCHAR2(100);',
'       v_months NUMBER;',
'       v_no_of_trans NUMBER;',
'       v_no_of_transactions_pm NUMBER := 20;',
'       v_no_of_transactions_perday NUMBER;',
'       v_days NUMBER;',
'       v_transaction_date DATE;',
'       v_transaction_id NUMBER := 1;',
'',
'BEGIN',
'    -- clean up data ',
'    delete from FD_BANK_TRANSACTIONS;',
'    insert into FD_BANK_TRANSACTIONS (TXDATE, BALANCE, TRANSACTIONTYPE ) values (v_start_date,  v_initial_balance, ''Carry Forward''   );',
'    ------  BEGIN GENERATING FD_BANK_TRANSACTIONS RANDOMS ------------------------------- ',
'    v_months := (EXTRACT(YEAR FROM v_end_date) - EXTRACT(YEAR FROM v_start_date)) * 12',
'               + EXTRACT(MONTH FROM v_end_date) - EXTRACT(MONTH FROM v_start_date);',
'     ',
'    v_no_of_trans := v_no_of_transactions_pm * (v_months + 1);',
'    v_days := TRUNC(v_end_date) - TRUNC(v_start_date);',
'',
'      v_transaction_date := v_start_date;',
'      WHILE v_transaction_date <= v_end_date LOOP',
'        -- Get Random Number of Transactions for a given day 1 to 4',
'        v_no_of_transactions_perday := FLOOR(DBMS_RANDOM.VALUE(1, 4));',
'        FOR i IN 1..v_no_of_transactions_perday LOOP',
'          ',
'          v_amount := FLOOR(DBMS_RANDOM.VALUE(1, 20000)); ',
'          v_random_description := DBMS_RANDOM.STRING(''X'', 10); ',
'          v_random_transfer_to := DBMS_RANDOM.STRING(''Y'', 10);  ',
'          v_random_number := FLOOR(DBMS_RANDOM.VALUE(1, 4));',
'',
'        CASE v_random_number',
'        WHEN 1 THEN',
'            v_transaction_type := ''deposited with '';',
'            v_random_sentence := ''Your account has been '' || v_transaction_type || CONCAT(''$'', TO_CHAR(v_amount, ''9,999,999'')) || '' Reference No: '' || v_random_description || '''';',
'            v_initial_balance := v_initial_balance + v_amount;',
'            insert into FD_BANK_TRANSACTIONS (TXDATE, TRANSACTIONTYPE, CREDIT, BALANCE, TXID) values (v_transaction_date, v_random_sentence, v_amount, v_initial_balance, v_random_description);',
'        WHEN 2 THEN',
'            v_transaction_type := ''Withdrawn '';',
'            v_random_sentence := '''' || v_transaction_type || CONCAT(''$'', TO_CHAR(v_amount, ''9,999,999'')) || '' from your account Reference No: '' || v_random_description || '''';',
'            v_initial_balance := v_initial_balance - v_amount;',
'           insert into FD_BANK_TRANSACTIONS (TXDATE, TRANSACTIONTYPE, DEBIT, BALANCE, TXID) values (v_transaction_date, v_random_sentence, v_amount, v_initial_balance, v_random_description);',
'        WHEN 3 THEN',
'            v_transaction_type := ''transferrred '';',
'            v_random_sentence := ''Amount '' || CONCAT(''$'', TO_CHAR(v_amount, ''9,999,999'')) || '' has been '' ||v_transaction_type|| '' to '' || v_random_transfer_to || '' Reference No: '' || v_random_description || '''';',
'            v_initial_balance := v_initial_balance - v_amount; ',
'           insert into FD_BANK_TRANSACTIONS (TXDATE, TRANSACTIONTYPE, DEBIT, BALANCE, TXID) values (v_transaction_date, v_random_sentence, v_amount, v_initial_balance, v_random_description);',
'        END CASE; ',
'',
'      ',
'          v_transaction_id := v_transaction_id + 1;',
'        END LOOP;',
'        v_transaction_date := v_transaction_date + 1;',
'      END LOOP;',
' ',
'         ',
'END;',
'/',
'create or replace PROCEDURE FD_TX_ANM_INSERTS  ',
'AS ',
'v_total_pay FD_TX_HISTORIC_DATA.TOTAL_PAY%TYPE;',
'v_time_diff number := 1; ',
'GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := ''replace-this''; ',
'l_response_json CLOB;',
'json_input_str3 varchar2(32000) ;',
'l_api_url varchar2(1000) := ''https://anomalydetection.aiservice.us-phoenix-1.oci.oraclecloud.com/20210101/actions/detectAnomalies'';',
'l_body varchar2(32000) ;',
'',
'---------- New variables ----------------',
'v_INV_NO FD_TX_HISTORIC_DATA.INV_NO%TYPE;',
'v_TX_TIMESTAMP FD_TX_HISTORIC_DATA.TX_TIMESTAMP%TYPE; ',
'v_CATEGORY FD_TX_HISTORIC_DATA.CATEGORY%TYPE; ',
'v_CUST_ID FD_TX_HISTORIC_DATA.CUST_ID%TYPE;',
'v_MERCHANT_ID FD_TX_HISTORIC_DATA.MERCHANT_ID%TYPE;',
'v_CUSTOMER_FULLNAME FD_TX_HISTORIC_DATA.CUSTOMER_FULLNAME%TYPE; ',
'v_MERCHANT_FULLNAME FD_TX_HISTORIC_DATA.MERCHANT_FULLNAME%TYPE;  ',
'v_MERCHANT_PLACE_ID   FD_TX_HISTORIC_DATA.MERCHANT_PLACE_ID%TYPE; ',
'v_MERCHANT_PLACE   FD_TX_HISTORIC_DATA.MERCHANT_PLACE%TYPE; ',
'v_LONGITUDE   FD_TX_HISTORIC_DATA.LONGITUDE%TYPE;',
'v_LATITUDE   FD_TX_HISTORIC_DATA.LATITUDE%TYPE; ',
'v_MERCHANT_REGION   FD_TX_HISTORIC_DATA.MERCHANT_REGION%TYPE;',
'v_MERCHANT_CITY FD_TX_HISTORIC_DATA.MERCHANT_CITY%TYPE;',
'v_MERCHANT_STATE   FD_TX_HISTORIC_DATA.MERCHANT_STATE%TYPE;  ',
'v_MALL  FD_TX_HISTORIC_DATA.MALL%TYPE;',
'v_CREDIT_CARD_NO   FD_TX_HISTORIC_DATA.CREDIT_CARD_NO%TYPE;  ',
'v_rand_no number;',
'---------- New variables ----------------',
'--/*',
'CURSOR tx_anm_crs (l_response_json IN CLOB) IS ',
'    SELECT jt.* ',
'    FROM   JSON_TABLE(l_response_json, ''$.detectionResults[*]'' ',
'             COLUMNS (tx_timestamp      VARCHAR2(100)  PATH ''$.timestamp'' , actualValue      VARCHAR2(100)  PATH ''$.anomalies.actualValue'' )) jt; ',
'',
'',
'cursor c1 is ',
'      SELECT  JSON_ARRAYAGG(',
'                 JSON_OBJECT',
'                 (',
'                        ''timestamp'' VALUE TO_CHAR((  TX_TIMESTAMP  ), ''YYYY-MM-DD"T"HH24:MI:SS".000Z"'' ), ',
'                        ''values'' VALUE json_array(TOTAL_PAY)   ',
'                ) ORDER BY TX_TIMESTAMP   )  as TX_DATA  ',
'FROM FD_TX_HISTORIC_DATA  ;',
'--*/',
'BEGIN ',
'',
'    dbms_output.put_line(''BEGIN GENERATING RANDOMS -------------------------------'');  ',
'     ',
'    dbms_output.put_line(''END GENERATING RANDOMS -------------------------------'');  ',
'     ',
'       delete from FD_TX_HISTORIC_DATA;',
'       ------ lets make all credit cards active -----------------',
'       UPDATE CC_FD SET STATUS = ''Active''; ',
'',
'        FOR Lcntr IN 1..20 LOOP',
'                v_total_pay := round(DBMS_Random.Value(1,12000),0);  ',
'                v_INV_NO := ''INV-RAND_''||v_total_pay; ',
'                v_CUST_ID := round(DBMS_Random.Value(1,40),0);',
'                select distinct FIRST_NAME||'' ''||LAST_NAME into v_CUSTOMER_FULLNAME from FINBANK_ACCOUNTS where id = v_CUST_ID;',
'                SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING WHERE CATEGORY != ''-'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);',
'                select distinct FIRST_NAME||'' ''||LAST_NAME into v_MERCHANT_FULLNAME from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; ',
'                --select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_N'
||'AME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                select  ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN into ',
'                        v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE , ',
'                        v_MERCHANT_REGION, v_MERCHANT_STATE',
'                        from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_NAME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownu'
||'m < 2; ',
'                select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'                select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = ''Active'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                 v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_time_diff, ''second'' ); ',
'                INSERT INTO FD_TX_HISTORIC_DATA ',
'                (',
'                        INV_NO, ',
'                        CATEGORY, ',
'                        TX_TIMESTAMP, ',
'                        TOTAL_PAY,  ',
'                        MALL, ',
'                        CUST_ID, ',
'                        CREDIT_CARD_NO,  ',
'                        MERCHANT_ID, ',
'                        MERCHANT_REGION, ',
'                        MERCHANT_CITY,',
'                        MERCHANT_STATE, ',
'                        MERCHANT_PLACE, ',
'                        LONGITUDE, ',
'                        LATITUDE, ',
'                        MERCHANT_PLACE_ID, ',
'                        CUSTOMER_FULLNAME, ',
'                        MERCHANT_FULLNAME',
'                ) ',
'                values',
'                (',
'                        v_INV_NO, ',
'                        v_CATEGORY, ',
'                        v_TX_TIMESTAMP, ',
'                        v_total_pay,  ',
'                        v_MALL, ',
'                        v_CUST_ID, ',
'                        v_CREDIT_CARD_NO,  ',
'                        v_MERCHANT_ID, ',
'                        v_MERCHANT_REGION, ',
'                        v_M'))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
' ',
'                        v_MERCHANT_REGION, ',
'                        v_MERCHANT_CITY,',
'                        v_MERCHANT_STATE, ',
'                        v_MERCHANT_PLACE, ',
'                        v_LONGITUDE, ',
'                        v_LATITUDE, ',
'                        v_MERCHANT_PLACE_ID, ',
'                        v_CUSTOMER_FULLNAME, ',
'                        v_MERCHANT_FULLNAME',
'                );',
'                v_time_diff := v_time_diff + 1;',
'        END LOOP;',
'       ',
'         --/*',
'        FOR Lcntr2 IN 1..5 LOOP',
'                v_total_pay := round(DBMS_Random.Value(1,55000),0);  ',
'                v_INV_NO := ''INV-RAND_''||v_total_pay; ',
'                v_CUST_ID := round(DBMS_Random.Value(1,40),0);',
'                select distinct FIRST_NAME||'' ''||LAST_NAME into v_CUSTOMER_FULLNAME from FINBANK_ACCOUNTS where id = v_CUST_ID;',
'                SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);',
'                select distinct FIRST_NAME||'' ''||LAST_NAME into v_MERCHANT_FULLNAME from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; ',
'                --select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_N'
||'AME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                select  ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE , v_MERCHANT_REGION, v_MERCHANT_STATE',
'                        from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                        --where REGION_EN = ''Europe and North America'' AND STATES_NAME_EN = ''United States of America''',
'                select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'                select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = ''Active'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'                 v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_time_diff, ''second'' ); ',
'                INSERT INTO FD_TX_HISTORIC_DATA ',
'                (',
'                        INV_NO, ',
'                        CATEGORY, ',
'                        TX_TIMESTAMP, ',
'                        TOTAL_PAY,  ',
'                        MALL, ',
'                        CUST_ID, ',
'                        CREDIT_CARD_NO,  ',
'                        MERCHANT_ID, ',
'                        MERCHANT_REGION, ',
'                        MERCHANT_CITY,',
'                        MERCHANT_STATE, ',
'                        MERCHANT_PLACE, ',
'                        LONGITUDE, ',
'                        LATITUDE, ',
'                        MERCHANT_PLACE_ID, ',
'                        CUSTOMER_FULLNAME, ',
'                        MERCHANT_FULLNAME',
'                ) ',
'                values',
'                (',
'                        v_INV_NO, ',
'                        v_CATEGORY, ',
'                        v_TX_TIMESTAMP, ',
'                        v_total_pay,  ',
'                        v_MALL, ',
'                        v_CUST_ID, ',
'                        v_CREDIT_CARD_NO,  ',
'                        v_MERCHANT_ID, ',
'                        v_MERCHANT_REGION, ',
'                        v_MERCHANT_CITY,',
'                        v_MERCHANT_STATE, ',
'                        v_MERCHANT_PLACE, ',
'                        v_LONGITUDE, ',
'                        v_LATITUDE, ',
'                        v_MERCHANT_PLACE_ID, ',
'                        v_CUSTOMER_FULLNAME, ',
'                        v_MERCHANT_FULLNAME',
'                );',
'                v_time_diff := v_time_diff + 1;',
'        END LOOP;',
'',
'        ',
'        For row_1 In C1 Loop',
'        json_input_str3 := row_1.TX_DATA; ',
'        End Loop;',
'',
'        l_body   := ''{',
'                "modelId": "ocid1.aianomalydetectionmodel.oc1.phx.amaaaaaaknuwtjiaapusfv6pxavfbxm546pan2phqh54j2p64j2ys7inkofq",',
'                "requestType": "INLINE",',
'                "signalNames":["TOTAL_PAY"],',
'                "data":   ''||json_input_str3||''',
'        }'';',
'',
'        apex_web_service.g_request_headers.DELETE; ',
'        apex_web_service.g_request_headers(1).name  := ''Content-Type''; ',
'        apex_web_service.g_request_headers(1).value := ''application/json''; ',
'',
'        -- Call the Document AI analyzeDocument REST Web Service. ',
'',
'        l_response_json := apex_web_service.make_rest_request ',
'        (p_url                  => l_api_url, ',
'        p_http_method          => ''POST'', ',
'        p_body                 => l_body, ',
'        p_credential_static_id => GC_WC_CREDENTIAL_ID);',
' ',
'',
'        For row_1 In tx_anm_crs (l_response_json) Loop ',
'        -------- run update query -----------',
'               UPDATE FD_TX_HISTORIC_DATA SET IS_ANOMALY = ''YES'' WHERE TOTAL_PAY = row_1.actualValue;',
'        End Loop;',
'        --*/',
'END;',
'/',
'create or replace PROCEDURE FD_TX_HISTORICDATA_INSERTS (v_time_diff IN number, v_tot_pay IN number)',
'AS  ',
'v_TOTAL_PAY FD_TX_HISTORIC_DATA.TOTAL_PAY%TYPE; ',
'v_TX_TIMESTAMP   FD_TX_HISTORIC_DATA.TX_TIMESTAMP%TYPE; ',
'',
'BEGIN',
'    ',
'    dbms_output.put_line(''BEGIN GENERATING RANDOMS -------------------------------'');   ',
'     v_TOTAL_PAY := v_tot_pay;   ',
'    v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_time_diff, ''second'' ); ',
'    dbms_output.put_line(''BEGIN INSERT          -------------------------------'');  ',
'    INSERT INTO FD_TX_HISTORIC_DATA ',
'      ( ',
'        TOTAL_PAY,   ',
'        TX_TIMESTAMP ',
'       ) ',
'      values',
'      ( ',
'        v_TOTAL_PAY,   ',
'        v_TX_TIMESTAMP ',
'       ); ',
'       ',
'END;',
'/',
'create or replace PROCEDURE FD_TX_INSERTS  ',
'AS  ',
'v_INV_NO RETAIL_SHOPPING_FD.INV_NO%TYPE;',
'v_CATEGORY RETAIL_SHOPPING_FD.CATEGORY%TYPE;',
'v_TOTAL_PAY RETAIL_SHOPPING_FD.TOTAL_PAY%TYPE; ',
'v_CUST_ID RETAIL_SHOPPING_FD.CUST_ID%TYPE;',
'v_MERCHANT_ID RETAIL_SHOPPING_FD.MERCHANT_ID%TYPE;',
'v_CUSTOMER_FULLNAME RETAIL_SHOPPING_FD.CUSTOMER_FULLNAME%TYPE; ',
'v_MERCHANT_FULLNAME RETAIL_SHOPPING_FD.MERCHANT_FULLNAME%TYPE;  ',
'v_MERCHANT_PLACE_ID   RETAIL_SHOPPING_FD.MERCHANT_PLACE_ID%TYPE; ',
'v_MERCHANT_PLACE   RETAIL_SHOPPING_FD.MERCHANT_PLACE%TYPE; ',
'v_LONGITUDE   RETAIL_SHOPPING_FD.LONGITUDE%TYPE;',
'v_LATITUDE   RETAIL_SHOPPING_FD.LATITUDE%TYPE; ',
'v_MERCHANT_REGION   RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE := ''Europe and North America'';',
'v_MERCHANT_STATE   RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE := ''United States of America'';  ',
'v_MALL  RETAIL_SHOPPING_FD.MALL%TYPE;',
'v_CREDIT_CARD_NO   RETAIL_SHOPPING_FD.CREDIT_CARD_NO%TYPE; ',
'v_TX_TIMESTAMP   RETAIL_SHOPPING_FD.TX_TIMESTAMP%TYPE; ',
'v_GENDER  RETAIL_SHOPPING_FD.GENDER%TYPE; ',
'v_AGE  RETAIL_SHOPPING_FD.AGE%TYPE;  ',
'v_rand_no number;',
'v_which_country number;',
'BEGIN',
'    -- Generate Random transactions in random locations    ',
'    v_TOTAL_PAY := round(DBMS_Random.Value(1,11000),0); ',
'    v_INV_NO := ''INV-RAND_''||v_TOTAL_PAY;  ',
'    v_CUST_ID := round(DBMS_Random.Value(1,40),0);',
'    select distinct FIRST_NAME||'' ''||LAST_NAME, GENDER, AGE into v_CUSTOMER_FULLNAME, v_GENDER, v_AGE from FINBANK_ACCOUNTS where id = v_CUST_ID;',
'    v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);',
'    select distinct FIRST_NAME||'' ''||LAST_NAME, GENDER, AGE into v_MERCHANT_FULLNAME, v_GENDER, v_AGE from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; ',
'    SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
' ',
'        ',
'      v_which_country := round(DBMS_Random.Value(1,6),0); ',
'       if (v_which_country <= 4) then ',
'               select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE',
'               from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_NAME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  ',
'        else  ',
'                select  ID, NAME_EN, LONGITUDE, LATITUDE , REGION_EN, STATES_NAME_EN  into v_MERCHANT_PLACE_ID, v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE, v_MERCHANT_REGION, v_MERCHANT_STATE',
'                from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  ',
'      end if;  ',
'           ',
'    select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'    select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = ''Active'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,59),0);  ',
'    v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_rand_no, ''second'' ); ',
'    --dbms_output.put_line(''BEGIN INSERT          -------------------------------'');  ',
'    INSERT INTO RETAIL_SHOPPING_FD ',
'      (',
'        INV_NO, ',
'        CATEGORY, ',
'        TOTAL_PAY,  ',
'        MALL, ',
'        CUST_ID, ',
'        CREDIT_CARD_NO, ',
'        TX_TIMESTAMP, ',
'        MERCHANT_ID, ',
'        MERCHANT_REGION, ',
'        MERCHANT_STATE, ',
'        MERCHANT_PLACE, ',
'        LONGITUDE, ',
'        LATITUDE, ',
'        MERCHANT_PLACE_ID, ',
'        CUSTOMER_FULLNAME, ',
'        MERCHANT_FULLNAME,',
'        TX_TYPE,',
'        GENDER,',
'        AGE',
'       ) ',
'      values',
'      (',
'        v_INV_NO, ',
'        v_CATEGORY, ',
'        v_TOTAL_PAY,  ',
'        v_MALL, ',
'        v_CUST_ID, ',
'        v_CREDIT_CARD_NO, ',
'        v_TX_TIMESTAMP, ',
'        v_MERCHANT_ID, ',
'        v_MERCHANT_REGION, ',
'        v_MERCHANT_STATE, ',
'        v_MERCHANT_PLACE, ',
'        v_LONGITUDE, ',
'        v_LATITUDE, ',
'        v_MERCHANT_PLACE_ID, ',
'        v_CUSTOMER_FULLNAME, ',
'        v_MERCHANT_FULLNAME,',
'        ''FDTX'',  --- Non money laundering',
'        v_GENDER,',
'        v_AGE',
'       );',
'',
'       --dbms_output.put_line(''BEGIN INSERT INTO BANK TRANSFERS         -------------------------------'');  ',
'        insert into BANK_TRANSFERS (TXN_ID, SRC_ACCT_ID, DST_ACCT_ID, AMOUNT, DESCRIPTION) ',
'        values ( EMP_SEQ.NEXTVAL , v_CUST_ID, v_MERCHANT_ID, v_TOTAL_PAY, ''FDTX'');',
'       ',
'END;',
'/',
'create or replace PROCEDURE FD_TX_INSERTS_ML  (v_MERCHANT_REGION IN RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE, v_MERCHANT_STATE IN RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE)',
'AS  ',
'v_INV_NO RETAIL_SHOPPING_FD.INV_NO%TYPE;',
'v_CATEGORY RETAIL_SHOPPING_FD.CATEGORY%TYPE;',
'v_TOTAL_PAY RETAIL_SHOPPING_FD.TOTAL_PAY%TYPE; ',
'v_CUST_ID RETAIL_SHOPPING_FD.CUST_ID%TYPE;',
'v_MERCHANT_ID RETAIL_SHOPPING_FD.MERCHANT_ID%TYPE;',
'v_CUSTOMER_FULLNAME RETAIL_SHOPPING_FD.CUSTOMER_FULLNAME%TYPE; ',
'v_MERCHANT_FULLNAME RETAIL_SHOPPING_FD.MERCHANT_FULLNAME%TYPE;  ',
'v_MERCHANT_PLACE_ID   RETAIL_SHOPPING_FD.MERCHANT_PLACE_ID%TYPE; ',
'v_MERCHANT_PLACE   RETAIL_SHOPPING_FD.MERCHANT_PLACE%TYPE; ',
'v_LONGITUDE   RETAIL_SHOPPING_FD.LONGITUDE%TYPE;',
'v_LATITUDE   RETAIL_SHOPPING_FD.LATITUDE%TYPE;  ',
'v_MALL  RETAIL_SHOPPING_FD.MALL%TYPE;',
'v_CREDIT_CARD_NO   RETAIL_SHOPPING_FD.CREDIT_CARD_NO%TYPE; ',
'v_TX_TIMESTAMP   RETAIL_SHOPPING_FD.TX_TIMESTAMP%TYPE; ',
'v_rand_no number; ',
'v2_MERCHANT_REGION   RETAIL_SHOPPING_FD.MERCHANT_REGION%TYPE;',
'v2_MERCHANT_STATE   RETAIL_SHOPPING_FD.MERCHANT_STATE%TYPE;  ',
'',
'BEGIN',
'    ------cleanup ------',
'   ',
'',
'    dbms_output.put_line(''BEGIN GENERATING RANDOMS Money Laundering -------------------------------'');  ',
'    v_TOTAL_PAY := round(DBMS_Random.Value(10000,110000),0); ',
'    v_INV_NO := ''INV-RAND_''||v_TOTAL_PAY;  ',
'    v_CUST_ID := round(DBMS_Random.Value(1,10),0);',
'    select distinct FIRST_NAME||'' ''||LAST_NAME into v_CUSTOMER_FULLNAME from FINBANK_ACCOUNTS where id = v_CUST_ID;',
'    v_MERCHANT_ID := round(DBMS_Random.Value(1,10),0);',
'    select distinct FIRST_NAME||'' ''||LAST_NAME into v_MERCHANT_FULLNAME from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; ',
'    SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
' ',
'',
'    if v_MERCHANT_REGION = ''Europe and North America'' then     ',
'        select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE',
'        from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = ''Europe and North America'' AND STATES_NAME_EN = ''United States of America'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'    else  ',
'        select  ID, NAME_EN, LONGITUDE, LATITUDE  into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE  ',
'        from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  ',
'    end if;',
' ',
'    select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'    select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = ''Active'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
' ',
'    v_rand_no := round(DBMS_Random.Value(1,59),0);  ',
'    v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_rand_no, ''second'' ); ',
'    dbms_output.put_line(''BEGIN INSERT          -------------------------------''); ',
'',
'    dbms_output.put_line(     v_INV_NO    ); ',
'    dbms_output.put_line(     v_CATEGORY ); ',
'    dbms_output.put_line(    v_TOTAL_PAY   ); ',
'    dbms_output.put_line(   v_MALL ); ',
'    dbms_output.put_line(    v_CUST_ID ); ',
'    dbms_output.put_line(    v_CREDIT_CARD_NO ); ',
'    dbms_output.put_line(    v_TX_TIMESTAMP ); ',
'    dbms_output.put_line(    v_MERCHANT_ID );',
'    dbms_output.put_line(    v_MERCHANT_REGION ); ',
'    dbms_output.put_line(    v_MERCHANT_STATE ); ',
'    dbms_output.put_line(    v_MERCHANT_PLACE ); ',
'    dbms_output.put_line(    v_LONGITUDE ); ',
'    dbms_output.put_line(    v_LATITUDE ); ',
'    dbms_output.put_line(    v_MERCHANT_PLACE_ID ); ',
'    dbms_output.put_line(    v_CUSTOMER_FULLNAME ); ',
'    dbms_output.put_line(    v_MERCHANT_FULLNAME); ',
'',
'',
'    INSERT INTO RETAIL_SHOPPING_FD ',
'      (',
'        INV_NO ,',
'       CATEGORY ,',
'        TOTAL_PAY,  ',
'        MALL, ',
'        CUST_ID ,',
'        CREDIT_CARD_NO, ',
'        TX_TIMESTAMP, ',
'        MERCHANT_ID, ',
'        MERCHANT_REGION, ',
'        MERCHANT_STATE, ',
'        MERCHANT_PLACE, ',
'        LONGITUDE, ',
'        LATITUDE, ',
'        MERCHANT_PLACE_ID, ',
'        CUSTOMER_FULLNAME, ',
'        MERCHANT_FULLNAME,',
'        TX_TYPE',
'       ) ',
'      values',
'      (',
'        v_INV_NO  ,',
'       v_CATEGORY,',
'        v_TOTAL_PAY,  ',
'        v_MALL, ',
'        v_CUST_ID ,',
'        v_CREDIT_CARD_NO, ',
'        v_TX_TIMESTAMP, ',
'        v_MERCHANT_ID, ',
'        v_MERCHANT_REGION, ',
'        v_MERCHANT_STATE, ',
'        v_MERCHANT_PLACE, ',
'        v_LONGITUDE, ',
'        v_LATITUDE, ',
'        v_MERCHANT_PLACE_ID, ',
'        v_CUSTOMER_FULLNAME, ',
'        v_MERCHANT_FULLNAME,',
'        ''ML''',
'       );',
'',
'        dbms_output.put_line(''END INSERT          -------------------------------'');',
'',
'       dbms_output.put_line(''BEGIN INSERT INTO BANK TRANSFERS         -------------------------------'');  ',
'        insert into BANK_TRANSFERS (TXN_ID, SRC_ACCT_ID, DST_ACCT_ID, AMOUNT, DESCRIPTION, INV_NO, MERCHANT_REGION,  MERCHANT_STATE,  MERCHANT_PLACE ) ',
'        values ( EMP_SEQ.NEXTVAL , v_CUST_ID, v_MERCHANT_ID, v_TOTAL_PAY, ''ML'', v_INV_NO ,  v_MERCHANT_REGION,  v_MERCHANT_STATE,  v_MERCHANT_PLACE  );',
'       ',
'END;',
'/',
'create or replace procedure FD_TX_PROC is ',
'    v_myname varchar2(20) := ''replace'';',
'    v_n number;',
'begin',
'  v_n := my_dashboard ( v_myname );',
'end;',
'/',
'create or replace PROCEDURE insert_my_table_row( ',
'    p_file_name IN my_books.file_name%TYPE, ',
'    p_file_size IN my_books.file_size%TYPE, ',
'    p_file_type IN my_books.file_type%TYPE, ',
'    p_file_content IN my_books.file_content%TYPE, ',
'    p_new_id OUT number ',
') ',
'IS ',
'    v_count NUMBER; ',
'    v_id    number; ',
'    new_id  number ; ',
'BEGIN ',
'    -- Check if the combination of a and b already exists ',
'    BEGIN ',
'    SELECT id INTO new_id FROM MY_BOOKS WHERE file_name = p_file_name AND file_size = p_file_size; ',
'    EXCEPTION WHEN NO_DATA_FOUND THEN ',
'    INSERT INTO MY_BOOKS (file_name, file_size, file_type, file_content) ',
'        VALUES (p_file_name, p_file_size, p_file_type, p_file_content) ',
'        RETURNING id into new_id; ',
'    END; ',
'    p_new_id := new_id; ',
'    dbms_output.put_line(new_id); ',
'    COMMIT; ',
'EXCEPTION ',
'    WHEN OTHERS THEN ',
'        -- Exception handling here, for example, a rollback or a custom error message ',
'            DBMS_OUTPUT.PUT_LINE(''Error: '' || SQLERRM); ',
'        --RAISE; ',
'END insert_my_table_row; ',
'/',
'create or replace procedure Ins_Test2_proc is ',
'begin ',
'  insert into Ins_Test2(updatedat) values(sysdate); ',
'  commit; ',
'end; ',
'/',
'create or replace PROCEDURE load_binary_from_url (p_url  IN  VARCHAR2) AS',
'  l_http_request   UTL_HTTP.req;',
'  l_http_response  UTL_HTTP.resp;',
'  l_blob           BLOB;',
'  l_raw            RAW(32767);',
'BEGIN',
'  -- Initialize the BLOB.',
'  DBMS_LOB.createtemporary(l_blob, FALSE);',
'',
'  -- Make a HTTP request and get the response.',
'  l_http_request  := UTL_HTTP.begin_request(p_url);',
'  l_http_response := UTL_HTTP.get_response(l_http_request);',
'',
'  -- Copy the response into the BLOB.',
'  BEGIN',
'    LOOP',
'      UTL_HTTP.read_raw(l_http_response, l_raw, 32767);',
'      DBMS_LOB.writeappend (l_blob, UTL_RAW.length(l_raw), l_raw);',
'    END LOOP;',
'  EXCEPTION',
'    WHEN UTL_HTTP.end_of_body THEN',
'      UTL_HTTP.end_response(l_http_response);',
'  END;',
'',
'  -- Insert the data into the table.',
'--   INSERT INTO http_blob_test (id, url, data)',
'--   VALUES (http_blob_test_seq.NEXTVAL, p_url, l_blob);',
'',
'  -- Relase the resources associated with the temporary LOB.',
'  DBMS_LOB.freetemporary(l_blob);',
'EXCEPTION',
'  WHEN OTHERS THEN',
'    UTL_HTTP.end_response(l_http_response);',
'    DBMS_LOB.freetemporary(l_blob);',
'    RAISE;',
'END load_binary_from_url;',
'/',
'create or replace PROCEDURE PIZZA_CART_INSERTS ',
'(',
'    v_pizza_name IN PIZZASHOPS.PIZZA_NAME%TYPE,',
'    v_sessid IN varchar2,  ',
'    v_order_status IN PIZZA_ORDER.ORDER_STATUS%TYPE,',
'    v_size IN  PIZZA_ORDER_DETAILS."SIZE"%TYPE,',
'    v_crust  IN  PIZZA_ORDER_DETAILS.CRUST_TYPE%TYPE,',
'    v_toppings IN  PIZZA_ORDER_DETAILS.TOPPINGS%TYPE,',
'    v_unit_price IN  PIZZA_ORDER_DETAILS.LINE_TOTAL%TYPE,',
'    v_qty IN  PIZZA_ORDER_DETAILS.QUANTITY%TYPE,  ',
'    v_pizza_id IN PIZZA_ORDER_DETAILS.ID%TYPE ',
')',
'AS   ',
'v_rand_no number; ',
'v_any_rows_found number := 0;',
'---- Get Session Details --------- ',
'v_master_pk number;',
'v_customer_name varchar2(200);',
'v_phone_number varchar2(200);',
'v_address varchar2(200);',
'v_city varchar2(200);',
'c_latitude number;',
'c_longitude number;',
'v_shop varchar2(200);',
's_latitude number;',
's_longitude number;',
'v_order_total number := 0;',
'',
'BEGIN',
'     ',
'',
'     ---- Check if Master Records already exists? ---------',
'        select count(*) into  v_any_rows_found from  pizza_order where sessid = v_sessid;',
'       ',
'        ------ get random data ----------',
'        select  customer_name, phone_number into v_customer_name, v_phone_number from (select customer_name, phone_number  from  customers where country_id = ''US'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'        -- Get Customer Location ------------',
'        select  address, city, latitude, longitude into v_address, v_city, c_latitude, c_longitude from (select address, city, latitude, longitude from pizzashops ',
'        where city = ''seattle'' or city = ''kirkland'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; ',
'         -- Get Shop Location ------------',
'        select  shop, latitude, longitude into v_shop, s_latitude, s_longitude from (select shop, latitude, longitude from pizzashops ',
'        where city = ''seattle'' or  city = ''kirkland'' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;',
'  ',
'         --------- ',
'        if v_any_rows_found > 0 then ',
'             ---- Check if Master Records exists? Get PK of Master table ---------',
'            select ID into v_master_pk from  PIZZA_ORDER where sessid = v_sessid; ',
'             -- Insert into Detail table',
'            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_unit_price, v_qty ); ',
'            select sum(line_total) into  v_order_total from  pizza_order_details where sessid = v_sessid; ',
'            UPDATE PIZZA_ORDER SET ORDER_STATUS = v_order_status, ORDER_TOTAL = v_order_total WHERE sessid = v_sessid;',
'',
'        else ',
'',
'            INSERT INTO PIZZA_ORDER (SESSID, CUSTOMER_NAME, ORDER_STATUS,   CUSTOMER_ADDRESS, PHONE_NUMBER, C_LATITUDE, C_LONGITUDE,  S_LATITUDE, S_LONGITUDE, CITY, ORDER_TOTAL)  VALUES ',
'                                    (v_sessid, v_customer_name, v_order_status,  v_address, v_phone_number, c_latitude, c_longitude ,s_latitude, s_longitude , v_city ,v_unit_price ) RETURNING ID INTO v_master_pk; ',
'            INSERT INTO PIZZA_ORDER_DETAILS (SESSID, PIZZA_NAME, PIZZA_ORDER_ID, "SIZE",CRUST_TYPE, TOPPINGS, LINE_TOTAL, QUANTITY  ) VALUES (v_sessid, v_pizza_name, v_master_pk, v_size, v_crust, v_toppings, v_unit_price, v_qty );',
'',
'        end if;',
' ',
'     ',
'',
'    COMMIT;',
'       ',
'END;',
'/',
'create or replace PROCEDURE PIZZA_DASHBOARD_PROCEDURE  ',
'IS ',
'    v_n number; ',
'BEGIN ',
'  v_n := PIZZA_DASHBOARD_FUNCTION (); ',
'END;',
'/',
'create or replace PROCEDURE show_dash  ( v_col1 IN NUMBER) ',
'AS ',
'--DECLARE ',
' ',
'    --dbms_output.put_line(''v_time_diff_number ''||v_time_diff_number); ',
'     ',
'     v_time_diff_number number;',
'BEGIN ',
'    Htp.p (''Hi'');',
'    ',
'--    SELECT  ',
'--     (LAG(to_char(ts1,''yyyymmddHH24MISS'')) OVER (ORDER BY col1)  - to_char(ts1,''yyyymmddHH24MISS'') ) ',
'--     AS time_diff_number  into v_time_diff_number',
'--     FROM TEST_TBL1 t   ',
'--     where col1 = v_col1',
'--     order by col1 ',
'--     desc ;',
'--     dbms_output.put_line(''v_time_diff_number ''||v_time_diff_number); ',
'   ',
'END;',
'/',
'create or replace procedure TEST_TBL1_PROC is',
'begin',
'  INSERT INTO TEST_TBL1 (update_date) values (sysdate);',
'  commit;',
'end;',
'/',
'create or replace procedure update_bank_status_proc is  ',
'BEGIN',
'  UPDATE FD_BANK_NAMES',
'  SET BANK_STATUS = CASE',
'                  WHEN DBMS_RANDOM.VALUE <= 0.6 THEN ''Available''',
'                  ELSE ''NA''',
'                END;',
'END;',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'   CREATE SEQUENCE  "EBA_GRAPHVIZ_GRAPH_ACTION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1261 NOCACHE  NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;',
'',
'   CREATE SEQUENCE  "EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16966 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;',
'',
'   CREATE SEQUENCE  "DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;',
'',
'   CREATE SEQUENCE  "COMMON_USER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1061 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;',
'',
'  CREATE OR REPLACE EDITIONABLE SYNONYM ""."pizzaorders_pizzaorderdetails_jdv" FOR ""."PIZZAORDERS_PIZZAORDERDETAILS_JDV";',
'',
'  CREATE OR REPLACE EDITIONABLE SYNONYM ""."shop_items_dv" FOR ""."SHOP_ITEMS_DV";',
'',
'  CREATE OR REPLACE EDITIONABLE SYNONYM ""."shop_items_dv2" FOR ""."SHOP_ITEMS_DV2";',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'create or replace TRIGGER "BI_COMMON_USERS" ',
'  before insert on "COMMON_USERS"                ',
'  for each row   ',
'begin    ',
'  if :NEW."USER_ID" is null then  ',
'    select "COMMON_USER_SEQ".nextval into :NEW."USER_ID" from sys.dual;  ',
'  end if;  ',
'end;',
'/',
'create or replace TRIGGER "CNDEMO_DOCUMENT_AI_DOCS_BIU"  ',
'BEFORE INSERT OR UPDATE ON CNDEMO_DOCUMENT_AI_DOCS FOR EACH ROW ',
'BEGIN ',
'  IF INSERTING THEN ',
'    :new.created_by       := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),SYS_CONTEXT(''USERENV'', ''SESSION_USER'')); ',
'    :new.creation_date    := current_timestamp; ',
'    :new.last_updated_by  := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),SYS_CONTEXT(''USERENV'', ''SESSION_USER'')); ',
'    :new.last_update_date := current_timestamp; ',
'  ELSIF UPDATING THEN ',
'    :new.last_updated_by  := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),USER); ',
'    :new.last_update_date := current_timestamp; ',
'  END IF; ',
'END; ',
'/',
'create or replace TRIGGER "CNDEMO_DOCUMENT_AI_FIELDS_BIU"  ',
'BEFORE INSERT OR UPDATE ON CNDEMO_DOCUMENT_AI_FIELDS FOR EACH ROW ',
'BEGIN ',
'  IF INSERTING THEN ',
'    :new.created_by       := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),SYS_CONTEXT(''USERENV'', ''SESSION_USER'')); ',
'    :new.creation_date    := current_timestamp; ',
'    :new.last_updated_by  := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),SYS_CONTEXT(''USERENV'', ''SESSION_USER'')); ',
'    :new.last_update_date := current_timestamp; ',
'  ELSIF UPDATING THEN ',
'    :new.last_updated_by  := COALESCE(SYS_CONTEXT(''APEX$SESSION'',''APP_USER''),USER); ',
'    :new.last_update_date := current_timestamp; ',
'  END IF; ',
'END; ',
'/',
'create or replace trigger dept_trg1',
'              before insert on dept',
'              for each row',
'              begin',
'                  if :new.deptno is null then',
'                      select dept_seq.nextval into :new.deptno from sys.dual;',
'                 end if;',
'              end;',
'/',
'create or replace TRIGGER "EBA_GRAPHVIZ_GRAPH_ACTION_TRIGGER" ',
'BEFORE INSERT ON EBA_GRAPHVIZ_GRAPH_ACTION ',
'FOR EACH ROW',
'BEGIN',
'  SELECT EBA_GRAPHVIZ_GRAPH_ACTION_SEQ.NEXTVAL',
'  INTO   :new.id',
'  FROM   dual;',
'END;',
'/',
'create or replace trigger emp_trg1',
'              before insert on emp',
'              for each row',
'              begin',
'                  if :new.empno is null then',
'                      select emp_seq.nextval into :new.empno from sys.dual;',
'                 end if;',
'              end;',
'/',
'create or replace TRIGGER "PASSENGER_LIST_TRG"  ',
'after ',
'update on "PASSENGER_LIST"  ',
'for each row ',
'declare ',
'        v_booking_id number; ',
'        -- v_n number := 0; ',
'        -- v_min_time_diff_number number; ',
'         ',
'begin ',
'   null;  ',
'    ',
'end; ',
'  ',
' ',
' ',
'-- create or replace TRIGGER "RETAIL_SHOPPING_FD_TRG"  ',
'-- before ',
'-- insert on "RETAIL_SHOPPING_FD"  ',
'-- for each row ',
'-- declare ',
'--         v_ccid number; ',
'--         v_n number := 0; ',
'--         v_min_time_diff_number number; ',
'--         v_min_tx_value number; ',
'--         v_max_tx_value number; ',
'-- begin ',
' ',
'--     SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = ''Minimum Time Frequency''; ',
'--     SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = ''Approved Purchase''; ',
'--     SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = ''Rejected Purchase''; ',
' ',
'--     SELECT id ',
'--       INTO v_ccid  ',
'--       FROM cc_fd ',
'--      WHERE cc_no = :new.credit_card_no;    ',
'--     if inserting then ',
'--         if :new.total_pay < v_min_tx_value then ',
'--                 :new.transaction_status := ''APPROVED''; ',
'--                 :new.comments := ''Lower than minimum amount of $ ''||v_min_tx_value||''''; ',
'--         elsif :new.total_pay >= v_min_tx_value AND :new.total_pay < v_max_tx_value then ',
'--                 :new.transaction_status := ''OnHold''; ',
'--                 :new.trans_status := ''UNREAD''; ',
'--         else  ',
'--                 :new.transaction_status := ''REJECTED''; ',
'--                 :new.comments := ''Higher than allowed amount of $ ''||v_max_tx_value||''''; ',
'--         end if;  ',
'--         :new.cc_id := v_ccid;     ',
'--    end if;      ',
'    ',
'-- end; ',
'--; ',
'/',
'create or replace TRIGGER "RETAIL_SHOPPING_FD_TRG"  ',
'before ',
'insert on "RETAIL_SHOPPING_FD"  ',
'for each row ',
'declare ',
'        v_ccid number; ',
'        v_n number := 0; ',
'        v_min_time_diff_number number; ',
'        v_min_tx_value number; ',
'        v_max_tx_value number; ',
'begin ',
' ',
'    SELECT unit_value into v_min_time_diff_number from FD_BUSINESS_RULES where unit = ''Minimum Time Frequency''; ',
'    SELECT unit_value into v_min_tx_value from FD_BUSINESS_RULES where unit = ''Approved Purchase''; ',
'    SELECT unit_value into v_max_tx_value from FD_BUSINESS_RULES where unit = ''Rejected Purchase''; ',
' ',
'    SELECT id ',
'      INTO v_ccid  ',
'      FROM cc_fd ',
'     WHERE cc_no = :new.credit_card_no;    ',
'    if inserting then ',
'        if :new.total_pay < v_min_tx_value then ',
'                :new.transaction_status := ''APPROVE''; ',
'                :new.comments := ''Lower than minimum amount of $ ''||v_min_tx_value||''''; ',
'        elsif :new.total_pay >= v_min_tx_value AND :new.total_pay < v_max_tx_value then ',
'                :new.transaction_status := ''OnHold''; ',
'                :new.trans_status := ''UNREAD''; ',
'        else  ',
'                :new.transaction_status := ''REJECT''; ',
'                :new.comments := ''Higher than allowed amount of $ ''||v_max_tx_value||''''; ',
'        end if;  ',
'        :new.cc_id := v_ccid;     ',
'   end if;      ',
'    ',
'end;',
'/',
'create or replace TRIGGER "TRG_MYBOOKS_VECTOR_STORE_COMPOUND"  ',
'FOR INSERT ON my_books ',
'COMPOUND TRIGGER ',
' ',
'    TYPE t_id_tab IS TABLE OF my_books.id%TYPE INDEX BY PLS_INTEGER; ',
'    v_ids t_id_tab; ',
' ',
'    AFTER EACH ROW IS ',
'    BEGIN ',
'        v_ids(v_ids.COUNT + 1) := :NEW.id; ',
'    END AFTER EACH ROW; ',
' ',
'    AFTER STATEMENT IS ',
'    BEGIN ',
'        FOR i IN 1 .. v_ids.COUNT LOOP ',
'            INSERT INTO vector_store (doc_id, embed_id, embed_data, embed_vector) ',
'            SELECT dt.id AS doc_id,  '))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'',
'                  et.embed_id,  ',
'                  et.embed_data,  ',
'                  to_vector(et.embed_vector) AS embed_vector ',
'            FROM my_books dt ',
'            -- CROSS JOIN TABLE( ',
'            --     dbms_vector_chain.utl_to_embeddings( ',
'            --         dbms_vector_chain.utl_to_chunks( ',
'            --             dbms_vector_chain.utl_to_text(dt.file_content),  ',
'            --             json(''{"by":"words","max":"300","split":"sentence","normalize":"all"}'') ',
'            --         ), ',
'            --         json(''{"provider":"database", "model":"tinybert_model"}'') ',
'            --     ) ',
'            -- )  t ',
'            --dbms_vector_chain.utl_to_chunks(dbms_vector_chain.utl_to_text(dt.data), json(''{"normalize":"all"}'')), ',
'            CROSS JOIN TABLE( ',
'                dbms_vector_chain.utl_to_embeddings( ',
'                    dbms_vector_chain.utl_to_chunks( ',
'                        dbms_vector_chain.utl_to_text(dt.file_content),  ',
'                        --json(''{"by":"words","max":"300","split":"sentence","normalize":"all"}'') ',
'                        json(''{"normalize":"all"}'') ',
'                    ), ',
'                    json(''{"provider":"database", "model":"doc_model"}'') ',
'                ) ',
'            )  t ',
'            CROSS JOIN JSON_TABLE( ',
'                t.column_value,  ',
'                ''$[*]'' COLUMNS ( ',
'                    embed_id NUMBER PATH ''$.embed_id'', ',
'                    embed_data VARCHAR2(4000) PATH ''$.embed_data'', ',
'                    embed_vector CLOB PATH ''$.embed_vector'' ',
'                ) ',
'            ) AS et ',
'            WHERE dt.id = v_ids(i); ',
'        END LOOP; ',
'    END AFTER STATEMENT; ',
' ',
'END trg_mybooks_vector_store_compound;',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'create or replace TYPE banktransfer_q_payload AS OBJECT ( message VARCHAR2(4000) )',
'/',
'create or replace TYPE orders_q_payload AS OBJECT ( message VARCHAR2(4000) ) ',
'/',
'create or replace TYPE passenger_q_payload AS OBJECT ( message VARCHAR2(4000) ) ',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE JSON RELATIONAL DUALITY VIEW "PIZZAORDERS_PIZZAORDERDETAILS_JDV"  AS ',
'  select json {',
'         --  Master table',
'         ''_id'' : po.id,',
'         ''customer_name''   : po.customer_name,',
'         ''customer_address'' : po.customer_address, ',
'         ''order_total'' : po.order_total, ',
'         ''delivery_charges'' : po.delivery_charges, ',
'         ''order_status'' : po.order_status, ',
'         ''pizza_order_details'' :',
'                [ ',
'                    --- detail table ',
'                    select json {',
'                        ''id'' : pod.id,  ',
'                        ''pizza_name''   : pod.pizza_name,',
'                        ''toppings'' : pod.toppings,',
'                        ''quantity'' : pod.quantity,',
'                        ''line_total'' : pod.line_total ',
'                        }',
'                        from pizza_order_details pod with insert update delete ',
'                        where  po.id = pod.pizza_order_id ',
'                    ]',
'          }',
'          -- allowed operations on this view',
'from pizza_order po with insert update delete;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE JSON RELATIONAL DUALITY VIEW "SHOP_ITEMS_DV"  AS ',
'  select json ',
'{',
'            ''_id'' : s.shop_id,',
'            ''shop_name''   : s.shop_name,',
'            ''location'' : s.location, ',
'            ''shop_items'' :',
'           [ ',
'                select json {',
'                		''item_no'' : si.item_no,',
'                		''item_name''   : si.item_name,',
'                		''quantity_available'' : si.quantity_available,',
'                		''unit_price'' : si.unit_price  ',
'        		}',
'        		from shop_items si with insert update delete ',
'        		where  si.shop_id = s.shop_id ',
'            ]',
'          }',
'from shops s with insert update delete;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE JSON RELATIONAL DUALITY VIEW "SHOP_ITEMS_DV2"  AS ',
'  select json {',
'             ''_id'' : s.shop_id,',
'             ''shop_name''   : s.shop_name,',
'             ''location'' : s.location, ',
'             ''shop_items'' :',
'           [ ',
'           select json {',
'        		''item_no'' : si.item_no,',
'        		''item_name''   : si.item_name,',
'        		''quantity_available'' : si.quantity_available,',
'        		''unit_price'' : si.unit_price',
'                -- we dont need foreign key shop_id to be part of this detail table shown here',
'                --''shop_id''  : si.shop_id',
'        		}',
'        		from shop_items si with insert update delete ',
'        		where  si.shop_id = s.shop_id ',
'            ]',
'          }',
'from shops s with insert update delete;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "DEVREL_MONTHLY_COUNT_DIFF" ("ID", "DEVREL_MAIN_ID", "CATEGORY", "ITEMDETAILS", "CURRENT_MONTH", "PREVIOUS_MONTH", "CURRENT_COUNT", "PREVIOUS_COUNT", "COUNT_DIFF") AS ',
'  SELECT ',
'  m1.ID, ',
'  m1.DEVREL_MAIN_ID DEVREL_MAIN_ID,',
'  (SELECT category  FROM DEVREL_MAIN WHERE DEVREL_MAIN.id = m1.DEVREL_MAIN_ID) AS category   ,',
'  (SELECT ItemDetails FROM DEVREL_MAIN WHERE DEVREL_MAIN.id = m1.DEVREL_MAIN_ID) AS ItemDetails  ,',
'  m1.METRICSDATE AS CURRENT_MONTH,',
'  m2.METRICSDATE AS PREVIOUS_MONTH,',
'  m1.ITEMVIEWS AS CURRENT_COUNT,',
'  m2.ITEMVIEWS AS PREVIOUS_COUNT,',
'  m1.ITEMVIEWS - m2.ITEMVIEWS AS COUNT_DIFF',
'FROM ',
'  DEVREL_MONTHLYMETRICS m1',
'  LEFT JOIN DEVREL_MONTHLYMETRICS m2 ',
'  ON TRUNC(ADD_MONTHS(m1.METRICSDATE, -1), ''MON'') = TRUNC(m2.METRICSDATE, ''MON'')',
'  ORDER BY ID;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "RETAIL_SHOPPING_FD_VIEW" ("ID", "INV_NO", "GENDER", "AGE", "CATEGORY", "TOTAL_PAY", "CUSTOMER_FULLNAME") AS ',
'  select p.ID,  ',
'       p.INV_NO, ',
'       p.GENDER, p.AGE, p.CATEGORY, p.TOTAL_PAY, p.CUSTOMER_FULLNAME',
'  from RETAIL_SHOPPING_FD p  ',
'  where rownum < 100;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "TRANSACTIONS_VIEW" ("ID", "TOTAL_PAY", "INV_NO", "CATEGORY", "CUST_ID", "CREDIT_CARD_NO", "TRANS_STATUS", "TRANSACTION_STATUS", "MERCHANT_ID", "MERCHANT_CITY", "MERCHANT_REGION", "MERCHANT_STATE", "MERCHANT'
||'_PLACE", "CUSTOMER_FULLNAME", "MERCHANT_FULLNAME", "LONGITUDE", "LATITUDE", "MALL") AS ',
'  select ID,',
'       TOTAL_PAY, ',
'       INV_NO,',
'       CATEGORY,',
'       CUST_ID,',
'       CREDIT_CARD_NO,',
'       TRANS_STATUS,',
'       TRANSACTION_STATUS,',
'       MERCHANT_ID,',
'       MERCHANT_CITY,',
'       MERCHANT_REGION,',
'       MERCHANT_STATE,',
'       MERCHANT_PLACE, ',
'       CUSTOMER_FULLNAME,',
'       MERCHANT_FULLNAME,',
'       LONGITUDE,',
'       LATITUDE,',
'       MALL',
'from "FD_TX_HISTORIC_DATA" a',
'union',
'select ID,',
'       TOTAL_PAY, ',
'       INV_NO,',
'       CATEGORY,',
'       CUST_ID,',
'       CREDIT_CARD_NO,',
'       TRANS_STATUS,',
'       TRANSACTION_STATUS,',
'       MERCHANT_ID,',
'       MERCHANT_CITY,',
'       MERCHANT_REGION,',
'       MERCHANT_STATE,',
'       MERCHANT_PLACE, ',
'       CUSTOMER_FULLNAME,',
'       MERCHANT_FULLNAME,',
'       LONGITUDE,',
'       LATITUDE,',
'       MALL',
'from "RETAIL_SHOPPING_FD" b;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "USER_QUEUE_SUBSCRIBERS_VIEW" ("QUEUE_NAME", "QUEUE_TABLE", "CONSUMER_NAME", "ADDRESS", "PROTOCOL", "TRANSFORMATION", "RULE", "DELIVERY_MODE", "NONDURABLE", "QUEUE_TO_QUEUE", "SUBSCRIBER_ID", "POS_BITMAP") A'
||'S ',
'  SELECT "QUEUE_NAME","QUEUE_TABLE","CONSUMER_NAME","ADDRESS","PROTOCOL","TRANSFORMATION","RULE","DELIVERY_MODE","NONDURABLE","QUEUE_TO_QUEUE","SUBSCRIBER_ID","POS_BITMAP" FROM USER_QUEUE_SUBSCRIBERS',
';',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE JSON RELATIONAL DUALITY VIEW "PIZZA_ORDERS_DV"  AS ',
'  select json ',
'{',
'         ''_id'' : po.ID,',
'         ''CUSTOMER_NAME'' : po.CUSTOMER_NAME,',
'         ''CUSTOMER_ADDRESS''   : po.CUSTOMER_ADDRESS,',
'         ''ORDER_STATUS'' : po.ORDER_STATUS, ',
'         ''PIZZA_ORDER_DETAILS'' :',
'            [ ',
'                select json {',
'                ''ID'' : pod.ID,  ',
'                --''PIZZA_ORDER_ID'' : pod.PIZZA_ORDER_ID,',
'                ''PIZZA_NAME'' : pod.PIZZA_NAME,',
'                ''TOPPINGS''   : pod.TOPPINGS,',
'                ''CRUST_TYPE'' : pod.CRUST_TYPE,',
'                ''QUANTITY'' : pod.QUANTITY,',
'                ''LINE_TOTAL''  : pod.LINE_TOTAL',
'		}',
'		from PIZZA_ORDER_DETAILS pod with insert update delete ',
'		where  po.ID = pod.PIZZA_ORDER_ID',
'    ]',
'}',
'from PIZZA_ORDER po with insert update delete;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "AQ$_FUNDSTRANSFER_QUEUE_TABLE_F" ("Q_NAME", "ROW_ID", "MSGID", "CORRID", "PRIORITY", "STATE", "DELAY", "EXPIRATION", "ENQ_TIME", "ENQ_TIME_UTC" INVISIBLE, "ENQ_UID", "ENQ_TID", "DEQ_TIME", "DEQ_UID", "DEQ_T'
||'ID", "RETRY_COUNT", "EXCEPTION_QSCHEMA", "EXCEPTION_QUEUE", "CSCN", "DSCN", "CHAIN_NO", "LOCAL_ORDER_NO", "TIME_MANAGER_INFO", "STEP_NO", "USER_DATA", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "DEQUEUE_MSGID", "DELIVERY_MODE", "SEQUENCE_NUM'
||'", "MSG_NUM", "QUEUE_ID", "USER_PROP") AS ',
'  SELECT  /*+ NO_MERGE (qo) USE_NL(qt) */ qt.q_name Q_NAME, qt.rowid ROW_ID, qt.msgid MSGID, qt.corrid CORRID, qt.priority PRIORITY, qt.state STATE, cast(FROM_TZ(qt.delay, ''00:00'') at time zone sessiontimezone as timestamp) DELAY, qt.expiration EXPIR'
||'ATION, cast(FROM_TZ(qt.enq_time, ''00:00'') at time zone sessiontimezone as timestamp) ENQ_TIME, qt.enq_time ENQ_TIME_UTC, qt.enq_uid ENQ_UID, qt.enq_tid ENQ_TID, cast(FROM_TZ(qt.deq_time, ''00:00'') at time zone sessiontimezone as timestamp) DEQ_TIME, q'
||'t.deq_uid DEQ_UID, qt.deq_tid DEQ_TID, qt.retry_count RETRY_COUNT, qt.exception_qschema EXCEPTION_QSCHEMA, qt.exception_queue EXCEPTION_QUEUE, qt.cscn CSCN, qt.dscn DSCN, qt.chain_no CHAIN_NO, qt.local_order_no LOCAL_ORDER_NO, cast(FROM_TZ(qt.time_ma'
||'nager_info, ''00:00'') at time zone sessiontimezone as timestamp)   TIME_MANAGER_INFO, qt.step_no STEP_NO, qt.user_data USER_DATA ,qt.sender_name SENDER_NAME, qt.sender_address SENDER_ADDRESS, qt.sender_protocol SENDER_PROTOCOL, qt.dequeue_msgid DEQUEU'
||'E_MSGID, ''PERSISTENT'' DELIVERY_MODE, 0 SEQUENCE_NUM, 0 MSG_NUM, qo.qid QUEUE_ID, qt.user_prop USER_PROP FROM "DOCUSER"."FUNDSTRANSFER_QUEUE_TABLE" qt, SYS.ALL_INT_DEQUEUE_QUEUES qo  WHERE qt.q_name = qo.name AND qo.owner = ''DOCUSER'' WITH READ ONLY;',
'',
'  CREATE OR REPLACE FORCE EDITIONABLE VIEW "AQ$FUNDSTRANSFER_QUEUE_TABLE" ("QUEUE", "MSG_ID", "CORR_ID", "MSG_PRIORITY", "MSG_STATE", "DELAY", "DELAY_TIMESTAMP", "EXPIRATION", "ENQ_TIME", "ENQ_TIMESTAMP", "ENQ_USER_ID", "ENQ_TXN_ID", "DEQ_TIME", "DEQ'
||'_TIMESTAMP", "DEQ_USER_ID", "DEQ_TXN_ID", "RETRY_COUNT", "EXCEPTION_QUEUE_OWNER", "EXCEPTION_QUEUE", "USER_DATA", "ORIGINAL_QUEUE_NAME", "ORIGINAL_QUEUE_OWNER", "EXPIRATION_REASON", "SENDER_NAME", "SENDER_ADDRESS", "SENDER_PROTOCOL", "ORIGINAL_MSGID"'
||') AS ',
'  SELECT q_name QUEUE, msgid MSG_ID, corrid CORR_ID, priority MSG_PRIORITY, decode(state, 0,   ''READY'',',
'                                1,   ''WAIT'',',
'                                2,   ''PROCESSED'',',
'                                3,   ''EXPIRED'',',
'                                10,  ''BUFFERED_EXPIRED'') MSG_STATE, cast(FROM_TZ(delay, ''00:00'')',
'                  at time zone sessiontimezone as date) DELAY, cast(FROM_TZ(delay, ''00:00'')',
'               at time zone sessiontimezone as timestamp) DELAY_TIMESTAMP, expiration, cast(FROM_TZ(enq_time, ''00:00'')',
'                  at time zone sessiontimezone as date) ENQ_TIME, cast(FROM_TZ(enq_time, ''00:00'')',
'                  at time zone sessiontimezone as timestamp) ',
'                  ENQ_TIMESTAMP, enq_uid ENQ_USER_ID, enq_tid ENQ_TXN_ID, cast(FROM_TZ(deq_time, ''00:00'')',
'                  at time zone sessiontimezone as date) DEQ_TIME, cast(FROM_TZ(deq_time, ''00:00'')',
'                  at time zone sessiontimezone as timestamp) ',
'                  DEQ_TIMESTAMP, deq_uid DEQ_USER_ID, deq_tid DEQ_TXN_ID, retry_count,  decode (state, 0, exception_qschema, ',
'                                  1, exception_qschema, ',
'                                  2, exception_qschema,  ',
'                                  NULL) EXCEPTION_QUEUE_OWNER,  decode (state, 0, exception_queue, ',
'                                  1, exception_queue, ',
'                                  2, exception_queue,  ',
'                                  NULL) EXCEPTION_QUEUE,  user_data,  decode (state, 3, ',
'                     decode (deq_tid, ''INVALID_TRANSACTION'', NULL, ',
'                             exception_queue), NULL)',
'                                ORIGINAL_QUEUE_NAME,  decode (state, 3, ',
'                     decode (deq_tid, ''INVALID_TRANSACTION'', NULL, ',
'                             exception_qschema), NULL)',
'                                ORIGINAL_QUEUE_OWNER,  decode(state, 3, ',
'                     decode(deq_time, NULL, ',
'                       decode(deq_tid, NULL,',
'                       decode (expiration , NULL , ''MAX_RETRY_EXCEEDED'',',
'                            ''TIME_EXPIRATION''),',
'                              ''INVALID_TRANSACTION'', NULL,',
'                              ''MAX_RETRY_EXCEEDED''), NULL), NULL) ',
'                             EXPIRATION_REASON , sender_name SENDER_NAME, sender_address SENDER_ADDRESS, sender_protocol SENDER_PROTOCOL, dequeue_msgid ORIGINAL_MSGID  FROM "FUNDSTRANSFER_QUEUE_TABLE" WHERE state != 7 AND   state != 9 WITH READ ONLY;',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'create or replace PACKAGE BODY ANOMALYDETECT_AI_PK  ',
'IS ',
' ',
'PROCEDURE initialize (v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE) AS',
'-- -----------------------------------------------------------------',
'        BEGIN',
'          SELECT GC_OCI_OBJ_STORE_BASE_URL,',
'                 GC_OCI_DOC_AI_URL,',
'                 GC_OCI_DOC_AI_TIMEOUT_SECS,',
'                 GC_WC_CREDENTIAL_ID,',
'                 GC_OCI_REQ_AI_PAYLOAD',
'          INTO   v_GC_OCI_OBJ_STORE_BASE_URL,',
'                 v_GC_OCI_DOC_AI_URL,',
'                 v_GC_OCI_DOC_AI_TIMEOUT_SECS,',
'                 v_GC_WC_CREDENTIAL_ID,',
'                 v_GC_OCI_REQ_AI_PAYLOAD',
'          FROM   MACHINE_LEARNING_CONFIGS WHERE ID = v_id;',
'        END initialize;',
' ',
'-------------------------------------------------------------------------------- ',
'--------------------------------------------------------------------------------',
'PROCEDURE put_file ',
' (p_mime_type         IN VARCHAR2, ',
'  p_file_blob         IN BLOB, ',
'  p_file_name         IN VARCHAR2, ',
'  x_object_store_url OUT VARCHAR2) IS  ',
'  l_response            CLOB; ',
' ',
'BEGIN ',
'  ',
'  x_object_store_url := ANOMALYDETECT_AI_PK.v_GC_OCI_OBJ_STORE_BASE_URL || p_file_name;  ',
' ',
'  -- Set Mime Type of the file in the Request Header. ',
'  apex_web_service.g_request_headers.DELETE; ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type''; ',
'  apex_web_service.g_request_headers(1).value := p_mime_type; ',
' ',
'  -- Call Web Service to PUT file in OCI. ',
'  l_response := apex_web_service.make_rest_request ',
'   (p_url                  => UTL_URL.ESCAPE(x_object_store_url), ',
'    p_http_method          => ''PUT'', ',
'    p_body_blob            => p_file_blob,  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
' ',
'  IF apex_web_service.g_status_code != 200 then ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.''); ',
'  END IF; ',
' ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END put_file; ',
' ',
'--------------------------------------------------------------------------------  ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE upload_file ',
'  (p_apex_file_name    IN VARCHAR2, ',
'   x_file_name        OUT VARCHAR2, ',
'   x_object_store_url OUT VARCHAR2, ',
'   x_document_id      OUT cndemo_document_ai_docs.document_id%TYPE) IS ',
' ',
'  CURSOR cr_file_info IS ',
'    SELECT filename ',
'    ,      blob_content ',
'    ,      mime_type ',
'    FROM   apex_application_temp_files ',
'    WHERE  name = p_apex_file_name; ',
' ',
'  lr_file_info          cr_file_info%ROWTYPE; ',
' ',
'BEGIN ',
' ',
'  -- Get the File BLOB Content and File Name uploaded from APEX. ',
'  OPEN  cr_file_info; ',
'  FETCH cr_file_info INTO lr_file_info; ',
'  CLOSE cr_file_info; ',
'   ',
'  x_file_name := lr_file_info.filename; ',
'   ',
'  -- Post file to OCI Object Store. ',
'  put_file ',
'   (p_mime_type        => lr_file_info.mime_type, ',
'    p_file_blob        => lr_file_info.blob_content, ',
'    p_file_name        => lr_file_info.filename, ',
'    x_object_store_url => x_object_store_url); ',
' ',
'  -- Create Document Record ',
'  INSERT INTO cndemo_document_ai_docs (file_name, mime_type, object_store_url) ',
'  VALUES (lr_file_info.filename, lr_file_info.mime_type, x_object_store_url)  ',
'  RETURNING document_id INTO x_document_id; ',
' ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END upload_file; ',
' ',
'-------------------------------------------------------------------------------- ',
'-------------------------------------------------------------------------------- ',
'-- PROCEDURE document_ai ',
'PROCEDURE anomaly_ai ',
'  (p_file_name   IN VARCHAR2, ',
'   p_document_id IN cndemo_document_ai_docs.document_id%TYPE) IS ',
'  ',
'    CURSOR cr_document_data (cp_json IN CLOB) IS ',
'    SELECT jt.* ',
'    FROM   JSON_TABLE(cp_json, ''$'' ',
'             COLUMNS (AISPEECHTRANS_JOBID      VARCHAR2(1000)        PATH ''$.id'', ',
'                      AISPEECH_PREFIX          VARCHAR2(1000)        PATH ''$.outputLocation.prefix''  )) jt; ',
'  --/*',
'  CURSOR cr_document_fields (cp_json IN CLOB) IS ',
'    SELECT jt.* ',
'    FROM   JSON_TABLE(cp_json, ''$.pages[*]'' ',
'             COLUMNS (page_number       NUMBER        PATH ''$.pageNumber'', ',
'                      NESTED PATH ''$.documentFields[*]'' COLUMNS ',
'                       (field_type_code VARCHAR2(50)   PATH ''$.fieldType'', ',
'                        field_label     VARCHAR2(100)  PATH ''$.fieldLabel.name'', ',
'                        label_score     NUMBER         PATH ''$.fieldLabel.confidence'', ',
'                        field_value     VARCHAR2(1000) PATH ''$.fieldValue.value'' ',
'                        ))) jt ',
'    WHERE  jt.field_type_code = ''KEY_VALUE''; ',
'    --*/',
' ',
'  l_request_json        VARCHAR2(32000); ',
'  l_response_json       CLOB; ',
'  lr_document_data      cr_document_data%ROWTYPE; ',
' ',
'BEGIN ',
' ',
'  -- Replace the uploaded filename in the JSON payload to be sent to Document AI. ',
'  l_request_json := REPLACE(v_GC_OCI_REQ_AI_PAYLOAD, ''#FILE_NAME#'', p_file_name);',
'   ',
'  -- Set Content-Type in the Request Header. This is required by the Document AI REST Service. ',
'  apex_web_service.g_request_headers.DELETE; ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type''; ',
'  apex_web_service.g_request_headers(1).value := ''application/json''; ',
' ',
'  -- Call the Document AI analyzeDocument REST Web Service. ',
'  --v_GC_OCI_OBJ_STORE_BASE_URL',
'  l_response_json := apex_web_service.make_rest_request ',
'   (p_url                  => v_GC_OCI_DOC_AI_URL, ',
'    p_http_method          => ''POST'', ',
'    p_body                 => l_request_json, ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
' ',
'  IF apex_web_service.g_status_code != 200 then ',
'    raise_application_error(-20112,''Unable to call OCI Document AI.''); ',
'  END IF; ',
' ',
'  -- Get Document Level Data from the JSON response. ',
'  OPEN  cr_document_data (cp_json => l_response_json); ',
'  FETCH cr_document_data INTO lr_document_data; ',
'  CLOSE cr_document_data; ',
' ',
'  -- Get Key Value Fields from JSON and populate table. ',
'  FOR r_field IN cr_document_fields (cp_json => l_response_json) LOOP ',
'    INSERT INTO cndemo_document_ai_fields (document_id,field_type_code,field_label,label_score,field_value) ',
'    VALUES (p_document_id,r_field.field_type_code,r_field.field_label,r_field.label_score,r_field.field_value); ',
'  END LOOP; ',
'     ',
'  UPDATE cndemo_document_ai_docs ',
'  SET    doc_ai_json         = l_response_json ',
'  ,      AISPEECHTRANS_JOBID       = lr_document_data.AISPEECHTRANS_JOBID ',
'  ,      AISPEECH_PREFIX      = lr_document_data.AISPEECH_PREFIX  ',
'  WHERE  document_id         = p_document_id; ',
' ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END anomaly_ai; ',
' ',
'-------------------------------------------------------------------------------- ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE process_file ',
'  (p_apex_file_name  IN VARCHAR2, ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE,',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE) IS ',
' ',
'  l_object_store_url    VARCHAR2(1000); ',
'  l_file_name           VARCHAR2(100); ',
' ',
'BEGIN ',
'  initialize(v_id);',
' ',
'  -- Get file and upload to OCI Object Storage. ',
'  upload_file ',
'   (p_apex_file_name   => p_apex_file_name,  ',
'    x_file_name        => l_file_name, ',
'    x_object_store_url => l_object_store_url, ',
'    x_document_id      => x_document_id); ',
'  ',
'  -- Call anomaly_ai AI ',
'  anomaly_ai ',
'  (p_file_name   => l_file_name, ',
'    p_document_id => x_document_id); ',
' ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END process_file; ',
' ',
'-------------------------------------------------------------------------------- ',
'-------------------------------------------------------------------------------- ',
'FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB IS ',
' ',
'  l_file_blob           BLOB; ',
' ',
'BEGIN ',
' ',
'  -- Call OCI Web Service to get the requested file. ',
'  l_file_blob := apex_web_service.make_rest_request_b ',
'   (p_url                  => UTL_URL.ESCAPE(p_request_url), ',
'    p_http_method          => ''GET'', ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
' ',
'  IF apex_web_service.g_status_code != 200 then ',
'    raise_application_error(-20112,''Unable to Get File.''); ',
'  END IF; ',
'   ',
'  RETURN l_file_blob; ',
'   ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END get_file; ',
' ',
'-------------------------------------------------------------------------------- ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE render_document ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE) IS ',
' ',
'  CURSOR cr_document IS ',
'    SELECT mime_type ',
'    ,      object_store_url ',
'    FROM   cndemo_document_ai_docs ',
'    WHERE  document_id = x_document_id; ',
' ',
'  lr_document           cr_document%ROWTYPE; ',
'  l_file_blob           BLOB; ',
' ',
'BEGIN ',
' ',
'  -- Get the OCI URL and Mimetytpe of the receipt file. ',
'  OPEN  cr_document; ',
'  FETCH cr_document INTO lr_document; ',
'  CLOSE cr_document; ',
' ',
'  -- Get the file BLOB from OCI Object Storage. ',
'  l_file_blob := get_file (p_request_url => lr_document.object_store_url); ',
' ',
'  -- Output the file so it shows in APEX. ',
'  owa_util.mime_header(lr_document.mime_type,false); ',
'  htp.p(''Content-Length: '' || dbms_lob.getlength(l_file_blob));  ',
'  owa_util.http_header_close;   ',
'  wpg_docload.download_file(l_file_blob); ',
' ',
'EXCEPTION WHEN OTHERS THEN ',
'  RAISE; ',
'END render_document; ',
' ',
'   ',
'END;',
'/',
'create or replace PACKAGE BODY "BANK_PKG" as ',
'    c_app_id       constant varchar2(6) := ''APP_ID'';',
'',
'',
'     -- Update application status  ',
'    function update_application_status(',
'                cust_id in varchar2,  ',
'                status in varchar2)',
'                return varchar2',
'    is ',
'        l_ret varchar2(100) := ''TRUE'';  ',
'        l_current_user varchar2(200) := apex_application.g_user; ',
'        l_email varchar2(128);',
'    begin         ',
'        -- since the income is less than 1000 by business rules they come under default rejection rule',
'        UPDATE BANK_CUSTOMERS SET ACCOUNT_STATUS = status WHERE ID = cust_id;',
'',
'        -- if the application status is approved then change the role from user to bank customer',
'        -- Bank Customers will be in Role 2',
'        if status = ''Approved'' then',
'            SELECT EMAIL INTO l_email FROM BANK_CUSTOMERS WHERE ID = cust_id;',
'            UPDATE COMMON_USERS SET ROLE_ID = 2 WHERE EMAIL = l_email;',
'        end if;',
'         ',
'',
'        return l_ret; ',
'    end update_application_status; ',
'',
'',
'    -- Update card status  ',
'     function update_card_status(',
'                cc_no in varchar2,  ',
'                status in varchar2,',
'                comments in varchar2)',
'                return varchar2',
'    is ',
'        l_ret varchar2(100) := ''TRUE'';  ',
'        --l_current_user varchar2(200) := apex_application.g_user; ',
'    begin         ',
'        -- since the income is less than 1000 by business rules they come under default rejection rule',
'        UPDATE cc_fd SET status = status, comments = comments WHERE cc_no = cc_no;',
'        return l_ret; ',
'    end update_card_status; ',
'      ',
'end;',
'/',
'create or replace package body COM_COMMON_AUTH_PKG  ',
'as  ',
' ',
' ',
'c_website    constant varchar2(100) := ''my site'';  ',
'c_hostname   constant varchar2(100) := ''apex.oracle.com/pls/apex/'';  ',
' ',
'/**  Log in the application   ',
' */  ',
'function custom_authenticate  ',
'  (  ',
'    p_username in varchar2,  ',
'    p_password in varchar2  ',
'  )  ',
'  return boolean  ',
'is  ',
'  l_password        varchar2(100) ;  ',
'  l_stored_password varchar2(100) ;  ',
'  l_boolean         boolean;  ',
'begin  ',
'  -- First, check to see if the user is in the user table and look up their password  ',
'  select password  ',
'    into l_stored_password  ',
'    from common_users  ',
'   where upper(email) = upper(p_username);  ',
'  -- hash the password the person entered  ',
'   select standard_hash(p_password, ''MD5'') into l_password from dual; ',
'   -- select standard_hash(''Welcome1234'', ''MD5'') as pwd from dual; ',
'   -- FB93144A6A2839461D86974D5CE69D8A for Welcome1234',
'  -- Finally, we compare them to see if they are the same and return either TRUE or FALSE  ',
' if l_password = l_stored_password then  ',
'    return true;  ',
'  else  ',
'    return false;  ',
'  end if;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end custom_authenticate;   ',
' ',
' ',
'/**  Register  ',
'*/  ',
'procedure create_account(  ',
'    p_email    in varchar2,  ',
'    p_password in varchar2,',
'    p_answer in varchar2)  ',
'is  ',
'  l_message varchar2(4000) ;  ',
'  l_password raw(64) ;  ',
'  l_user_id number;  ',
'  l_url  varchar2(1000) ;  ',
'begin  ',
'  apex_debug.message(p_message => ''Begin create_site_account'', p_level => 3);  ',
'  ',
' -- l_password := utl_raw.cast_to_raw(DBMS_RANDOM.string(''x'',10));  ',
' select standard_hash(p_password, ''MD5'') into l_password from dual; ',
'  ',
'  apex_debug.message(p_message => ''verify email exists'', p_level => 3) ;  ',
'  ',
'  begin  ',
'    select password  ',
'      into l_password  ',
'      from common_users  ',
'     where upper(email) = upper(p_email) ;  ',
'    l_message       := l_message || ''Email address or User Id already registered.'';  ',
'  ',
'  exception  ',
'  when no_data_found then  ',
'    apex_debug.message(p_message => ''email doesn''''t exist yet - good to go'', p_level => 3) ;  ',
'  end;  ',
'  ',
'  if l_message is null then  ',
'    apex_debug.message(p_message => ''password ok'', p_level => 3) ;  ',
'   ',
'    apex_debug.message(p_message => ''insert record'', p_level => 3) ;  ',
'    /* insert return user_id *****/  ',
'    /* role 4 means common user, 2 means bank customer */',
'    insert into common_users (email,   password,   role_id, answer)  ',
'                      values (p_email, l_password, 2,     p_answer)   ',
'    returning USER_ID into l_user_id;  ',
'    ',
'    -- create refer url    ',
'    l_url := c_hostname||''f?p=''||v(''APP_ID'')||'':9999:0::::p9999_refer_user_id:'' || l_user_id ; ',
'     ',
'    apex_debug.message(p_message => ''update record'', p_level => 3) ;  ',
'     ',
'    update common_users ',
'    set refer_url=l_url ',
'    where user_id=l_user_id; ',
' ',
'  else  ',
'    raise_application_error( -20001, l_message) ;  ',
'  end if;  ',
'    ',
' ',
'  ',
'  apex_debug.message(p_message => ''End create_site_account'', p_level => 3) ;  ',
'end create_account;  ',
'  ',
'/**  ',
'*/  ',
'procedure post_authenticate(  ',
'    p_username in varchar2,  ',
'    out_user_id out number,  ',
'    out_time_zone out varchar2  ',
')  ',
'is  ',
'  l_id         number;  ',
'  l_first_name varchar2(100) ;  ',
'begin  ',
'  select USER_ID  ',
'    into l_id  ',
'    from common_users  ',
'   where upper(email)    = upper(p_username);  ',
'  out_user_id        := l_id;  ',
'  ',
'end post_authenticate;  ',
'  ',
'  ',
'/**  ',
'*/  ',
'procedure request_reset_password(  ',
'    p_email in varchar2)  ',
'is  ',
'  l_id                number;  ',
'  l_verification_code varchar2(100);  ',
'  l_url               varchar2(200);  ',
'begin  ',
'  -- First, check to see if the user is in the user table  ',
'  select USER_ID  ',
'    into l_id  ',
'    from common_users  ',
'   where upper(email)    = upper(p_email);  ',
'  ',
'  dbms_random.initialize(to_char(sysdate, ''YYMMDDDSS'')) ;  ',
'  l_verification_code := dbms_random.string(''A'', 20);  ',
'  ',
'  l_url := apex_util.prepare_url(p_url => c_hostname||''f?p=''||v(''APP_ID'')||'':31:0::::P31_USER_ID,P31_VC:'' || l_id || '','' || l_verification_code, p_checksum_type => 1);  ',
'    ',
'  update common_users  ',
'    set verification_code = ''RESET_'' || l_verification_code  ',
'  where user_id = l_id;  ',
'  ',
'  mail_reset_password(p_email => p_email, p_url => l_url);  ',
'  ',
'exception  ',
'when no_data_found then  ',
'  raise_application_error( - 20001, ''Email address not registered.'') ;  ',
'end request_reset_password ;  ',
'',
' ----------------- New module forgot password -----------------------',
'function forgot_password(',
'    p_email IN VARCHAR2,',
'    p_answer IN VARCHAR2)',
'RETURN VARCHAR2',
'IS',
'    l_ret_msg VARCHAR2(400);  -- added size to the variable',
'    l_id number:= 0;',
'    l_exists NUMBER;',
'    l_random_password VARCHAR2(10);',
'    l_chars VARCHAR2(62) := ''ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'';',
'    l_hashed_password varchar2(100) ; ',
'BEGIN',
'    l_ret_msg := '' ''; ',
'    ',
'    SELECT CASE',
'           WHEN EXISTS ( SELECT USER_ID FROM common_users WHERE upper(email) = upper(p_email) AND upper(answer) = upper(p_answer) ) THEN 1',
'           ELSE 0',
'         END',
'   INTO l_exists',
'   FROM DUAL;',
'',
'   IF l_exists = 1 THEN',
'        FOR i IN 1..10 LOOP',
'         l_random_password := l_random_password || SUBSTR(l_chars, DBMS_RANDOM.VALUE(1, LENGTH(l_chars)), 1);',
'      END LOOP;',
'    '))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'  --- lets make hash of this password',
'      select standard_hash(l_random_password, ''MD5'') into l_hashed_password from dual; ',
'      -- update password in DB',
'      update common_users   set password = l_hashed_password where upper(email) = upper(p_email); ',
'',
'      l_ret_msg := ''Your new password is ''||l_random_password||'' please login and change your password'';',
'',
'    DBMS_OUTPUT.PUT_LINE(''Record exists l_random_password ''||l_random_password);',
'',
'  ELSE',
'    DBMS_OUTPUT.PUT_LINE(''Record does not exist'');',
'    l_ret_msg :=  ''Sorry, We are unable to find your profile, please create a new login profile from the login page '';',
'    --or your answer does not match our records',
'  END IF;',
'',
'    ',
'return l_ret_msg;',
'END forgot_password;',
' ',
'   ----------------- New module forgot password -----------------------',
'  ',
' /**  ',
'* Reset password email  ',
'*/  ',
'procedure mail_reset_password(  ',
'  p_email    in varchar2,  ',
'  p_url      in varchar2)  ',
'',
'is  ',
'  l_body     clob;    ',
'begin  ',
'  apex_debug.message(p_message => ''Reset password demo account'', p_level => 3) ;    ',
'  l_body := ''<p>Hi,</p>  ',
'             <p>We received a request to reset your password in the training app.</p>  ',
'             <p><a href="''||p_url||''">Reset Now.</a></p>  ',
'             <p>If you did not request this, you can simply ignore this email.</p>  ',
'             <p>Kind regards,<br/>  ',
'             The Training Team</p>'';   ',
'  ',
'  apex_mail.push_queue;      ',
'  ',
'exception  ',
'when others   ',
'then  ',
'  raise_application_error( - 20002, ''Issue sending reset password email.'') ;  ',
'end mail_reset_password;  ',
' ',
' ',
'/** Reset Password ',
'Hard Reset :  select standard_hash(''Welcome123456#'', ''MD5'') as pwd from dual; ',
'*/  ',
'procedure reset_password(  ',
'    p_id       in number,  ',
'    p_password in varchar2)  ',
'is  ',
'  l_username        varchar2(100) ;  ',
'  l_hashed_password varchar2(100) ;  ',
'begin  ',
'  select email  ',
'    into l_username  ',
'    from common_users  ',
'   where USER_ID = p_id;  ',
'  ',
'  select standard_hash(p_password, ''MD5'') into l_hashed_password from dual; ',
'  ',
'  update common_users  ',
'    set password = l_hashed_password,  ',
'        verification_code = null  ',
'  where USER_ID = p_id;  ',
'end reset_password;  ',
' ',
'/** Check the verification code ',
'*/  ',
'function verify_reset_password(  ',
'    p_id in number,  ',
'    p_verification_code in varchar2)  ',
'  return number  ',
'is  ',
'  l_id number;  ',
'begin  ',
'  begin ',
'  select u.USER_ID  ',
'    into l_id  ',
'    from common_users u  ',
'   where u.verification_code = ''RESET_''||p_verification_code  ',
'     and u.USER_ID = p_id;  ',
'  ',
'  return l_id;  ',
'exception  ',
'  when no_data_found  ',
'  then  ',
'    raise_application_error( - 20001, ''Invalid password request url.'') ;  ',
'    l_id:=0; ',
'    return 0;  ',
' end; ',
' return  l_id; ',
'end verify_reset_password ;  ',
'   ',
'  ',
'/** check the user is the administrator ',
'*/  ',
'function authz_administrator(  ',
'    p_username in varchar2)  ',
'  return boolean  ',
'is  ',
'  l_is_admin varchar2(1) ;  ',
'begin  ',
'  select ''Y''  ',
'    into l_is_admin  ',
'    from common_users a  ',
'   where upper(a.email) = upper(p_username)  ',
'     and a.role_id = 1;  ',
'  --  ',
'  return true;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end authz_administrator;  ',
'  ',
'  ',
'/** check the username is the account username ',
'*/  ',
'function authz_user(  ',
'    p_username in varchar2)  ',
'  return boolean  ',
'is  ',
'  l_is_user varchar2(1) ;  ',
'begin  ',
'  select ''Y''  ',
'    into l_is_user  ',
'    from common_users a  ',
'   where upper(a.email) = upper(p_username)  ',
'     and a.role_id in (1,2);  ',
'  --  ',
'  return true;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end authz_user;  ',
'  ',
'end COM_COMMON_AUTH_PKG;',
'/',
'create or replace PACKAGE BODY DBMS_GVT IS',
'  M_VCSIZ_4K  CONSTANT PLS_INTEGER := 4000;',
'  M_VCSIZ_32K CONSTANT PLS_INTEGER := 32672;',
' -----------------------------------------------------------------------------',
' -- VERTEX_LATERAL_STRING - prepare vertex query string in LATERAL()',
' -----------------------------------------------------------------------------',
'  FUNCTION PROPERTIES_LATERAL_STRING (',
'    DB_TABLE_NAME_LIST SYS.ODCIVARCHAR2LIST,',
'    DB_OBJECT_OWNER_LIST SYS.ODCIVARCHAR2LIST,',
'    GRAPH_VIZ_TABLE_NAME IN VARCHAR2,',
'    VERTEX_ID_COL_NAME IN VARCHAR2,',
'    GRAPHNAME IN VARCHAR2,',
'    GRAPHOWNER IN VARCHAR2,',
'    ELEMENT_TYPE IN VARCHAR2',
'  ) RETURN VARCHAR2 IS',
' /*',
'    This function is to prepare query string for property names. This query string will be in LATERAL():',
'    SELECT',
'                JSON_OBJECT(''SAL'' VALUE X.SAL,',
'                ''AGE'' VALUE X.AGE ABSENT',
'                ON NULL) AS PROPERTIES',
'            FROM',
'                HR.VERTEX_3 X',
'            WHERE',
'                JSON_VALUE(VT.COLUMN_VALUE,',
'                ''$.ELEM_TABLE'') = ''VERTEX_3''',
'                AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE,',
'                ''$.KEY_VALUE.V_ID'') UNION',
'                SELECT',
'                    JSON_OBJECT(''AGE'' VALUE X.AGE,',
'                    ''SAL'' VALUE X.SAL ABSENT',
'                    ON NULL) AS PROPERTIES',
'                FROM',
'                    HR.VERTEX_1 X',
'                WHERE',
'                    JSON_VALUE(VT.COLUMN_VALUE,',
'                    ''$.ELEM_TABLE'') = ''VERTEX_1''',
'                    AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE,',
'                    ''$.KEY_VALUE.V_ID'') UNION',
'                    SELECT',
'                        JSON_OBJECT(''AGE'' VALUE X.AGE ABSENT',
'                        ON NULL) AS PROPERTIES',
'                    FROM',
'                        HR.VERTEX_2 X',
'                    WHERE',
'                        JSON_VALUE(VT.COLUMN_VALUE,',
'                        ''$.ELEM_TABLE'') = ''VERTEX_2''',
'                        AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE,',
'                        ''$.KEY_VALUE.V_ID'')',
'  */',
'    LATERAL_QUERY_STRING               CLOB := '''';',
'    IDX1                               INT;',
'    IDX2                               INT;',
'    IDX3                               INT;',
'    IDX4                               INT;',
'    IDX5                               INT;',
'    COLUMN_NAMES                       SYS.ODCIVARCHAR2LIST;',
'    OBJECT_NAMES                       SYS.ODCIVARCHAR2LIST;',
'    PROPERTY_NAMES                     SYS.ODCIVARCHAR2LIST;',
'    TYPE STRING_LIST_TYPE IS',
'      TABLE OF VARCHAR2(M_VCSIZ_4K) INDEX BY PLS_INTEGER;',
'    TYPE VARCHARLIST_TABLE IS',
'      TABLE OF STRING_LIST_TYPE INDEX BY VARCHAR2(M_VCSIZ_4K);',
'    TYPE STRING_INDEX_BY_STRING IS',
'      TABLE OF VARCHAR2(M_VCSIZ_4K) INDEX BY VARCHAR(M_VCSIZ_4K);',
'    TYPE STRING_TO_MAP_TYPE IS',
'      TABLE OF STRING_INDEX_BY_STRING INDEX BY VARCHAR(M_VCSIZ_4K);',
'    DB_TABLE_COLUMN_NAME               VARCHARLIST_TABLE; --map structure',
'    DB_TABLE_PROPERTY_NAME             VARCHARLIST_TABLE; --map structure',
'    OBJECT_TO_KEY_LIST_TABLE           VARCHARLIST_TABLE; --map structure',
'    SELECTED_COL_STRING                VARCHAR2(M_VCSIZ_4K);',
'    COLUMN_EXPRESSION                  VARCHAR2(M_VCSIZ_4K);',
'    COLUMN_NAME                        VARCHAR2(M_VCSIZ_4K);',
'    PROPERTY_NAME                      VARCHAR2(M_VCSIZ_4K);',
'    ELEMENTNAMES                       SYS.ODCIVARCHAR2LIST;',
'    ELEMENTNAME                        VARCHAR2(M_VCSIZ_4K);',
'    KEY_LIST                           SYS.ODCIVARCHAR2LIST;',
'    JSON_CONDITION_STRING              VARCHAR2(M_VCSIZ_4K);',
'    ALL_QUERY_STRING                   CLOB := '''';',
'    COLUMN_EXPRESSIONS                 SYS.ODCIVARCHAR2LIST;',
'    COLUMN_EXPRESSION_LIST             VARCHARLIST_TABLE;',
'    DATA_TYPES                         SYS.ODCIVARCHAR2LIST;',
'    P1                                 INT;',
'    COLUMN_NAMES_FOR_EACH_OBJECT       STRING_LIST_TYPE;',
'    PROPERTY_NAMES_FOR_EACH_OBJECT     STRING_LIST_TYPE;',
'    COLUMN_EXPRESSIONS_FOR_EACH_OBJECT STRING_LIST_TYPE;',
'    KEY_LIST_FOR_EACH_OBJECT           STRING_LIST_TYPE;',
'    OBJECT_TO_ELEMENT_MAP              STRING_INDEX_BY_STRING; --map structure',
'    OBJECT_COL_DATA_TYPE_MAP           STRING_TO_MAP_TYPE;',
'    COL_TO_DATA_TYPE                   STRING_INDEX_BY_STRING;',
'  BEGIN',
' -- To prepare this string, we need to know all the underlying tables and the column name (column expression if any) for all the properties for the quried graph vertices',
' -- get all object table name, property name and column expression for all the vertices of the quired graph owner and graph name, ordered by the table name',
'    SELECT',
'      OBJECT_NAME,',
'      LABEL_PROPERTIES.PROPERTY_NAME,',
'      COLUMN_NAME,',
'      PROP_DEFINITIONS.COLUMN_EXPR BULK COLLECT INTO OBJECT_NAMES,',
'      PROPERTY_NAMES,',
'      COLUMN_NAMES,',
'      COLUMN_EXPRESSIONS',
'    FROM',
'      SYS.ALL_PG_ELEMENTS ELEMENTS',
'      INNER JOIN SYS.ALL_PG_ELEMENT_LABELS ELEM_LABELS',
'      ON (ELEMENTS.ELEMENT_NAME = ELEM_LABELS.ELEMENT_NAME',
'      AND ELEMENTS.OWNER = ELEM_LABELS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = ELEM_LABELS.GRAPH_NAME)',
'      INNER JOIN SYS.ALL_PG_LABEL_PROPERTIES LABEL_PROPERTIES',
'      ON (ELEM_LABELS.LABEL_NAME = LABEL_PROPERTIES.LABEL_NAME',
'      AND ELEM_LABELS.OWNER = LABEL_PROPERTIES.OWNER',
'      AND ELEM_LABELS.GRAPH_NAME = LABEL_PROPERTIES.GRAPH_NAME)',
'      INNER JOIN SYS.ALL_PG_PROP_DEFINITIONS PROP_DEFINITIONS',
'      ON (PROP_DEFINITIONS.PROPERTY_NAME = LABEL_PROPERTIES.PROPERTY_NAME',
'      AND PROP_DEFINITIONS.ELEMENT_NAME = ELEMENTS.ELEMENT_NAME',
'      AND PROP_DEFINITIONS.OWNER = ELEMENTS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = PROP_DEFINITIONS.GRAPH_NAME)',
'    WHERE',
'      ELEMENTS.ELEMENT_KIND = ELEMENT_TYPE',
'      AND ELEMENTS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'    ORDER BY',
'      OBJECT_NAME,',
'      LABEL_PROPERTIES.PROPERTY_NAME;',
'    IF DB_TABLE_NAME_LIST.COUNT = 0 THEN',
'      RETURN ''SELECT NULL AS PROPERTIES FROM SYS.DUAL'';',
'    END IF;',
' /*',
'    db_table_property_name(map, indexed by underlyting db table name/object name) -> In each entry, the value is property_names_for_each_object(array)',
'    column_expression_list(map, indexed by underlyting db table name/object name) -> In each entry, the value is column_names_for_each_object(array)',
'    */',
'    FOR IDX1 IN 1..OBJECT_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        COLUMN_NAMES_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'        PROPERTY_NAMES_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'        P1 := 1;',
'        COLUMN_NAMES_FOR_EACH_OBJECT(P1) := COLUMN_NAMES(IDX1);',
'        PROPERTY_NAMES_FOR_EACH_OBJECT(P1) := PROPERTY_NAMES(IDX1);',
'        COLUMN_EXPRESSIONS_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'        COLUMN_EXPRESSIONS_FOR_EACH_OBJECT(P1) := COLUMN_EXPRESSIONS(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF OBJECT_NAMES(IDX1) = OBJECT_NAMES(IDX1 - 1) THEN',
'          IF PROPERTY_NAMES(IDX1) != PROPERTY_NAMES(IDX1-1) THEN',
'            COLUMN_NAMES_FOR_EACH_OBJECT(P1) := COLUMN_NAMES(IDX1);',
'            PROPERTY_NAMES_FOR_EACH_OBJECT(P1) := PROPERTY_NAMES(IDX1);',
'            COLUMN_EXPRESSIONS_FOR_EACH_OBJECT(P1) := COLUMN_EXPRESSIONS(IDX1);',
'            P1 := P1 + 1;',
'          END IF;',
'        ELSE',
'          DB_TABLE_COLUMN_NAME(OBJECT_NAMES(IDX1 - 1)) := COLUMN_NAMES_FOR_EACH_OBJECT;',
'          DB_TABLE_PROPERTY_NAME(OBJECT_NAMES(IDX1 - 1)) := PROPERTY_NAMES_FOR_EACH_OBJECT;',
'          COLUMN_EXPRESSION_LIST(OBJECT_NAMES(IDX1 - 1)) := COLUMN_EXPRESSIONS_FOR_EACH_OBJECT;',
'          COLUMN_NAMES_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'          PROPERTY_NAMES_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'          P1 := 1;',
'          COLUMN_NAMES_FOR_EACH_OBJECT(P1) := COLUMN_NAMES(IDX1);',
'          PROPERTY_NAMES_FOR_EACH_OBJECT(P1) := PROPERTY_NAMES(IDX1);',
'          COLUMN_EXPRESSIONS_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'          COLUMN_EXPRESSIONS_FOR_EACH_OBJECT(P1) := COLUMN_EXPRESSIONS(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = OBJECT_NAMES.COUNT THEN',
'        DB_TABLE_COLUMN_NAME(OBJECT_NAMES(IDX1)) := COLUMN_NAMES_FOR_EACH_OBJECT;',
'        DB_TABLE_PROPERTY_NAME(OBJECT_NAMES(IDX1)) := PROPERTY_NAMES_FOR_EACH_OBJECT;',
'        COLUMN_EXPRESSION_LIST(OBJECT_NAMES(IDX1)) := COLUMN_EXPRESSIONS_FOR_EACH_OBJECT;',
'      END IF;',
'    END LOOP;',
' -- pair object name(underlying db table name) to element name(vertex name)',
' -- object_to_element_map (map, indexed by object name) -> each entry is element name (vertex name)',
'    SELECT',
'      DISTINCT OBJECT_NAME,',
'      ELEM_LABELS.ELEMENT_NAME BULK COLLECT INTO OBJECT_NAMES,',
'      ELEMENTNAMES',
'    FROM',
'      SYS.ALL_PG_ELEMENTS ELEMENTS',
'      INNER JOIN SYS.ALL_PG_ELEMENT_LABELS ELEM_LABELS',
'      ON (ELEMENTS.ELEMENT_NAME = ELEM_LABELS.ELEMENT_NAME',
'      AND ELEMENTS.OWNER = ELEM_LABELS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = ELEM_LABELS.GRAPH_NAME',
'      AND ELEMENTS.ELEMENT_NAME = ELEM_LABELS.ELEMENT_NAME)',
'      INNER JOIN SYS.ALL_PG_LABEL_PROPERTIES LABEL_PROPERTIES',
'      ON (ELEM_LABELS.LABEL_NAME = LABEL_PROPERTIES.LABEL_NAME',
'      AND ELEM_LABELS.OWNER = LABEL_PROPERTIES.OWNER',
'      AND ELEM_LABELS.GRAPH_NAME = LABEL_PROPERTIES.GRAPH_NAME)',
'      INNER JOIN SYS.ALL_PG_PROP_DEFINITIONS PROP_DEFINITIONS',
'      ON (PROP_DEFINITIONS.PROPERTY_NAME = LABEL_PROPERTIES.PROPERTY_NAME',
'      AND PROP_DEFINITIONS.ELEMENT_NAME = ELEMENTS.ELEMENT_NAME',
'      AND PROP_DEFINITIONS.OWNER = ELEMENTS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = PROP_DEFINITIONS.GRAPH_NAME)',
'    WHERE',
'      ELEMENTS.ELEMENT_KIND = ELEMENT_TYPE',
'      AND ELEMENTS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'    ORDER BY',
'      OBJECT_NAME;',
'    FOR IDX1 IN 1..OBJECT_NAMES.COUNT LOOP',
'      OBJECT_TO_ELEMENT_MAP(OBJECT_NAMES(IDX1)) := ELEMENTNAMES(IDX1);',
'    END LOOP;',
' -- get object name, column names and data types for each object',
'    SELECT',
'      OBJECT_NAME,',
'      KEYS.COLUMN_NAME,',
'      DATA_TYPE BULK COLLECT INTO OBJECT_NAMES,',
'      KEY_LIST,',
'      DATA_TYPES',
'    FROM',
'      SYS.ALL_PG_KEYS KEYS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (ELEMENTS.ELEMENT_NAME = KEYS.ELEMENT_NAME',
'      AND KEYS.GRAPH_NAME = ELEMENTS.GRAPH_NAME',
'      AND KEYS.OWNER = ELEMENTS.OWNER)',
'      INNER JOIN SYS.ALL_TAB_COLUMNS COLUMNS',
'      ON COLUMNS.OWNER = ELEMENTS.OBJECT_OWNER',
'    WHERE',
'      ELEMENT_KIND = ELEMENT_TYPE',
'      AND KEYS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'      AND COLUMNS.TABLE_NAME = OBJECT_NAME',
'      AND COLUMNS.COLUMN_NAME = KEYS.COLUMN_NAME',
'    ORDER BY',
'      OBJECT_NAME,',
'      KEYS.COLUMN_NAME;',
' -- OBJECT_TO_KEY_LIST_TABLE(map, indexed by object name) -> each entry is a list of keys',
' -- object_col_data_type_map (map, indexed by object name) -> each entry is a map, col_to_data_type (map, indexed by key)',
'    FOR IDX1 IN 1..OBJECT_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        KEY_LIST_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'        P1 := 1;',
'        KEY_LIST_FOR_EACH_OBJECT(P1) := KEY_LIST(IDX1);',
'        COL_TO_DATA_TYPE := NEW STRING_INDEX_BY_STRING();',
'        COL_TO_DATA_TYPE(KEY_LIST(IDX1)) := DATA_TYPES(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF OBJECT_NAMES(IDX1) = OBJECT_NAMES(IDX1 - 1) THEN',
'          KEY_LIST_FOR_EACH_OBJECT(P1) := KEY_LIST(IDX1);',
'          COL_TO_DATA_TYPE(KEY_LIST(IDX1)) := DATA_TYPES(IDX1);',
'          P1 := P1 + 1;',
'        ELSE',
'          OBJECT_TO_KEY_LIST_TABLE(OBJECT_NAMES(IDX1 - 1)) := KEY_LIST_FOR_EACH_OBJECT;',
'          OBJECT_COL_DATA_TYPE_MAP(OBJECT_NAMES(IDX1 - 1)) := COL_TO_DATA_TYPE;',
'          KEY_LIST_FOR_EACH_OBJECT := NEW STRING_LIST_TYPE();',
'          P1 := 1;',
'          KEY_LIST_FOR_EACH_OBJECT(P1) := KEY_LIST(IDX1);',
'          COL_TO_DATA_TYPE := NEW STRING_INDEX_BY_STRING();',
'          COL_TO_DATA_TYPE(KEY_LIST(IDX1)) := DATA_TYPES(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = OBJECT_NAMES.COUNT THEN',
'        OBJECT_TO_KEY_LIST_TABLE(OBJECT_NAMES(IDX1)) := KEY_LIST_FOR_EACH_OBJECT;',
'        OBJECT_COL_DATA_TYPE_MAP(OBJECT_NAMES(IDX1)) := COL_TO_DATA_TYPE;',
'      END IF;',
'    END LOOP;',
' /*',
'    for each underlying db table, we need one SELECT statement',
'    SELECT',
'                JSON_OBJECT(''SAL'' VALUE X.SAL,',
'                ''AGE'' VALUE X.AGE ABSENT',
'                ON NULL) AS PROPERTIES',
'            FROM',
'                HR.VERTEX_3 X',
'            WHERE',
'                JSON_VALUE(VT.COLUMN_VALUE,',
'                ''$.ELEM_TABLE'') = ''VERTEX_3''',
'                AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE,',
'                ''$.KEY_VALUE.V_ID'')',
'    */',
'    FOR IDX1 IN 1..DB_TABLE_NAME_LIST.COUNT LOOP',
'      LATERAL_QUERY_STRING := ''SELECT JSON_OBJECT('';',
' --construct selected columns',
'      SELECTED_COL_STRING := '''';',
'      FOR IDX2 IN 1..DB_TABLE_NAME_LIST.COUNT LOOP',
'        IF IDX1 = IDX2 THEN',
' --x.col_name as property_name',
'          FOR IDX4 IN 1..DB_TABLE_PROPERTY_NAME(DB_TABLE_NAME_LIST(IDX2)).COUNT LOOP',
'            COLUMN_NAME := DB_TABLE_COLUMN_NAME(DB_TABLE_NAME_LIST(IDX2))(IDX4);',
'            COLUMN_EXPRESSION := COLUMN_EXPRESSION_LIST(DB_TABLE_NAME_LIST(IDX2))(IDX4);',
' -- we add ''num_'' ahead of property name to distingush same column names for different tables',
' /* SELECT',
'                JSON_OBJECT(''SAL'' VALUE X.SAL,',
'                ''AGE'' VALUE X.AGE ABSENT',
'                ON NULL) AS PROPERTIES',
'        */',
'            IF COLUMN_EXPRESSION IS NULL THEN',
'              SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                     || ''''''''',
'                                     || DB_TABLE_PROPERTY_NAME(DB_TABLE_NAME_LIST(IDX2))(IDX4)',
'                                     || ''''''''',
'                                     || '' VALUE ''',
'                                     || ''x."''',
'                                     || COLUMN_NAME',
'                                     || ''"'';',
'              IF ( IDX4 = DB_TABLE_PROPERTY_NAME(DB_TABLE_NAME_LIST(IDX2)).COUNT) THEN',
'                SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                       || '' '';',
'              ELSE',
'                SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                       || '', '';',
'              END IF;',
'            ELSE',
'              SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                     || ''''''''',
'                                     || DB_TABLE_PROPERTY_NAME(DB_TABLE_NAME_LIST(IDX2))(IDX4)',
'                                     || ''''''''',
'                                     || '' VALUE ''',
'                                     || COLUMN_EXPRESSION',
'                                     || '''';',
'              IF ( IDX4 = DB_TABLE_PROPERTY_NAME(DB_TABLE_NAME_LIST(IDX2)).COUNT) THEN',
'                SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                       || '' '';',
'              ELSE',
'                SELECTED_COL_STRING := SELECTED_COL_STRING',
'                                       || '', '';',
'              END IF;',
'            END IF;',
'          END LOOP;',
'        END IF;',
'      END LOOP;',
'      SELECTED_COL_STRING := SELECTED_COL_STRING',
'                             || ''ABSENT ON NULL RETURNING JSON) AS properties'';',
'      JSON_CONDITION_STRING := '''';',
' --X.V_ID= JSON_VALUE(VT.COLUMN_VALUE, ''$.KEY_VALUE.V_ID'')',
'      FOR IDX5 IN 1..OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1)).COUNT LOOP',
' -- cast date string if the data type is date',
'        IF (OBJECT_COL_DATA_TYPE_MAP(DB_TABLE_NAME_LIST(IDX1))(OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)) = ''DATE''',
'        OR OBJECT_COL_DATA_TYPE_MAP(DB_TABLE_NAME_LIST(IDX1))(OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)) LIKE ''TIMESTAMP%'') THEN',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || ''x."''',
'                                   || OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)',
'                                   || ''"= to_date(json_value(''',
'                                   || GRAPH_VIZ_TABLE_NAME',
'                                   || ''.''',
'                                   || VERTEX_ID_COL_NAME',
'                                   || '', ''''$.KEY_VALUE."''',
'                                   || OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)',
'                                   || ''"''''), ''''yyyy-mm-dd"t"hh24:mi:ss'''' )'';',
'        ELSE',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || ''x.''',
'                                   || OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)',
'                                   || ''= JSON_VALUE(''',
'                                   || GRAPH_VIZ_TABLE_NAME',
'                                   || ''.''',
'                                   || VERTEX_ID_COL_NAME',
'                                   || '', ''''$.KEY_VALUE."''',
'                                   || OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1))(IDX5)',
'                                   || ''"'''')'';',
'        END IF;',
'        IF (IDX5 = OBJECT_TO_KEY_LIST_TABLE(DB_TABLE_NAME_LIST(IDX1)).COUNT) THEN',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || '''';',
'        ELSE',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || '' and '';',
'        END IF;',
'      END LOOP;',
' --JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''VERTEX_1''',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || SELECTED_COL_STRING',
'                              || '' FROM "''',
'                              || DB_OBJECT_OWNER_LIST(IDX1)',
'                              || ''"."''',
'                              || DB_TABLE_NAME_LIST(IDX1)',
'                              || ''" x WHERE JSON_VALUE(''',
'                              || GRAPH_VIZ_TABLE_NAME',
'                              || ''.''',
'                              || VERTEX_ID_COL_NAME',
'                              || '', ''''$.ELEM_TABLE'''') = ''''''',
'                              || OBJECT_TO_ELEMENT_MAP(DB_TABLE_NAME_LIST(IDX1))',
'                              || '''''' AND ''',
'                              || JSON_CONDITION_STRING;',
'      ALL_QUERY_STRING := ALL_QUERY_STRING',
'                          || LATERAL_QUERY_STRING',
'                          || '' '';',
'      IF (IDX1 = DB_TABLE_NAME_LIST.COUNT) THEN',
'        ALL_QUERY_STRING := ALL_QUERY_STRING',
'                            || '' '';',
'      ELSE',
'        ALL_QUERY_STRING := ALL_QUERY_STRING',
'                            || ''UNION '';',
'      END IF;',
'    END LOOP;',
'    RETURN ALL_QUERY_STRING;',
'  END PROPERTIES_LATERAL_STRING;',
' -----------------------------------------------------------------------------',
' -- EDGE_LATERAL_STRING - prepare edge query string in LATERAL() id_table',
' -----------------------------------------------------------------------------',
'  FUNCTION EDGE_LATERAL_STRING (',
'    DB_TABLE_NAME_LIST SYS.ODCIVARCHAR2LIST,',
'    DB_OBJECT_OWNER_LIST SYS.ODCIVARCHAR2LIST,',
'    EDGE_ELEMENT_NAME SYS.ODCIVARCHAR2LIST,',
'    GRAPH_VIZ_TABLE_NAME IN VARCHAR2,',
'    EDGE_ID_COL_NAME IN VARCHAR2,',
'    GRAPHNAME IN VARCHAR2,',
'    GRAPHOWNER IN VARCHAR2',
'  ) RETURN CLOB IS',
' /*',
'    This function is to prepare string similar to below:',
'    SELECT',
'    ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'    ''VERTEX_3'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'FROM',
'    HR.EDGE_1_3   EDGE_TABLE,',
'    HR.VERTEX_1   SRC_TABLE,',
'    HR.VERTEX_3   DST_TABLE',
'WHERE',
'    JSON_VALUE(ET.COLUMN_VALUE,',
'    ''$.ELEM_TABLE'') =''EDGE_1_3''',
'    AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'    ''$.KEY_VALUE.E_DST'')',
'    AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'    ''$.KEY_VALUE.E_SRC'')',
'    AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'    AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'    SELECT',
'        ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'        ''VERTEX_2'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'    FROM',
'        HR.EDGE_1_2   EDGE_TABLE,',
'        HR.VERTEX_1   SRC_TABLE,',
'        HR.VERTEX_2   DST_TABLE',
'    WHERE',
'        JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.ELEM_TABLE'') =''EDGE_1_2''',
'        AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.KEY_VALUE.E_SRC'')',
'        AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.KEY_VALUE.E_DST'')',
'        AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'        AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'        SELECT',
'            ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'            ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'        FROM',
'            HR.EDGE_1_1_B EDGE_TABLE,',
'            HR.VERTEX_1   SRC_TABLE,',
'            HR.VERTEX_1   DST_TABLE',
'        WHERE',
'            JSON_VALUE(ET.COLUMN_VALUE,',
'            ''$.ELEM_TABLE'') =''EDGE_1_1_B''',
'            AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'            ''$.KEY_VALUE.E_SRC'')',
'            AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'            ''$.KEY_VALUE.E_SRC'')',
'            AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'            ''$.KEY_VALUE.E_DST'')',
'            AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'            ''$.KEY_VALUE.E_DST'')',
'            AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'            AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'            SELECT',
'                ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'                ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'            FROM',
'                HR.EDGE_1_1_B EDGE_TABLE,',
'                HR.VERTEX_1   SRC_TABLE,',
'                HR.VERTEX_1   DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE,',
'                ''$.ELEM_TABLE'') =''EDGE_1_1_B''',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'                SELECT',
'                    ''VERTEX_2'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'                    ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'                FROM',
'                    HR.EDGE_2_1   EDGE_TABLE,',
'                    HR.VERTEX_2   SRC_TABLE,',
'                    HR.VERTEX_1   DST_TABLE',
'                WHERE',
'                    JSON_VALUE(ET.COLUMN_VALUE,',
'                    ''$.ELEM_TABLE'') =''EDGE_2_1''',
'                    AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                    ''$.KEY_VALUE.E_DST'')',
'                    AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                    ''$.KEY_VALUE.E_SRC'')',
'                    AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                    AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'                    SELECT',
'                        ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'                        ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'                    FROM',
'                        HR.EDGE_1_1_A EDGE_TABLE,',
'                        HR.VERTEX_1   SRC_TABLE,',
'                        HR.VERTEX_1   DST_TABLE',
'                    WHERE',
'                        JSON_VALUE(ET.COLUMN_VALUE,',
'                        ''$.ELEM_TABLE'') =''EDGE_1_1_A''',
'                        AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                        ''$.KEY_VALUE.E_SRC'')',
'                        AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                        ''$.KEY_VALUE.E_DST'')',
'                        AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                        ''$.KEY_VALUE.E_SRC'')',
'                        AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                        ''$.KEY_VALUE.E_DST'')',
'                        AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                        AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION',
'                        SELECT',
'                            ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'                            ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'                        FROM',
'                            HR.EDGE_1_1_A EDGE_TABLE,',
'                            HR.VERTEX_1   SRC_TABLE,',
'                            HR.VERTEX_1   DST_TABLE',
'                        WHERE',
'                            JSON_VALUE(ET.COLUMN_VALUE,',
'                            ''$.ELEM_TABLE'') =''EDGE_1_1_A''',
'                            AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                            ''$.KEY_VALUE.E_SRC'')',
'                            AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                            ''$.KEY_VALUE.E_DST'')',
'                            AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'                            ''$.KEY_VALUE.E_SRC'')',
'                            AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'                            ''$.KEY_VALUE.E_DST'')',
'                            AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                            AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'     */',
'    LATERAL_QUERY_STRING               CLOB := '''';',
'    IDX1                               INT;',
'    IDX2                               INT;',
'    IDX3                               INT;',
'    IDX4                               INT;',
'    TYPE STRING_LIST_TYPE IS',
'      TABLE OF VARCHAR2(M_VCSIZ_4K) INDEX BY PLS_INTEGER;',
'    TYPE VARCHARLIST_TABLE IS',
'      TABLE OF STRING_LIST_TYPE INDEX BY VARCHAR2(M_VCSIZ_4K);',
'    EDGE_KEYS                          SYS.ODCIVARCHAR2LIST;',
'    JSON_CONDITION_STRING              VARCHAR2(M_VCSIZ_4K);',
'    ALL_QUERY_STRING                   CLOB := '''';',
'    COLUMN_NAMES                    '))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'   SYS.ODCIVARCHAR2LIST;',
'    COLUMN_EXPRESSION_LIST             VARCHARLIST_TABLE;',
'    ELEMENT_NAME_TABLE                 VARCHARLIST_TABLE;',
'    VERTEX_TAB_NAMES                   SYS.ODCIVARCHAR2LIST;',
'    VERTEX_ELEMENT_NAMES               SYS.ODCIVARCHAR2LIST;',
'    VERTEX_KEYS                        SYS.ODCIVARCHAR2LIST;',
'    VERTEX_OBJECT_NAMES                SYS.ODCIVARCHAR2LIST;',
'    VERTEX_OBJECT_OWNERS               SYS.ODCIVARCHAR2LIST;',
'    EDGE_TAB_NAMES                     SYS.ODCIVARCHAR2LIST;',
'    TYPE VARCHAR_TABLE IS',
'      TABLE OF VARCHAR2(M_VCSIZ_4K) INDEX BY VARCHAR2(M_VCSIZ_4K);',
'    TYPE STRING_TO_MAP_TYPE IS',
'      TABLE OF VARCHAR_TABLE INDEX BY VARCHAR(M_VCSIZ_4K);',
'    SRC_VERTEX_TAB_NAME_TABLE          VARCHAR_TABLE;',
'    SRC_VERTEX_OBJECT_NAME_TABLE       VARCHAR_TABLE;',
'    SRC_VERTEX_OBJECT_OWNER_TABLE      VARCHAR_TABLE;',
'    DEST_VERTEX_TAB_NAME_TABLE         VARCHAR_TABLE;',
'    DEST_VERTEX_OBJECT_NAME_TABLE      VARCHAR_TABLE;',
'    DEST_VERTEX_OBJECT_OWNER_TABLE     VARCHAR_TABLE;',
'    EDGE_COL_NAME                      SYS.ODCIVARCHAR2LIST;',
'    VERTEX_COL_NAME                    SYS.ODCIVARCHAR2LIST;',
'    EDGE_END_LIST                      SYS.ODCIVARCHAR2LIST;',
'    EDGE_ELEMENT_NAMES                 SYS.ODCIVARCHAR2LIST;',
'    DATA_TYPES                         SYS.ODCIVARCHAR2LIST;',
'    SRC_EDGE_COL_NAME_TABLE            VARCHARLIST_TABLE;',
'    SRC_VERTEX_COL_NAME_TABLE          VARCHARLIST_TABLE;',
'    DEST_EDGE_COL_NAME_TABLE           VARCHARLIST_TABLE;',
'    DEST_VERTEX_COL_NAME_TABLE         VARCHARLIST_TABLE;',
'    EDGE_TO_KEYS_TABLE                 VARCHARLIST_TABLE;',
'    VERTEX_KEYS_TABLE                  VARCHARLIST_TABLE;',
'    SRC_JSON_STRING                    VARCHAR2(M_VCSIZ_4K);',
'    DEST_JSON_STRING                   VARCHAR2(M_VCSIZ_4K);',
'    SRC_EDGE_COL_NAME_FOR_EACH_EDGE    STRING_LIST_TYPE;',
'    SRC_VERTEX_COL_NAME_FOR_EACH_EDGE  STRING_LIST_TYPE;',
'    DEST_EDGE_COL_NAME_FOR_EACH_EDGE   STRING_LIST_TYPE;',
'    DEST_VERTEX_COL_NAME_FOR_EACH_EDGE STRING_LIST_TYPE;',
'    EDGE_KEYS_FOR_EACH_EDGE            STRING_LIST_TYPE;',
'    VERTEX_KEYS_FOR_EACH_VERTEX        STRING_LIST_TYPE;',
'    P1                                 INT;',
'    OBJECT_COL_DATA_TYPE_MAP           STRING_TO_MAP_TYPE;',
'    COL_TO_DATA_TYPE                   VARCHAR_TABLE;',
'  BEGIN',
' -- get all edge tables, source vertex table, target vertex tables and underlying db tables for vertex tables',
'    SELECT',
'      DISTINCT VERTEX_TAB_NAME,',
'      OBJECT_NAME,',
'      EDGE_TAB_NAME,',
'      EDGE_END,',
'      ELEMENTS.OBJECT_OWNER BULK COLLECT INTO VERTEX_TAB_NAMES,',
'      VERTEX_OBJECT_NAMES,',
'      EDGE_TAB_NAMES,',
'      EDGE_END_LIST,',
'      VERTEX_OBJECT_OWNERS',
'    FROM',
'      SYS.ALL_PG_EDGE_RELATIONSHIPS RELATIONSHIPS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (RELATIONSHIPS.VERTEX_TAB_NAME = ELEMENTS.ELEMENT_NAME',
'      AND RELATIONSHIPS.GRAPH_NAME = ELEMENTS.GRAPH_NAME',
'      AND RELATIONSHIPS.OWNER = ELEMENTS.OWNER)',
'    WHERE',
'      RELATIONSHIPS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER;',
' -- src_vertex_tab_name_table(map, indexed by edge table name) -> each entry is vertex table name',
' -- src_vertex_object_name_table(map, indexed by edge table name) -> each entry is underlying db table name for vertex table',
' -- dest_vertex_tab_name_table(map, indexed by edge table name) -> each entry is vertex table name',
' -- dest_vertex_object_name_table(map, indexed by edge table name) -> each entry is underlying db table name for vertex table',
'    FOR IDX1 IN 1..EDGE_TAB_NAMES.COUNT LOOP',
'      IF EDGE_END_LIST(IDX1) = ''SOURCE'' THEN',
'        SRC_VERTEX_TAB_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_TAB_NAMES(IDX1);',
'        SRC_VERTEX_OBJECT_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_OBJECT_NAMES(IDX1);',
'        SRC_VERTEX_OBJECT_OWNER_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_OBJECT_OWNERS(IDX1);',
'      ELSE',
'        DEST_VERTEX_TAB_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_TAB_NAMES(IDX1);',
'        DEST_VERTEX_OBJECT_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_OBJECT_NAMES(IDX1);',
'        DEST_VERTEX_OBJECT_OWNER_TABLE(EDGE_TAB_NAMES(IDX1)) := VERTEX_OBJECT_OWNERS(IDX1);',
'      END IF;',
'    END LOOP;',
' -- get edge table name, foreign column and referenced column for source vertex',
'    SELECT',
'      DISTINCT EDGE_COL_NAME,',
'      VERTEX_COL_NAME,',
'      EDGE_TAB_NAME BULK COLLECT INTO EDGE_COL_NAME,',
'      VERTEX_COL_NAME,',
'      EDGE_TAB_NAMES',
'    FROM',
'      SYS.ALL_PG_EDGE_RELATIONSHIPS RELATIONSHIPS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (RELATIONSHIPS.VERTEX_TAB_NAME = ELEMENTS.ELEMENT_NAME',
'      AND RELATIONSHIPS.GRAPH_NAME = ELEMENTS.GRAPH_NAME',
'      AND RELATIONSHIPS.OWNER = ELEMENTS.OWNER)',
'    WHERE',
'      RELATIONSHIPS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'      AND EDGE_END = ''SOURCE''',
'    ORDER BY',
'      EDGE_TAB_NAME;',
' -- src_edge_col_name_table(map, indexed by edge table name) -> each entry is src_edge_col_name_for_each_edge, src_edge_col_name_for_each_edge is a list of string(column name of edge, foreign column), indexed by num.',
' -- src_vertex_col_name_table(map, indexed by edge table name) -> each entry is src_vertex_col_name_for_each_edge, src_vertex_col_name_for_each_edge is a list of string(column name of vertex, referenced column), indexed by num.',
'    FOR IDX1 IN 1..EDGE_TAB_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        P1 := 1;',
'        SRC_EDGE_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'        SRC_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'        SRC_VERTEX_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'        SRC_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF EDGE_TAB_NAMES(IDX1) = EDGE_TAB_NAMES(IDX1 - 1) THEN',
'          SRC_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'          SRC_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'          P1 := P1 + 1;',
'        ELSE',
'          SRC_EDGE_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1 - 1)) := SRC_EDGE_COL_NAME_FOR_EACH_EDGE;',
'          SRC_VERTEX_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1 - 1)) := SRC_VERTEX_COL_NAME_FOR_EACH_EDGE;',
'          P1 := 1;',
'          SRC_EDGE_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'          SRC_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'          SRC_VERTEX_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'          SRC_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = EDGE_TAB_NAMES.COUNT THEN',
'        SRC_EDGE_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := SRC_EDGE_COL_NAME_FOR_EACH_EDGE;',
'        SRC_VERTEX_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := SRC_VERTEX_COL_NAME_FOR_EACH_EDGE;',
'      END IF;',
'    END LOOP;',
' -- get edge table name, foreign column and referenced column for destination vertex',
'    SELECT',
'      DISTINCT EDGE_COL_NAME,',
'      VERTEX_COL_NAME,',
'      EDGE_TAB_NAME BULK COLLECT INTO EDGE_COL_NAME,',
'      VERTEX_COL_NAME,',
'      EDGE_TAB_NAMES',
'    FROM',
'      SYS.ALL_PG_EDGE_RELATIONSHIPS RELATIONSHIPS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (RELATIONSHIPS.VERTEX_TAB_NAME = ELEMENTS.ELEMENT_NAME',
'      AND RELATIONSHIPS.GRAPH_NAME = ELEMENTS.GRAPH_NAME',
'      AND RELATIONSHIPS.OWNER = ELEMENTS.OWNER)',
'    WHERE',
'      RELATIONSHIPS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'      AND EDGE_END = ''DESTINATION''',
'    ORDER BY',
'      EDGE_TAB_NAME;',
' -- dest_edge_col_name_table(map, indexed by edge table name) -> each entry is dest_edge_col_name_for_each_edge, dest_edge_col_name_for_each_edge is a list of string(column name of edge, foreign column), indexed by num.',
' -- dest_vertex_col_name_table(map, indexed by edge table name) -> each entry is dest_vertex_col_name_for_each_edge, dest_vertex_col_name_for_each_edge is a list of string(column name of vertex, referenced column), indexed by num.',
'    FOR IDX1 IN 1..EDGE_TAB_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        P1 := 1;',
'        DEST_EDGE_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'        DEST_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'        DEST_VERTEX_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'        DEST_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF EDGE_TAB_NAMES(IDX1) = EDGE_TAB_NAMES(IDX1 - 1) THEN',
'          DEST_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'          DEST_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'          P1 := P1 + 1;',
'        ELSE',
'          DEST_EDGE_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1 - 1)) := DEST_EDGE_COL_NAME_FOR_EACH_EDGE;',
'          DEST_VERTEX_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1 - 1)) := DEST_VERTEX_COL_NAME_FOR_EACH_EDGE;',
'          P1 := 1;',
'          DEST_EDGE_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'          DEST_EDGE_COL_NAME_FOR_EACH_EDGE(P1) := EDGE_COL_NAME(IDX1);',
'          DEST_VERTEX_COL_NAME_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'          DEST_VERTEX_COL_NAME_FOR_EACH_EDGE(P1) := VERTEX_COL_NAME(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = EDGE_TAB_NAMES.COUNT THEN',
'        DEST_EDGE_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := DEST_EDGE_COL_NAME_FOR_EACH_EDGE;',
'        DEST_VERTEX_COL_NAME_TABLE(EDGE_TAB_NAMES(IDX1)) := DEST_VERTEX_COL_NAME_FOR_EACH_EDGE;',
'      END IF;',
'    END LOOP;',
' -- get vertex table keys',
'    SELECT',
'      KEYS.ELEMENT_NAME,',
'      KEYS.COLUMN_NAME BULK COLLECT INTO VERTEX_ELEMENT_NAMES,',
'      VERTEX_KEYS',
'    FROM',
'      SYS.ALL_PG_KEYS KEYS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (ELEMENTS.ELEMENT_NAME = KEYS.ELEMENT_NAME',
'      AND KEYS.OWNER = ELEMENTS.OWNER',
'      AND KEYS.GRAPH_NAME = ELEMENTS.GRAPH_NAME)',
'    WHERE',
'      KEYS.GRAPH_NAME = GRAPHNAME',
'      AND KEYS.OWNER = GRAPHOWNER',
'      AND ELEMENTS.ELEMENT_KIND = ''VERTEX''',
'    ORDER BY',
'      KEYS.ELEMENT_NAME,',
'      KEYS.COLUMN_NAME;',
' --vertex_keys_table(map, indexed by vertex table name) -> each entry is vertex table key list',
'    FOR IDX1 IN 1..VERTEX_ELEMENT_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        P1 := 1;',
'        VERTEX_KEYS_FOR_EACH_VERTEX := NEW STRING_LIST_TYPE();',
'        VERTEX_KEYS_FOR_EACH_VERTEX(P1) := VERTEX_KEYS(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF VERTEX_ELEMENT_NAMES(IDX1) = VERTEX_ELEMENT_NAMES(IDX1 - 1) THEN',
'          VERTEX_KEYS_FOR_EACH_VERTEX(P1) := VERTEX_KEYS(IDX1);',
'          P1 := P1 + 1;',
'        ELSE',
'          VERTEX_KEYS_TABLE(VERTEX_ELEMENT_NAMES(IDX1 - 1)) := VERTEX_KEYS_FOR_EACH_VERTEX;',
'          P1 := 1;',
'          VERTEX_KEYS_FOR_EACH_VERTEX := NEW STRING_LIST_TYPE();',
'          VERTEX_KEYS_FOR_EACH_VERTEX(P1) := VERTEX_KEYS(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = VERTEX_ELEMENT_NAMES.COUNT THEN',
'        VERTEX_KEYS_TABLE(VERTEX_ELEMENT_NAMES(IDX1)) := VERTEX_KEYS_FOR_EACH_VERTEX;',
'      END IF;',
'    END LOOP;',
' -- get edge table name, column names used to dfine the edge key and the column data type',
'    SELECT',
'      KEYS.COLUMN_NAME,',
'      KEYS.ELEMENT_NAME,',
'      DATA_TYPE BULK COLLECT INTO EDGE_KEYS,',
'      EDGE_ELEMENT_NAMES,',
'      DATA_TYPES',
'    FROM',
'      SYS.ALL_PG_KEYS KEYS',
'      INNER JOIN SYS.ALL_PG_ELEMENTS ELEMENTS',
'      ON (ELEMENTS.ELEMENT_NAME = KEYS.ELEMENT_NAME',
'      AND KEYS.GRAPH_NAME = ELEMENTS.GRAPH_NAME',
'      AND KEYS.OWNER = ELEMENTS.OWNER)',
'      INNER JOIN SYS.ALL_TAB_COLUMNS COLUMNS',
'      ON (COLUMNS.OWNER = ELEMENTS.OBJECT_OWNER',
'      AND COLUMNS.TABLE_NAME = ELEMENTS.OBJECT_NAME',
'      AND COLUMNS.COLUMN_NAME = KEYS.COLUMN_NAME)',
'    WHERE',
'      ELEMENT_KIND = ''EDGE''',
'      AND KEYS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER',
'    ORDER BY',
'      OBJECT_NAME;',
' -- EDGE_TO_KEYS_TABLE(map, indexed by edge table name) -> each entry is a list, EDGE_KEYS_FOR_EACH_EDGE, a list of column names used to define the edge key.',
' -- object_col_data_type_map(map, indexed by edge table name) -> each entry is a list, col_to_data_type, a list of data types of the columns.',
'    FOR IDX1 IN 1..EDGE_ELEMENT_NAMES.COUNT LOOP',
'      IF IDX1 = 1 THEN',
'        P1 := 1;',
'        EDGE_KEYS_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'        EDGE_KEYS_FOR_EACH_EDGE(P1) := EDGE_KEYS(IDX1);',
'        COL_TO_DATA_TYPE := NEW VARCHAR_TABLE();',
'        COL_TO_DATA_TYPE(EDGE_KEYS(IDX1)) := DATA_TYPES(IDX1);',
'        P1 := P1 + 1;',
'      ELSE',
'        IF EDGE_ELEMENT_NAMES(IDX1) = EDGE_ELEMENT_NAMES(IDX1 - 1) THEN',
'          EDGE_KEYS_FOR_EACH_EDGE(P1) := EDGE_KEYS(IDX1);',
'          COL_TO_DATA_TYPE(EDGE_KEYS(IDX1)) := DATA_TYPES(IDX1);',
'          P1 := P1 + 1;',
'        ELSE',
'          EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAMES(IDX1 - 1)) := EDGE_KEYS_FOR_EACH_EDGE;',
'          OBJECT_COL_DATA_TYPE_MAP(EDGE_ELEMENT_NAMES(IDX1 - 1)) := COL_TO_DATA_TYPE;',
'          P1 := 1;',
'          EDGE_KEYS_FOR_EACH_EDGE := NEW STRING_LIST_TYPE();',
'          EDGE_KEYS_FOR_EACH_EDGE(P1) := EDGE_KEYS(IDX1);',
'          COL_TO_DATA_TYPE := NEW VARCHAR_TABLE();',
'          COL_TO_DATA_TYPE(EDGE_KEYS(IDX1)) := DATA_TYPES(IDX1);',
'          P1 := P1 + 1;',
'        END IF;',
'      END IF;',
'      IF IDX1 = EDGE_ELEMENT_NAMES.COUNT THEN',
'        EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAMES(IDX1)) := EDGE_KEYS_FOR_EACH_EDGE;',
'        OBJECT_COL_DATA_TYPE_MAP(EDGE_ELEMENT_NAMES(IDX1)) := COL_TO_DATA_TYPE;',
'      END IF;',
'    END LOOP;',
' /*',
'    SELECT',
'        ''VERTEX_1'' || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID ) AS SOURCE,',
'        ''VERTEX_3'' || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID ) AS TARGET',
'    FROM',
'        HR.EDGE_1_3   EDGE_TABLE,',
'        HR.VERTEX_1   SRC_TABLE,',
'        HR.VERTEX_3   DST_TABLE',
'    WHERE',
'        JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.ELEM_TABLE'') =''EDGE_1_3''',
'        AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.KEY_VALUE.E_DST'')',
'        AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE,',
'        ''$.KEY_VALUE.E_SRC'')',
'        AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'        AND EDGE_TABLE.E_DST= DST_TABLE.V_ID UNION ',
'    ....',
'    */',
' -- below query is to build string similar to above',
'    ALL_QUERY_STRING := '''';',
'    FOR IDX1 IN 1..EDGE_ELEMENT_NAME.COUNT LOOP',
'      LATERAL_QUERY_STRING := ''select ''''''',
'                              || SRC_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || '''''' || json_object('';',
'      SRC_JSON_STRING := '''';',
'      DEST_JSON_STRING := '''';',
'      FOR IDX2 IN 1..VERTEX_KEYS_TABLE(SRC_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))).COUNT LOOP',
'        SRC_JSON_STRING := SRC_JSON_STRING',
'                           || ''''''''',
'                           || VERTEX_KEYS_TABLE(SRC_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)))(IDX2)',
'                           || '''''' is src_table.''',
'                           || VERTEX_KEYS_TABLE(SRC_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)))(IDX2);',
'        IF (IDX2 = VERTEX_KEYS_TABLE(SRC_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))).COUNT) THEN',
'          SRC_JSON_STRING := SRC_JSON_STRING',
'                             || '' '';',
'        ELSE',
'          SRC_JSON_STRING := SRC_JSON_STRING',
'                             || '', '';',
'        END IF;',
'      END LOOP;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || SRC_JSON_STRING;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || '') as source, ''''''',
'                              || DEST_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || '''''' || json_object('';',
'      FOR IDX3 IN 1..VERTEX_KEYS_TABLE(DEST_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))).COUNT LOOP',
'        DEST_JSON_STRING := DEST_JSON_STRING',
'                            || ''''''''',
'                            || VERTEX_KEYS_TABLE(DEST_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)))(IDX3)',
'                            || '''''' is dst_table.''',
'                            || VERTEX_KEYS_TABLE(DEST_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)))(IDX3);',
'        IF (IDX3 = VERTEX_KEYS_TABLE(DEST_VERTEX_TAB_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))).COUNT) THEN',
'          DEST_JSON_STRING := DEST_JSON_STRING',
'                              || '' '';',
'        ELSE',
'          DEST_JSON_STRING := DEST_JSON_STRING',
'                              || '', '';',
'        END IF;',
'      END LOOP;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || DEST_JSON_STRING;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              ||'') as target from ''',
'                              || DB_OBJECT_OWNER_LIST(IDX1)',
'                              || ''.''',
'                              || DB_TABLE_NAME_LIST(IDX1)',
'                              || '' edge_table, ''',
'                              || SRC_VERTEX_OBJECT_OWNER_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || ''.''',
'                              ||SRC_VERTEX_OBJECT_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || '' src_table, ''',
'                              || DEST_VERTEX_OBJECT_OWNER_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || ''.''',
'                              || DEST_VERTEX_OBJECT_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))',
'                              || '' dst_table where json_value(''',
'                              || GRAPH_VIZ_TABLE_NAME',
'                              || ''.''',
'                              || EDGE_ID_COL_NAME',
'                              || '', ''''$.ELEM_TABLE'''') =''''''',
'                              || EDGE_ELEMENT_NAME(IDX1)',
'                              || '''''' and '';',
'      JSON_CONDITION_STRING := '''';',
'      FOR IDX4 IN 1..EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1)).COUNT LOOP',
' -- cast date type if data type is date',
'        IF (OBJECT_COL_DATA_TYPE_MAP(EDGE_ELEMENT_NAME(IDX1))(EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)) = ''DATE''',
'        OR OBJECT_COL_DATA_TYPE_MAP(EDGE_ELEMENT_NAME(IDX1))(EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)) LIKE ''TIMESTAMP%'') THEN',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || ''edge_table.''',
'                                   || EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                                   || ''= to_date(json_value(''',
'                                   || GRAPH_VIZ_TABLE_NAME',
'                                   || ''.''',
'                                   || EDGE_ID_COL_NAME',
'                                   || '', ''''$.KEY_VALUE.''',
'                                   || EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                                   || ''''''), ''''yyyy-mm-dd"t"hh24:mi:ss'''')'';',
'        ELSE',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || ''edge_table.''',
'                                   || EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                                   || ''= JSON_VALUE(''',
'                                   || GRAPH_VIZ_TABLE_NAME',
'                                   || ''.''',
'                                   || EDGE_ID_COL_NAME',
'                                   || '', ''''$.KEY_VALUE.''',
'                                   || EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                                   || '''''')'';',
'        END IF;',
'        IF (IDX4 = EDGE_TO_KEYS_TABLE(EDGE_ELEMENT_NAME(IDX1)).COUNT) THEN',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || '''';',
'        ELSE',
'          JSON_CONDITION_STRING := JSON_CONDITION_STRING',
'                                   || '' AND '';',
'        END IF;',
'      END LOOP;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || JSON_CONDITION_STRING',
'                              || '' AND '';',
'      SRC_JSON_STRING := '''';',
'      FOR IDX4 IN 1..SRC_EDGE_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)).COUNT LOOP',
'        SRC_JSON_STRING := SRC_JSON_STRING',
'                           || ''edge_table.''',
'                           || SRC_EDGE_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                           || ''= src_table.''',
'                           || SRC_VERTEX_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4);',
'        SRC_JSON_STRING := SRC_JSON_STRING',
'                           || '' AND '';',
'      END LOOP;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || SRC_JSON_STRING;',
'      DEST_JSON_STRING := '''';',
'      FOR IDX4 IN 1..DEST_EDGE_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)).COUNT LOOP',
'        DEST_JSON_STRING := DEST_JSON_STRING',
'                            || ''edge_table.''',
'                            || DEST_EDGE_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4)',
'                            || ''= dst_table.''',
'                            || DEST_VERTEX_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1))(IDX4);',
'        IF (IDX4 = DEST_EDGE_COL_NAME_TABLE(EDGE_ELEMENT_NAME(IDX1)).COUNT) THEN',
'          DEST_JSON_STRING := DEST_JSON_STRING',
'                              || '''';',
'        ELSE',
'          DEST_JSON_STRING := DEST_JSON_STRING',
'                              || '' AND '';',
'        END IF;',
'      END LOOP;',
'      LATERAL_QUERY_STRING := LATERAL_QUERY_STRING',
'                              || DEST_JSON_STRING;',
'      ALL_QUERY_STRING := ALL_QUERY_STRING',
'                          || LATERAL_QUERY_STRING',
'                          || '' '';',
'      IF (IDX1 = EDGE_ELEMENT_NAME.COUNT) THEN',
'        ALL_QUERY_STRING := ALL_QUERY_STRING',
'                            || '''';',
'      ELSE',
'        ALL_QUERY_STRING := ALL_QUERY_STRING',
'                            || '' union '';',
'      END IF;',
'    END LOOP;',
'    RETURN ALL_QUERY_STRING;',
'  END EDGE_LATERAL_STRING;',
'  FUNCTION GET_VERSION RETURN VARCHAR2 IS',
'  BEGIN',
'    RETURN ''24.4.2 (2024-10-04T16:58:13.275117906Z, build: 17f8da8b)'';',
'  END GET_VERSION;',
' -----------------------------------------------------------------------------',
' -- BUILD_JSON - prepare JSON result from vertex_id and edge_id tables',
' -----------------------------------------------------------------------------',
'  FUNCTION BUILD_JSON(',
'    VERTEX_TABLE SYS.ODCIRIDLIST,',
'    EDGE_TABLE SYS.ODCIRIDLIST,',
'    COUNTER NUMBER,',
'    GRAPHNAME VARCHAR2,',
'    GRAPHOWNER VARCHAR2',
'  ) RETURN CLOB',
'    IS',
'    VERTEX_UNDERLYING_DB_NAME_LIST          SYS.ODCIVARCHAR2LIST;',
'    VERTEX_DB_TABLE_OBJECT_OWNER            SYS.ODCIVARCHAR2LIST;',
'    EDGE_UNDERLYING_DB_NAME_LIST            SYS.ODCIVARCHAR2LIST;',
'    EDGE_DB_TABLE_OBJECT_OWNER              SYS.ODCIVARCHAR2LIST;',
'    QUERY_STRING                            VARCHAR2(M_VCSIZ_32K);',
'    LATERALSTRING                           VARCHAR2(M_VCSIZ_32K);',
'    SUB_QUERY_STRING                        VARCHAR2(M_VCSIZ_32K);',
'    VERTEX                                  JSON;',
'    EDGE                                    JSON;',
'    EDGE_ELEMENT_NAME                       SYS.ODCIVARCHAR2LIST;',
'    EDGE_UNDERLYING_DB_NAME_LIST_WITH_PROPS SYS.ODCIVARCHAR2LIST;',
'    EDGE_DB_TABLE_OBJECT_OWNER_WITH_PROPS   SYS.ODCIVARCHAR2LIST;',
'    L_JSON                                  VARCHAR2(M_VCSIZ_4K);',
'    JSON_FILE                               CLOB;',
'    DISTINCT_VERTEX_TABLE                   SYS.ODCIVARCHAR2LIST;',
'    DISTINCT_EDGE_TABLE                     SYS.ODCIVARCHAR2LIST;',
'  BEGIN',
' /**********************************************************************************/',
' --get all underlyting db table names for vertices with properties',
'    SELECT',
'      DISTINCT ELEMENTS.OBJECT_NAME,',
'      ELEMENTS.OBJECT_OWNER BULK COLLECT INTO VERTEX_UNDERLYING_DB_NAME_LIST,',
'      VERTEX_DB_TABLE_OBJECT_OWNER',
'    FROM',
'      SYS.ALL_PG_ELEMENTS ELEMENTS',
'      INNER JOIN SYS.ALL_PG_ELEMENT_LABELS ELEM_LABELS',
'      ON (ELEMENTS.ELEMENT_NAME = ELEM_LABELS.ELEMENT_NAME',
'      AND ELEMENTS.OWNER = ELEM_LABELS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = ELEM_LABELS.GRAPH_NAME )',
'      INNER JOIN SYS.ALL_PG_LABEL_PROPERTIES LABEL_PROPERTIES',
'      ON (ELEM_LABELS.LABEL_NAME = LABEL_PROPERTIES.LABEL_NAME',
'      AND ELEM_LABELS.OWNER = LABEL_PROPERTIES.OWNER',
'      AND ELEM_LABELS.GRAPH_NAME = LABEL_PROPERTIES.GRAPH_NAME)',
'      INNER JOIN SYS.ALL_PG_PROP_DEFINITIONS PROP_DEFINITIONS',
'      ON (PROP_DEFINITIONS.PROPERTY_NAME = LABEL_PROPERTIES.PROPERTY_NAME',
'      AND PROP_DEFINITIONS.ELEMENT_NAME = ELEMENTS.ELEMENT_NAME',
'      AND PROP_DEFINITIONS.OWNER = ELEMENTS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = PROP_DEFINITIONS.GRAPH_NAME)',
'    WHERE',
'      ELEMENTS.ELEMENT_KIND = ''VERTEX''',
'      AND ELEMENTS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER;',
' --prepare query vertices string',
' /* Example vertex query string',
'   WITH VERTICES AS (',
'    SELECT',
'      JSON_OBJECT (''id'' VALUE JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'')',
'                    || JSON_QUERY(VT.COLUMN_VALUE, ''$.KEY_VALUE''), ''properties'' VALUE PROPERTIES_TABLE.PROPERTIES, ''labels'' VALUE LABELS.LABEL ABSENT ON NULL RETURNING JSON) AS VERTEX',
'    FROM',
'        (',
'            SELECT',
'                DISTINCT *',
'            FROM',
'                TABLE(:1)',
'        )                         VT, LATERAL(',
'            SELECT',
'                JSON_OBJECT(''AGE'' VALUE X."AGE" ABSENT ON NULL)                      AS PROPERTIES',
'            FROM',
'                "HR"."VERTEX_2" X',
'            WHERE',
'                JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''VERTEX_2''',
'                AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE, ''$.KEY_VALUE."V_ID"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''AGE'' VALUE X."AGE", ''SAL'' VALUE X."SAL" ABSENT ON NULL) AS PROPERTIES',
'            FROM',
'                "HR"."VERTEX_3" X',
'            WHERE',
'                JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''VERTEX_3''',
'                AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE, ''$.KEY_VALUE."V_ID"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''AGE'' VALUE X."AGE", ''SAL'' VALUE X."SAL" ABSENT ON NULL) AS PROPERTIES',
'            FROM',
'                "HR"."VERTEX_1" X',
'            WHERE',
'                JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''VERTEX_1''',
'                AND X.V_ID= JSON_VALUE(VT.COLUMN_VALUE, ''$.KEY_VALUE."V_ID"'')',
'        ) PROPERTIES_TABLE,',
'        LATERAL (',
'            SELECT',
'                JSON_ARRAYAGG(LABEL_NAME)                                                                                                                                                                                       AS LABEL',
'            FROM',
'                SYS.ALL_PG_ELEMENT_LABELS X',
'            WHERE',
'                X.OWNER = JSON_VALUE(VT.COLUMN_VALUE, ''$.GRAPH_OWNER'')',
'                AND X.GRAPH_NAME = JSON_VALUE(VT.COLUMN_VALUE, ''$.GRAPH_NAME'')',
'                AND X.ELEMENT_NAME = JSON_VALUE(VT.COLUMN_VALUE, ''$.ELEM_TABLE'')',
'        ) LABELS',
')',
'SELECT',
'    JSON_ARRAYAGG(VERTEX RETURNING CLOB)',
'FROM',
'    VERTICES',
'*/',
' -- if there is vertex id, prepare vertex query string like above example query string',
'    IF (VERTEX_TABLE.COUNT != 0) THEN',
'      SELECT',
'        DISTINCT COLUMN_VALUE BULK COLLECT INTO DISTINCT_VERTEX_TABLE',
'      FROM',
'        TABLE(VERTEX_TABLE);',
'      QUERY_STRING := ''with vertices as ('';',
' -- prepare string inside LATERAL()',
'      LATERALSTRING := DBMS_GVT.PROPERTIES_LATERAL_STRING(VERTEX_UNDERLYING_DB_NAME_LIST, VERTEX_DB_TABLE_OBJECT_OWNER, ''VT'', ''COLUMN_VALUE'', GRAPHNAME, GRAPHOWNER, ''VERTEX'');',
'      SUB_QUERY_STRING := ''select json_object (''''id'''' value json_value(VT.COLUMN_VALUE, ''''$.ELEM_TABLE'''') || json_query(VT.COLUMN_VALUE, ''''$.KEY_VALUE''''), ''''properties'''' value properties_table.PROPERTIES, ''''labels'''' value labels.label absent on null '
||'RETURNING JSON) as vertex from (select distinct * from table(:1)) VT outer apply(''',
'                          || LATERALSTRING',
'                          || '') properties_table, ''',
'                          || '' LATERAL (SELECT JSON_ARRAYAGG(LABEL_NAME) AS LABEL FROM SYS.ALL_PG_ELEMENT_LABELS x WHERE x.OWNER = JSON_VALUE(VT.COLUMN_VALUE, ''''$.GRAPH_OWNER'''') AND x.GRAPH_NAME = JSON_VALUE(VT.COLUMN_VALUE, ''''$.GRAPH_NAME'''') AND x.E'
||'LEMENT_NAME = JSON_VALUE(VT.COLUMN_VALUE, ''''$.ELEM_TABLE'''')) LABELS'';',
'      QUERY_STRING := QUERY_STRING',
'                      || SUB_QUERY_STRING;',
'      QUERY_STRING := QUERY_STRING',
'                      || '') select json_arrayagg(vertex RETURNING CLOB) from vertices'';',
'      EXECUTE IMMEDIATE QUERY_STRING INTO VERTEX USING DISTINCT_VERTEX_TABLE;',
'    ELSE',
' -- if there is no vertex id in global temp table, return an empty array to vertex value',
'      SELECT',
'        JSON_ARRAY() INTO VERTEX;',
'    END IF;',
' --get edges table name and underlying db table names for edges',
'    SELECT',
'      ELEMENTS.ELEMENT_NAME,',
'      ELEMENTS.OBJECT_NAME,',
'      ELEMENTS.OBJECT_OWNER BULK COLLECT INTO EDGE_ELEMENT_NAME,',
'      EDGE_UNDERLYING_DB_NAME_LIST,',
'      EDGE_DB_TABLE_OBJECT_OWNER',
'    FROM',
'      SYS.ALL_PG_ELEMENTS ELEMENTS',
'      INNER JOIN SYS.ALL_PG_ELEMENT_LABELS ELEMENTS_LABELS',
'      ON (ELEMENTS.ELEMENT_NAME = ELEMENTS_LABELS.ELEMENT_NAME',
'      AND ELEMENTS.GRAPH_NAME = ELEMENTS_LABELS.GRAPH_NAME',
'      AND ELEMENTS.OWNER = ELEMENTS_LABELS.OWNER)',
'    WHERE',
'      ELEMENTS.ELEMENT_KIND = ''EDGE''',
'      AND ELEMENTS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER;',
' --get all underlyting db table names for edges with properties',
'    SELECT',
'      DISTINCT ELEMENTS.OBJECT_NAME,',
'      ELEMENTS.OBJECT_OWNER BULK COLLECT INTO EDGE_UNDERLYING_DB_NAME_LIST_WITH_PROPS,',
'      EDGE_DB_TABLE_OBJECT_OWNER_WITH_PROPS',
'    FROM',
'      SYS.ALL_PG_ELEMENTS ELEMENTS',
'      INNER JOIN SYS.ALL_PG_ELEMENT_LABELS ELEM_LABELS',
'      ON (ELEMENTS.ELEMENT_NAME = ELEM_LABELS.ELEMENT_NAME',
'      AND ELEMENTS.OWNER = ELEM_LABELS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = ELEM_LABELS.GRAPH_NAME )',
'      INNER JOIN SYS.ALL_PG_LABEL_PROPERTIES LABEL_PROPERTIES',
'      ON (ELEM_LABELS.LABEL_NAME = LABEL_PROPERTIES.'))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'LABEL_NAME',
'      AND ELEM_LABELS.OWNER = LABEL_PROPERTIES.OWNER',
'      AND ELEM_LABELS.GRAPH_NAME = LABEL_PROPERTIES.GRAPH_NAME)',
'      INNER JOIN SYS.ALL_PG_PROP_DEFINITIONS PROP_DEFINITIONS',
'      ON (PROP_DEFINITIONS.PROPERTY_NAME = LABEL_PROPERTIES.PROPERTY_NAME',
'      AND PROP_DEFINITIONS.ELEMENT_NAME = ELEMENTS.ELEMENT_NAME',
'      AND PROP_DEFINITIONS.OWNER = ELEMENTS.OWNER',
'      AND ELEMENTS.GRAPH_NAME = PROP_DEFINITIONS.GRAPH_NAME)',
'    WHERE',
'      ELEMENTS.ELEMENT_KIND = ''EDGE''',
'      AND ELEMENTS.GRAPH_NAME = GRAPHNAME',
'      AND ELEMENTS.OWNER = GRAPHOWNER;',
' --prepare query vertices string',
' --prepare edge query string',
' /*Example string',
'  WITH EDGES AS (',
'    SELECT',
'        JSON_OBJECT(''id'' VALUE JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'')',
'                               || JSON_QUERY(ET.COLUMN_VALUE, ''$.KEY_VALUE''), ''source'' IS ID_TABLE.SOURCE, ''target'' IS ID_TABLE.TARGET, ''properties'' VALUE PROPERTIES_TABLE.PROPERTIES, ''labels'' VALUE LABELS.LABEL ABSENT ON NULL RETURNING JSON ) AS EDG'
||'E',
'    FROM',
'        (',
'            SELECT',
'                DISTINCT *',
'            FROM',
'                TABLE(:1)',
'        )                         ET, LATERAL(',
'            SELECT',
'                JSON_OBJECT(''COST'' VALUE X."COST" ABSENT ON NULL)     AS PROPERTIES',
'            FROM',
'                "HR"."EDGE_1_1_B" X',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''EDGE_1_1_B''',
'                AND X.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_SRC"'')',
'                AND X.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_DST"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''COST'' VALUE X."E_W" ABSENT ON NULL)      AS PROPERTIES',
'            FROM',
'                "HR"."EDGE_2_1"   X',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''EDGE_2_1''',
'                AND X.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_DST"'')',
'                AND X.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_SRC"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''COST'' VALUE X."E_WEIGHT" ABSENT ON NULL) AS PROPERTIES',
'            FROM',
'                "HR"."EDGE_1_2"   X',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''EDGE_1_2''',
'                AND X.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_DST"'')',
'                AND X.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_SRC"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''COST'' VALUE X."E_COST" ABSENT ON NULL)   AS PROPERTIES',
'            FROM',
'                "HR"."EDGE_1_1_A" X',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''EDGE_1_1_A''',
'                AND X.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_SRC"'')',
'                AND X.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_DST"'')',
'            UNION',
'            SELECT',
'                JSON_OBJECT(''COST'' VALUE X."E_C" ABSENT ON NULL)      AS PROPERTIES',
'            FROM',
'                "HR"."EDGE_1_3"   X',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') = ''EDGE_1_3''',
'                AND X.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_SRC"'')',
'                AND X.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE."E_DST"'')',
'        ) PROPERTIES_TABLE,',
'        LATERAL(',
'            SELECT',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS SOURCE,',
'                ''VERTEX_2''',
'                || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS TARGET',
'            FROM',
'                HR.EDGE_1_2               EDGE_TABLE,',
'                HR.VERTEX_1               SRC_TABLE,',
'                HR.VERTEX_2               DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') =''EDGE_1_2''',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'            UNION',
'            SELECT',
'                ''VERTEX_2''',
'                || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS SOURCE,',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS TARGET',
'            FROM',
'                HR.EDGE_2_1               EDGE_TABLE,',
'                HR.VERTEX_2               SRC_TABLE,',
'                HR.VERTEX_1               DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') =''EDGE_2_1''',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'            UNION',
'            SELECT',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS SOURCE,',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS TARGET',
'            FROM',
'                HR.EDGE_1_1_B             EDGE_TABLE,',
'                HR.VERTEX_1               SRC_TABLE,',
'                HR.VERTEX_1               DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') =''EDGE_1_1_B''',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'            UNION',
'            SELECT',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS SOURCE,',
'                ''VERTEX_3''',
'                || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS TARGET',
'            FROM',
'                HR.EDGE_1_3               EDGE_TABLE,',
'                HR.VERTEX_1               SRC_TABLE,',
'                HR.VERTEX_3               DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') =''EDGE_1_3''',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'            UNION',
'            SELECT',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS SRC_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS SOURCE,',
'                ''VERTEX_1''',
'                || JSON_OBJECT(''V_ID'' IS DST_TABLE.V_ID )                                                                                                                                                                                                 '
||'  AS TARGET',
'            FROM',
'                HR.EDGE_1_1_A             EDGE_TABLE,',
'                HR.VERTEX_1               SRC_TABLE,',
'                HR.VERTEX_1               DST_TABLE',
'            WHERE',
'                JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'') =''EDGE_1_1_A''',
'                AND EDGE_TABLE.E_DST= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_DST'')',
'                AND EDGE_TABLE.E_SRC= JSON_VALUE(ET.COLUMN_VALUE, ''$.KEY_VALUE.E_SRC'')',
'                AND EDGE_TABLE.E_SRC= SRC_TABLE.V_ID',
'                AND EDGE_TABLE.E_DST= DST_TABLE.V_ID',
'        ) ID_TABLE,',
'        LATERAL (',
'            SELECT',
'                JSON_ARRAYAGG(LABEL_NAME)                                                                                                                                                                                                                 '
||'  AS LABEL',
'            FROM',
'                SYS.ALL_PG_ELEMENT_LABELS X',
'            WHERE',
'                X.OWNER = JSON_VALUE(ET.COLUMN_VALUE, ''$.GRAPH_OWNER'')',
'                AND X.GRAPH_NAME = JSON_VALUE(ET.COLUMN_VALUE, ''$.GRAPH_NAME'')',
'                AND X.ELEMENT_NAME = JSON_VALUE(ET.COLUMN_VALUE, ''$.ELEM_TABLE'')',
'        ) LABELS',
')',
'SELECT',
'    JSON_ARRAYAGG(EDGE RETURNING CLOB)',
'FROM',
'    EDGES',
'  */',
' -- if there is edge id, prepare edge query string like above example query string',
'    IF (EDGE_TABLE.COUNT != 0) THEN',
'      SELECT',
'        DISTINCT COLUMN_VALUE BULK COLLECT INTO DISTINCT_EDGE_TABLE',
'      FROM',
'        TABLE(EDGE_TABLE);',
'      QUERY_STRING := ''WITH EDGES AS (SELECT JSON_OBJECT(''''id'''' value json_value(ET.COLUMN_VALUE, ''''$.ELEM_TABLE'''') || json_query(ET.COLUMN_VALUE, ''''$.KEY_VALUE''''),''''source'''' is id_table.source, ''''target'''' is id_table.target, ''''properties'''' value PRO'
||'PERTIES_TABLE.PROPERTIES, ''''labels'''' VALUE labels.label absent on null RETURNING JSON ) as edge FROM (select distinct * from table(:1)) ET outer apply('';',
' -- prepare string inside LATERAL()',
'      LATERALSTRING := DBMS_GVT.PROPERTIES_LATERAL_STRING(EDGE_UNDERLYING_DB_NAME_LIST_WITH_PROPS, EDGE_DB_TABLE_OBJECT_OWNER_WITH_PROPS, ''ET'', ''COLUMN_VALUE'', GRAPHNAME, GRAPHOWNER, ''EDGE'');',
'      QUERY_STRING := QUERY_STRING',
'                      || LATERALSTRING;',
'      QUERY_STRING := QUERY_STRING',
'                      || '') properties_table, LATERAL('';',
'      LATERALSTRING := DBMS_GVT.EDGE_LATERAL_STRING(EDGE_UNDERLYING_DB_NAME_LIST, EDGE_DB_TABLE_OBJECT_OWNER, EDGE_ELEMENT_NAME, ''ET'', ''COLUMN_VALUE'', GRAPHNAME, GRAPHOWNER);',
'      QUERY_STRING := QUERY_STRING',
'                      || LATERALSTRING;',
'      QUERY_STRING := QUERY_STRING',
'                      ||'') id_table, LATERAL (SELECT JSON_ARRAYAGG(LABEL_NAME) AS LABEL FROM SYS.ALL_PG_ELEMENT_LABELS x WHERE x.OWNER = JSON_VALUE(ET.COLUMN_VALUE, ''''$.GRAPH_OWNER'''') AND x.GRAPH_NAME = JSON_VALUE(ET.COLUMN_VALUE, ''''$.GRAPH_NAME'''') A'
||'ND x.ELEMENT_NAME = JSON_VALUE(ET.COLUMN_VALUE, ''''$.ELEM_TABLE'''')) LABELS ''',
'                      ||'') select JSON_ARRAYAGG(edge RETURNING CLOB) from edges'';',
'      EXECUTE IMMEDIATE QUERY_STRING INTO EDGE USING DISTINCT_EDGE_TABLE;',
'    ELSE',
' -- if there is no edge id in global temp table, return an empty array to edge value',
'      SELECT',
'        JSON_ARRAY() INTO EDGE;',
'    END IF;',
' -- prepare the final result',
'    SELECT',
'      JSON_OBJECT(''vertices'' VALUE VERTEX,',
'      ''edges'' VALUE EDGE,',
'      ''numResults'' VALUE COUNTER RETURNING CLOB) INTO JSON_FILE',
'    FROM',
'      SYS.DUAL;',
'    RETURN JSON_FILE;',
'  END BUILD_JSON;',
'END DBMS_GVT;',
'/',
'create or replace PACKAGE BODY IMAGE_AI_PK   ',
'IS  ',
'-------------------------------------------------------------------------------  ',
'-- NAME        : IMAGE_AI_PK   ',
'-------------------------------------------------------------------------------  ',
'  ',
'--------------------------------------------------------------------------------  ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE initialize (v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE) AS ',
'-- ----------------------------------------------------------------- ',
'        BEGIN ',
'          SELECT GC_OCI_OBJ_STORE_BASE_URL, ',
'                 GC_OCI_DOC_AI_URL, ',
'                 GC_OCI_DOC_AI_TIMEOUT_SECS, ',
'                 GC_WC_CREDENTIAL_ID, ',
'                 GC_OCI_REQ_AI_PAYLOAD ',
'          INTO   v_GC_OCI_OBJ_STORE_BASE_URL, ',
'                 v_GC_OCI_DOC_AI_URL, ',
'                 v_GC_OCI_DOC_AI_TIMEOUT_SECS, ',
'                 v_GC_WC_CREDENTIAL_ID, ',
'                 v_GC_OCI_REQ_AI_PAYLOAD ',
'          FROM   MACHINE_LEARNING_CONFIGS WHERE ID = v_id; ',
'        END initialize; ',
'  ',
'--------------------------------------------------------------------------------  ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE put_file  ',
' (p_mime_type         IN VARCHAR2,  ',
'  p_file_blob         IN BLOB,  ',
'  p_file_name         IN VARCHAR2,  ',
'  x_object_store_url OUT VARCHAR2) IS  ',
'  ',
'  l_response            CLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Build the full Object Storage URL.  ',
'  --x_object_store_url := GC_OCI_OBJ_STORE_BASE_URL || p_file_name; ',
'  x_object_store_url := IMAGE_AI_PK.v_GC_OCI_OBJ_STORE_BASE_URL || p_file_name;   ',
'  ',
'  -- Set Mime Type of the file in the Request Header.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := p_mime_type;  ',
'  ',
'  -- Call Web Service to PUT file in OCI.  ',
'  l_response := apex_web_service.make_rest_request  ',
'   (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,  ',
'    --p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'  END IF;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END put_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'   ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE upload_file  ',
'  (p_apex_file_name    IN VARCHAR2,  ',
'   x_file_name        OUT VARCHAR2,  ',
'   x_object_store_url OUT VARCHAR2,  ',
'   x_document_id      OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_file_info IS  ',
'    SELECT filename  ',
'    ,      blob_content  ',
'    ,      mime_type  ',
'    FROM   apex_application_temp_files  ',
'    WHERE  name = p_apex_file_name;  ',
'  ',
'  lr_file_info          cr_file_info%ROWTYPE;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the File BLOB Content and File Name uploaded from APEX.  ',
'  OPEN  cr_file_info;  ',
'  FETCH cr_file_info INTO lr_file_info;  ',
'  CLOSE cr_file_info;  ',
'    ',
'  x_file_name := lr_file_info.filename;  ',
'    ',
'  -- Post file to OCI Object Store.  ',
'  put_file  ',
'   (p_mime_type        => lr_file_info.mime_type,  ',
'    p_file_blob        => lr_file_info.blob_content,  ',
'    p_file_name        => lr_file_info.filename,  ',
'    x_object_store_url => x_object_store_url);  ',
'  ',
'  -- Create Document Record  ',
'  INSERT INTO cndemo_document_ai_docs (file_name, mime_type, object_store_url)  ',
'  VALUES (lr_file_info.filename, lr_file_info.mime_type, x_object_store_url)   ',
'  RETURNING document_id INTO x_document_id;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END upload_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE document_ai  ',
'  (p_file_name   IN VARCHAR2,  ',
'   p_document_id IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  /* ',
'  CURSOR cr_document_data (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$''  ',
'             COLUMNS (document_type_code      VARCHAR2(50)  PATH ''$.detectedDocumentTypes[0].documentType'',  ',
'                      document_type_score     NUMBER        PATH ''$.detectedDocumentTypes[0].confidence'',  ',
'                      language_code           VARCHAR2(50)  PATH ''$.detectedLanguages[0].languageCode'',  ',
'                      language_score          NUMBER        PATH ''$.detectedLanguages[0].confidence'',  ',
'                      page_count              NUMBER        PATH ''$.documentMetadata.pageCount'')) jt;  ',
'   */ ',
'   CURSOR cr_document_data (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$''  ',
'             COLUMNS (label1      VARCHAR2(100)  PATH ''$.labels[0].name'',  ',
'                      label1_score     NUMBER        PATH ''$.labels[0].confidence'',  ',
'                      label2           VARCHAR2(100)  PATH ''$.labels[1].name'',  ',
'                      label2_score          NUMBER        PATH ''$.labels[1].confidence'' )) jt;  ',
'  ',
'  --/* ',
'  CURSOR cr_document_fields (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$.pages[*]''  ',
'             COLUMNS (page_number       NUMBER        PATH ''$.pageNumber'',  ',
'                      NESTED PATH ''$.documentFields[*]'' COLUMNS  ',
'                       (field_type_code VARCHAR2(50)   PATH ''$.fieldType'',  ',
'                        field_label     VARCHAR2(100)  PATH ''$.fieldLabel.name'',  ',
'                        label_score     NUMBER         PATH ''$.fieldLabel.confidence'',  ',
'                        field_value     VARCHAR2(1000) PATH ''$.fieldValue.value''  ',
'                        ))) jt  ',
'    WHERE  jt.field_type_code = ''KEY_VALUE'';  ',
'    --*/ ',
'  ',
'  l_request_json        VARCHAR2(32000);  ',
'  l_response_json       CLOB;  ',
'  lr_document_data      cr_document_data%ROWTYPE;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Replace the uploaded filename in the JSON payload to be sent to Document AI.  ',
'  l_request_json := REPLACE(v_GC_OCI_REQ_AI_PAYLOAD, ''#FILE_NAME#'', p_file_name);  ',
'  ',
'  -- Set Content-Type in the Request Header. This is required by the Document AI REST Service.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := ''application/json'';  ',
'  ',
'  -- Call the Document AI analyzeDocument REST Web Service.  ',
'  --v_GC_OCI_OBJ_STORE_BASE_URL ',
'  l_response_json := apex_web_service.make_rest_request  ',
'   (p_url                  => v_GC_OCI_DOC_AI_URL,  ',
'    p_http_method          => ''POST'',  ',
'    p_body                 => l_request_json,  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
'    --p_credential_static_id => ''APEX_OCI_BLOG_CREDENTIAL'');  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20112,''Unable to call Image AI Service'');  ',
'  END IF;  ',
'  ',
'  -- Get Document Level Data from the JSON response.  ',
'  OPEN  cr_document_data (cp_json => l_response_json);  ',
'  FETCH cr_document_data INTO lr_document_data;  ',
'  CLOSE cr_document_data;  ',
'  ',
'  -- Get Key Value Fields from JSON and populate table.  ',
'  FOR r_field IN cr_document_fields (cp_json => l_response_json) LOOP  ',
'    INSERT INTO cndemo_document_ai_fields (document_id,field_type_code,field_label,label_score,field_value)  ',
'    VALUES (p_document_id,r_field.field_type_code,r_field.field_label,r_field.label_score,r_field.field_value);  ',
'  END LOOP;  ',
'    ',
'  -- Update Document Table with Results.  ',
'  /* ',
'  UPDATE cndemo_document_ai_docs  ',
'  SET    doc_ai_json         = l_response_json  ',
'  ,      language_code       = lr_document_data.language_code  ',
'  ,      language_score      = lr_document_data.language_score  ',
'  ,      document_type_code  = lr_document_data.document_type_code  ',
'  ,      document_type_score = lr_document_data.document_type_score  ',
'  ,      page_count          = lr_document_data.page_count  ',
'  WHERE  document_id         = p_document_id;  ',
'  */ ',
' ',
'  UPDATE cndemo_document_ai_docs  ',
'  SET    doc_ai_json         = l_response_json  ',
'  ,      label1       = lr_document_data.label1  ',
'  ,      label1_score      = lr_document_data.label1_score  ',
'  ,      label2  = lr_document_data.label2  ',
'  ,      label2_score = lr_document_data.label2_score   ',
'  WHERE  document_id         = p_document_id;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END document_ai;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE, ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  l_object_store_url    VARCHAR2(1000);  ',
'  l_file_name           VARCHAR2(100);  ',
'  ',
'BEGIN  ',
' ',
'  initialize(v_id); ',
'  ',
'  -- Get file and upload to OCI Object Storage.  ',
'  upload_file  ',
'   (p_apex_file_name   => p_apex_file_name,   ',
'    x_file_name        => l_file_name,  ',
'    x_object_store_url => l_object_store_url,  ',
'    x_document_id      => x_document_id);  ',
'  ',
'  -- Call OCI Document AI and parse the results.  ',
'  document_ai  ',
'    (p_file_name   => l_file_name,  ',
'     p_document_id => x_document_id);  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END process_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB IS  ',
'  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Call OCI Web Service to get the requested file.  ',
'  l_file_blob := apex_web_service.make_rest_request_b  ',
'   (p_url                  => UTL_URL.ESCAPE(p_request_url),  ',
'    p_http_method          => ''GET'',  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20112,''Unable to Get File.'');  ',
'  END IF;  ',
'    ',
'  RETURN l_file_blob;  ',
'    ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END get_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_document IS  ',
'    SELECT mime_type  ',
'    ,      object_store_url  ',
'    FROM   cndemo_document_ai_docs  ',
'    WHERE  document_id = x_document_id;  ',
'  ',
'  lr_document           cr_document%ROWTYPE;  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the OCI URL and Mimetytpe of the receipt file.  ',
'  OPEN  cr_document;  ',
'  FETCH cr_document INTO lr_document;  ',
'  CLOSE cr_document;  ',
'  ',
'  -- Get the file BLOB from OCI Object Storage.  ',
'  l_file_blob := get_file (p_request_url => lr_document.object_store_url);  ',
'  ',
'  -- Output the file so it shows in APEX.  ',
'  owa_util.mime_header(lr_document.mime_type,false);  ',
'  htp.p(''Content-Length: '' || dbms_lob.getlength(l_file_blob));   ',
'  owa_util.http_header_close;    ',
'  wpg_docload.download_file(l_file_blob);  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END render_document;  ',
'  ',
'   ',
'  ',
'--BEGIN ',
'  --initialize; ',
'END;',
'/',
'create or replace package body mtl_auth_pkg  ',
'as  ',
'  ',
'/**  ',
'* Constants  ',
'*/  ',
'  ',
'  ',
'c_from_email constant varchar2(100) := ''no-reply@my.email'';  ',
'c_website    constant varchar2(100) := ''my site'';  ',
'c_hostname   constant varchar2(100) := ''apex.oracle.com/pls/apex/'';  ',
' ',
'/**  Log in the application   ',
' */  ',
'function custom_authenticate  ',
'  (  ',
'    p_username in varchar2,  ',
'    p_password in varchar2  ',
'  )  ',
'  return boolean  ',
'is  ',
'  l_password        varchar2(100) ;  ',
'  l_stored_password varchar2(100) ;  ',
'  l_boolean         boolean;  ',
'begin  ',
'  -- First, check to see if the user is in the user table and look up their password  ',
'  select password  ',
'    into l_stored_password  ',
'    from mtl_user  ',
'   where upper(email) = upper(p_username);  ',
'  -- hash the password the person entered  ',
'   select standard_hash(p_password, ''MD5'') into l_password from dual; ',
'   -- select standard_hash(''Welcome1234'', ''MD5'') as pwd from dual; ',
'   -- FB93144A6A2839461D86974D5CE69D8A for Welcome1234',
'  -- Finally, we compare them to see if they are the same and return either TRUE or FALSE  ',
' if l_password = l_stored_password then  ',
'    return true;  ',
'  else  ',
'    return false;  ',
'  end if;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end custom_authenticate;   ',
' ',
' ',
'/**  Register  ',
'*/  ',
'procedure create_account(  ',
'    p_email    in varchar2,  ',
'    p_password in varchar2,',
'    p_answer in varchar2)  ',
'is  ',
'  l_message varchar2(4000) ;  ',
'  l_password raw(64) ;  ',
'  l_user_id number;  ',
'  l_url  varchar2(1000) ;  ',
'begin  ',
'  apex_debug.message(p_message => ''Begin create_site_account'', p_level => 3);  ',
'  ',
' -- l_password := utl_raw.cast_to_raw(DBMS_RANDOM.string(''x'',10));  ',
' select standard_hash(p_password, ''MD5'') into l_password from dual; ',
'  ',
'  apex_debug.message(p_message => ''verify email exists'', p_level => 3) ;  ',
'  ',
'  begin  ',
'    select password  ',
'      into l_password  ',
'      from mtl_user  ',
'     where upper(email) = upper(p_email) ;  ',
'    l_message       := l_message || ''Email address already registered.'';  ',
'  ',
'  exception  ',
'  when no_data_found then  ',
'    apex_debug.message(p_message => ''email doesn''''t exist yet - good to go'', p_level => 3) ;  ',
'  end;  ',
'  ',
'  if l_message is null then  ',
'    apex_debug.message(p_message => ''password ok'', p_level => 3) ;  ',
'   ',
'    apex_debug.message(p_message => ''insert record'', p_level => 3) ;  ',
'    /* insert return user_id *****/  ',
'    insert into mtl_user (email, password, role_id, answer)  ',
'    values (p_email, l_password,2, p_answer)   ',
'    returning USER_ID into l_user_id;  ',
'    ',
'    -- create refer url    ',
'    l_url := c_hostname||''f?p=''||v(''APP_ID'')||'':9999:0::::p9999_refer_user_id:'' || l_user_id ; ',
'     ',
'    apex_debug.message(p_message => ''update record'', p_level => 3) ;  ',
'     ',
'    update mtl_user ',
'    set refer_url=l_url ',
'    where user_id=l_user_id; ',
' ',
'  else  ',
'    raise_application_error( -20001, l_message) ;  ',
'  end if;  ',
'    ',
' -- apex_authentication.post_login(p_username => p_email, p_password => p_password);  ',
'  ',
'  -- no activation email  ',
'   ',
'  --  :refer_user_id := 1; ',
'  ',
'  apex_debug.message(p_message => ''End create_site_account'', p_level => 3) ;  ',
'end create_account;  ',
'  ',
'/**  ',
'*/  ',
'procedure post_authenticate(  ',
'    p_username in varchar2,  ',
'    out_user_id out number,  ',
'    out_time_zone out varchar2  ',
')  ',
'is  ',
'  l_id         number;  ',
'  l_first_name varchar2(100) ;  ',
'begin  ',
'  select USER_ID  ',
'    into l_id  ',
'    from mtl_user  ',
'   where upper(email)    = upper(p_username);  ',
'  out_user_id        := l_id;  ',
'  ',
'end post_authenticate;  ',
'  ',
'  ',
'/**  ',
'*/  ',
'procedure request_reset_password(  ',
'    p_email in varchar2)  ',
'is  ',
'  l_id                number;  ',
'  l_verification_code varchar2(100);  ',
'  l_url               varchar2(200);  ',
'begin  ',
'  -- First, check to see if the user is in the user table  ',
'  select USER_ID  ',
'    into l_id  ',
'    from mtl_user  ',
'   where upper(email)    = upper(p_email);  ',
'  ',
'  dbms_random.initialize(to_char(sysdate, ''YYMMDDDSS'')) ;  ',
'  l_verification_code := dbms_random.string(''A'', 20);  ',
'  ',
'  l_url := apex_util.prepare_url(p_url => c_hostname||''f?p=''||v(''APP_ID'')||'':31:0::::P31_USER_ID,P31_VC:'' || l_id || '','' || l_verification_code, p_checksum_type => 1);  ',
'    ',
'  update mtl_user  ',
'    set verification_code = ''RESET_'' || l_verification_code  ',
'  where user_id = l_id;  ',
'  ',
'  mail_reset_password(p_email => p_email, p_url => l_url);  ',
'  ',
'exception  ',
'when no_data_found then  ',
'  raise_application_error( - 20001, ''Email address not registered.'') ;  ',
'end request_reset_password ;  ',
'',
' ----------------- New module forgot password -----------------------',
'function forgot_password(',
'    p_email IN VARCHAR2,',
'    p_answer IN VARCHAR2)',
'RETURN VARCHAR2',
'IS',
'    l_ret_msg VARCHAR2(400);  -- added size to the variable',
'    l_id number:= 0;',
'    l_exists NUMBER;',
'    l_random_password VARCHAR2(10);',
'    l_chars VARCHAR2(62) := ''ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'';',
'    l_hashed_password varchar2(100) ; ',
'BEGIN',
'    l_ret_msg := ''HI there''; ',
'    -- select u.USER_ID  ',
'    -- into l_id  ',
'    -- from mtl_user u  ',
'    -- where u.email = p_email AND u.answer = p_answer;  ',
'    -- Htp.p(''l_id is ''||l_id);',
'    -- exception  ',
'    -- when no_data_found then  ',
'    -- l_ret_msg := ''User not found''; ',
'    -- raise_application_error( - 20001, ''User not found'') ;  ',
'',
'    SELECT CASE',
'           WHEN EXISTS ( SELECT USER_ID FROM mtl_user WHERE upper(email) = upper(p_email) AND upper(answer) = upper(p_answer) ) THEN 1',
'           ELSE 0',
'         END',
'   INTO l_exists',
'   FROM DUAL;',
'',
'   IF l_exists = 1 THEN',
'        FOR i IN 1..10 LOOP',
'         l_random_password := l_random_password || SUBSTR(l_chars, DBMS_RANDOM.VALUE(1, LENGTH(l_chars)), 1);',
'      END LOOP;',
'      --- lets make hash of this password',
'      select standard_hash(l_random_password, ''MD5'') into l_hashed_password from dual; ',
'      -- update password in DB',
'   '))
);
wwv_flow_imp_shared.append_to_install_script(
 p_id=>wwv_flow_imp.id(316173795473415)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'   update mtl_user   set password = l_hashed_password where upper(email) = upper(p_email); ',
'',
'      l_ret_msg := ''Your new password is ''||l_random_password||'' please login and change your password'';',
'',
'    DBMS_OUTPUT.PUT_LINE(''Record exists l_random_password ''||l_random_password);',
'',
'  ELSE',
'    DBMS_OUTPUT.PUT_LINE(''Record does not exist'');',
'    l_ret_msg :=  ''Sorry, We are unable to find your profile, please create a new login profile from the login page '';',
'    --or your answer does not match our records',
'  END IF;',
'',
'    ',
'return l_ret_msg;',
'END forgot_password;',
'',
'-- declare',
'-- l_ret varchar2(100);',
'-- begin',
'--     l_ret := MTL_AUTH_PKG.forgot_password(''a@a.com'',''red'' );',
'--     Htp.p(l_ret);',
'-- end;',
'',
'   ----------------- New module forgot password -----------------------',
'  ',
' /**  ',
'* Reset password email  ',
'*/  ',
'procedure mail_reset_password(  ',
'  p_email    in varchar2,  ',
'  p_url      in varchar2)  ',
'',
'is  ',
'  l_body     clob;    ',
'begin  ',
'  apex_debug.message(p_message => ''Reset password demo account'', p_level => 3) ;    ',
'  l_body := ''<p>Hi,</p>  ',
'             <p>We received a request to reset your password in the training app.</p>  ',
'             <p><a href="''||p_url||''">Reset Now.</a></p>  ',
'             <p>If you did not request this, you can simply ignore this email.</p>  ',
'             <p>Kind regards,<br/>  ',
'             The Training Team</p>'';  ',
'  ',
'  apex_mail.send (  ',
'    p_to        => p_email,  ',
'    p_from      => c_from_email,  ',
'    p_body      => l_body,  ',
'    p_body_html => l_body,  ',
'    p_subj      => ''Reset password demo account'');  ',
'  ',
'  apex_mail.push_queue;      ',
'  ',
'exception  ',
'when others   ',
'then  ',
'  raise_application_error( - 20002, ''Issue sending reset password email.'') ;  ',
'end mail_reset_password;  ',
' ',
' ',
'/** Reset Password ',
'Hard Reset :  select standard_hash(''Welcome123456#'', ''MD5'') as pwd from dual; ',
'*/  ',
'procedure reset_password(  ',
'    p_id       in number,  ',
'    p_password in varchar2)  ',
'is  ',
'  l_username        varchar2(100) ;  ',
'  l_hashed_password varchar2(100) ;  ',
'begin  ',
'  select email  ',
'    into l_username  ',
'    from mtl_user  ',
'   where USER_ID = p_id;  ',
'  ',
'  select standard_hash(p_password, ''MD5'') into l_hashed_password from dual; ',
'  ',
'  update mtl_user  ',
'    set password = l_hashed_password,  ',
'        verification_code = null  ',
'  where USER_ID = p_id;  ',
'end reset_password;  ',
' ',
'/** Check the verification code ',
'*/  ',
'function verify_reset_password(  ',
'    p_id in number,  ',
'    p_verification_code in varchar2)  ',
'  return number  ',
'is  ',
'  l_id number;  ',
'begin  ',
'  begin ',
'  select u.USER_ID  ',
'    into l_id  ',
'    from mtl_user u  ',
'   where u.verification_code = ''RESET_''||p_verification_code  ',
'     and u.USER_ID = p_id;  ',
'  ',
'  return l_id;  ',
'exception  ',
'  when no_data_found  ',
'  then  ',
'    raise_application_error( - 20001, ''Invalid password request url.'') ;  ',
'    l_id:=0; ',
'    return 0;  ',
' end; ',
' return  l_id; ',
'end verify_reset_password ;  ',
'  ',
'  ',
' ',
'  ',
'  ',
'/** check the user is the administrator ',
'*/  ',
'function authz_administrator(  ',
'    p_username in varchar2)  ',
'  return boolean  ',
'is  ',
'  l_is_admin varchar2(1) ;  ',
'begin  ',
'  select ''Y''  ',
'    into l_is_admin  ',
'    from mtl_user a  ',
'   where upper(a.email) = upper(p_username)  ',
'     and a.role_id = 1;  ',
'  --  ',
'  return true;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end authz_administrator;  ',
'  ',
'  ',
'/** check the username is the account username ',
'*/  ',
'function authz_user(  ',
'    p_username in varchar2)  ',
'  return boolean  ',
'is  ',
'  l_is_user varchar2(1) ;  ',
'begin  ',
'  select ''Y''  ',
'    into l_is_user  ',
'    from mtl_user a  ',
'   where upper(a.email) = upper(p_username)  ',
'     and a.role_id in (1,2);  ',
'  --  ',
'  return true;  ',
'exception  ',
'when no_data_found then  ',
'  return false;  ',
'end authz_user;  ',
'  ',
'end mtl_auth_pkg;',
'/',
'create or replace PACKAGE BODY SENTIMENTAL_AI_PK   ',
'IS  ',
'-------------------------------------------------------------------------------- ',
'---------------Initial Method------------------------------- ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  l_object_store_url    VARCHAR2(1000);  ',
'  l_file_name           VARCHAR2(100);  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get file and upload to OCI Object Storage.  ',
'  upload_file  ',
'   (p_apex_file_name   => p_apex_file_name,   ',
'    x_file_name        => l_file_name,  ',
'    x_object_store_url => l_object_store_url,  ',
'    x_document_id      => x_document_id);  ',
'  ',
'  -- Call OCI Document AI and parse the results.  ',
'    ',
'   sentiment_ai  ',
'     (p_file_name   => l_file_name,  ',
'     p_document_id => x_document_id);  ',
'       ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END process_file;  ',
'--------------------------------------------------------------------------------  ',
'-----------Get file and upload to OCI Object Storage-----------------------------  ',
'PROCEDURE upload_file  ',
'  (p_apex_file_name    IN VARCHAR2,  ',
'   x_file_name        OUT VARCHAR2,  ',
'   x_object_store_url OUT VARCHAR2,  ',
'   x_document_id      OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_file_info IS  ',
'    SELECT filename  ',
'    ,      blob_content  ',
'    ,      mime_type  ',
'    FROM   apex_application_temp_files  ',
'    WHERE  name = p_apex_file_name;  ',
'  ',
'  lr_file_info          cr_file_info%ROWTYPE;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the File BLOB Content and File Name uploaded from APEX.  ',
'  OPEN  cr_file_info;  ',
'  FETCH cr_file_info INTO lr_file_info;  ',
'  CLOSE cr_file_info;  ',
'    ',
'  x_file_name := lr_file_info.filename;  ',
'    ',
'  -- Post file to OCI Object Store.  ',
'  put_file  ',
'   (p_mime_type        => lr_file_info.mime_type,  ',
'    p_file_blob        => lr_file_info.blob_content,  ',
'    p_file_name        => lr_file_info.filename,  ',
'    x_object_store_url => x_object_store_url);  ',
'  ',
'  -- Create Document Record  ',
'  INSERT INTO cndemo_document_ai_docs (file_name, mime_type, object_store_url)  ',
'  VALUES (lr_file_info.filename, lr_file_info.mime_type, x_object_store_url)   ',
'  RETURNING document_id INTO x_document_id;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END upload_file;  ',
'--------------------------------------------------------------------------------  ',
'-----------Get file and upload to OCI Object Storage-----------------------------   ',
'PROCEDURE put_file  ',
' (p_mime_type         IN VARCHAR2,  ',
'  p_file_blob         IN BLOB,  ',
'  p_file_name         IN VARCHAR2,  ',
'  x_object_store_url OUT VARCHAR2) IS  ',
'  ',
'  l_response            CLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Build the full Object Storage URL.  ',
'  x_object_store_url := GC_OCI_OBJ_STORE_BASE_URL || p_file_name;  ',
'  ',
'  -- Set Mime Type of the file in the Request Header.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := p_mime_type;  ',
'  ',
'  -- Call Web Service to PUT file in OCI.  ',
'  l_response := apex_web_service.make_rest_request  ',
'   (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,  ',
'    --p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'  END IF;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END put_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
' PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_document IS  ',
'    SELECT mime_type  ',
'    ,      object_store_url  ',
'    FROM   cndemo_document_ai_docs  ',
'    WHERE  document_id = x_document_id;  ',
'  ',
'  lr_document           cr_document%ROWTYPE;  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the OCI URL and Mimetytpe of the receipt file.  ',
'  OPEN  cr_document;  ',
'  FETCH cr_document INTO lr_document;  ',
'  CLOSE cr_document;  ',
'  ',
'  -- Get the file BLOB from OCI Object Storage.  ',
'  l_file_blob := get_file (p_request_url => lr_document.object_store_url);  ',
'  ',
'  -- Output the file so it shows in APEX.  ',
'  owa_util.mime_header(lr_document.mime_type,false);  ',
'  htp.p(''Content-Length: '' || dbms_lob.getlength(l_file_blob));   ',
'  owa_util.http_header_close;    ',
'  wpg_docload.download_file(l_file_blob);  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END render_document;   ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB IS  ',
'  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Call OCI Web Service to get the requested file.  ',
'  l_file_blob := apex_web_service.make_rest_request_b  ',
'   (p_url                  => UTL_URL.ESCAPE(p_request_url),  ',
'    p_http_method          => ''GET'',  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20112,''Unable to Get File.'');  ',
'  END IF;  ',
'    ',
'  RETURN l_file_blob;  ',
'    ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END get_file;  ',
' ',
'--------------------------------------------------------------------------------  ',
'  ',
'PROCEDURE sentiment_ai  ',
'  (p_file_name   IN VARCHAR2,  ',
'   p_document_id IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_document_data (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$''  ',
'             COLUMNS (label1val      VARCHAR2(200)  PATH ''$.id'' )) jt;  ',
' ',
'  CURSOR C1 IS  ',
'        select file_name from CNDEMO_DOCUMENT_AI_DOCS where document_id = p_document_id; ',
'    ',
'  l_request_json        VARCHAR2(32000);  ',
'  l_response_json       CLOB;  ',
'  lr_document_data      cr_document_data%ROWTYPE;  ',
'  v_id varchar(100); ',
'  v_filename varchar(100); ',
'  l_obj_name varchar2(500); ',
'  l_docjob_json_url varchar2(4000) ; ',
'  l_json                CLOB; ',
'    cur sys_refcursor; ',
'    v_request_json        VARCHAR2(32000);   ',
'    v_sentimental_api_url varchar2(200) := ''https://language.aiservice.us-phoenix-1.oci.oraclecloud.com/20210101/actions/batchDetectLanguageSentiments?level=SENTENCE&level=SENTENCE''; ',
'    v_response_json       CLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Replace the uploaded filename in the JSON payload to be sent to Document AI.  ',
'  l_request_json := REPLACE(GC_OCY_DOC_AI_PAYLOAD, ''#FILE_NAME#'', p_file_name);  ',
'  ',
'  -- Set Content-Type in the Request Header. This is required by the Document AI REST Service.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := ''application/json'';  ',
'  ',
'  -- Call the Document AI analyzeDocument REST Web Service.  ',
'        l_response_json := apex_web_service.make_rest_request  ',
'        (p_url                  => GC_OCI_DOC_AI_URL,  ',
'        p_http_method          => ''POST'',  ',
'        p_body                 => l_request_json,  ',
'        p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
'    --p_credential_static_id => ''APEX_OCI_BLOG_CREDENTIAL'');  ',
' ',
'       apex_json.parse (l_response_json); ',
'       v_id := apex_json.get_varchar2 (''id''); ',
' ',
'       For row_1 In C1 Loop ',
'               v_filename := row_1.file_name;  ',
'        End Loop; ',
' ',
'        l_obj_name   := ''KV/''||v_id||''/replace-this_replace-this/results/KV/''||v_filename||''.json''; ',
'        l_docjob_json_url   := ''https://objectstorage.us-phoenix-1.oraclecloud.com/n/replace-this/b/replace-this/o/''||l_obj_name; ',
' ',
' ',
'         l_json := apex_web_service.make_rest_request ',
'             (p_url => UTL_URL.ESCAPE(l_docjob_json_url), ',
'              p_http_method => ''GET'', ',
'              p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
' ',
'        open cur for  ',
'            SELECT  jt.*  , ''en''  "languageCode"     ',
'            FROM JSON_TABLE(l_json, ''$.pages[0].tables[0].bodyRows[*]''  ',
'                     COLUMNS ( ',
'                             "key"   VARCHAR2(200)  PATH ''$.cells[0].text'' ,   ',
'                             "text"      VARCHAR2(200)  PATH ''$.cells[1].text''   ',
'                     ) ) jt;   ',
'                    ',
' ',
'          apex_json.initialize_clob_output ( p_indent => 1 ); ',
' ',
'          apex_json.open_object; ',
'          apex_json.write ( ''documents'', cur ); ',
'          apex_json.close_object; ',
' ',
'          v_request_json := APEX_JSON.get_clob_output; ',
'  ',
'          apex_web_service.g_request_headers.DELETE;  ',
'          apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'          apex_web_service.g_request_headers(1).value := ''application/json'';  ',
' ',
'          v_response_json := apex_web_service.make_rest_request  ',
'           (p_url                  => v_sentimental_api_url,  ',
'            p_http_method          => ''POST'',  ',
'            p_body                 => v_request_json,  ',
'            p_credential_static_id => GC_WC_CREDENTIAL_ID); ',
' ',
' ',
'        OPEN  cr_document_data (cp_json => l_response_json);  ',
'        FETCH cr_document_data INTO lr_document_data;  ',
'        CLOSE cr_document_data;  ',
' ',
'        UPDATE cndemo_document_ai_docs  ',
'        SET    doc_ai_json         = l_response_json  , label1 = v_id , label2 = v_filename, AISPEECHTRANS_JOBID = l_docjob_json_url, DOC_JSON = v_request_json, SENTIMENTS = v_response_json  ',
'        WHERE  document_id         = p_document_id;   ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END sentiment_ai;  ',
'   ',
'  ',
'END;',
'/',
'create or replace PACKAGE BODY SPEECH_AI_PK   ',
'IS  ',
'  ',
'PROCEDURE initialize (v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE) AS ',
'-- ----------------------------------------------------------------- ',
'        BEGIN ',
'          SELECT GC_OCI_OBJ_STORE_BASE_URL, ',
'                 GC_OCI_DOC_AI_URL, ',
'                 GC_OCI_DOC_AI_TIMEOUT_SECS, ',
'                 GC_WC_CREDENTIAL_ID, ',
'                 GC_OCI_REQ_AI_PAYLOAD ',
'          INTO   v_GC_OCI_OBJ_STORE_BASE_URL, ',
'                 v_GC_OCI_DOC_AI_URL, ',
'                 v_GC_OCI_DOC_AI_TIMEOUT_SECS, ',
'                 v_GC_WC_CREDENTIAL_ID, ',
'                 v_GC_OCI_REQ_AI_PAYLOAD ',
'          FROM   MACHINE_LEARNING_CONFIGS WHERE ID = v_id; ',
'        END initialize; ',
'  ',
'--------------------------------------------------------------------------------  ',
'-------------------------------------------------------------------------------- ',
'PROCEDURE put_file  ',
' (p_mime_type         IN VARCHAR2,  ',
'  p_file_blob         IN BLOB,  ',
'  p_file_name         IN VARCHAR2,  ',
'  x_object_store_url OUT VARCHAR2) IS  ',
'  ',
'  l_response            CLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Build the full Object Storage URL.  ',
'  --x_object_store_url := GC_OCI_OBJ_STORE_BASE_URL || p_file_name; ',
'  x_object_store_url := SPEECH_AI_PK.v_GC_OCI_OBJ_STORE_BASE_URL || p_file_name;   ',
'  ',
'  -- Set Mime Type of the file in the Request Header.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := p_mime_type;  ',
'  ',
'  -- Call Web Service to PUT file in OCI.  ',
'  l_response := apex_web_service.make_rest_request  ',
'   (p_url                  => UTL_URL.ESCAPE(x_object_store_url),  ',
'    p_http_method          => ''PUT'',  ',
'    p_body_blob            => p_file_blob,  ',
'    --p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20111,''Unable to Upload File to OCI.'');  ',
'  END IF;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END put_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'   ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE upload_file  ',
'  (p_apex_file_name    IN VARCHAR2,  ',
'   x_file_name        OUT VARCHAR2,  ',
'   x_object_store_url OUT VARCHAR2,  ',
'   x_document_id      OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_file_info IS  ',
'    SELECT filename  ',
'    ,      blob_content  ',
'    ,      mime_type  ',
'    FROM   apex_application_temp_files  ',
'    WHERE  name = p_apex_file_name;  ',
'  ',
'  lr_file_info          cr_file_info%ROWTYPE;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the File BLOB Content and File Name uploaded from APEX.  ',
'  OPEN  cr_file_info;  ',
'  FETCH cr_file_info INTO lr_file_info;  ',
'  CLOSE cr_file_info;  ',
'    ',
'  x_file_name := lr_file_info.filename;  ',
'    ',
'  -- Post file to OCI Object Store.  ',
'  put_file  ',
'   (p_mime_type        => lr_file_info.mime_type,  ',
'    p_file_blob        => lr_file_info.blob_content,  ',
'    p_file_name        => lr_file_info.filename,  ',
'    x_object_store_url => x_object_store_url);  ',
'  ',
'  -- Create Document Record  ',
'  INSERT INTO cndemo_document_ai_docs (file_name, mime_type, object_store_url)  ',
'  VALUES (lr_file_info.filename, lr_file_info.mime_type, x_object_store_url)   ',
'  RETURNING document_id INTO x_document_id;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END upload_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'-- PROCEDURE document_ai  ',
'PROCEDURE speech_ai  ',
'  (p_file_name   IN VARCHAR2,  ',
'   p_document_id IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'    CURSOR cr_document_data (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$''  ',
'             COLUMNS (AISPEECHTRANS_JOBID      VARCHAR2(1000)        PATH ''$.id'',  ',
'                      AISPEECH_PREFIX          VARCHAR2(1000)        PATH ''$.outputLocation.prefix''  )) jt;  ',
' ',
'  --/* ',
'  CURSOR cr_document_fields (cp_json IN CLOB) IS  ',
'    SELECT jt.*  ',
'    FROM   JSON_TABLE(cp_json, ''$.pages[*]''  ',
'             COLUMNS (page_number       NUMBER        PATH ''$.pageNumber'',  ',
'                      NESTED PATH ''$.documentFields[*]'' COLUMNS  ',
'                       (field_type_code VARCHAR2(50)   PATH ''$.fieldType'',  ',
'                        field_label     VARCHAR2(100)  PATH ''$.fieldLabel.name'',  ',
'                        label_score     NUMBER         PATH ''$.fieldLabel.confidence'',  ',
'                        field_value     VARCHAR2(1000) PATH ''$.fieldValue.value''  ',
'                        ))) jt  ',
'    WHERE  jt.field_type_code = ''KEY_VALUE'';  ',
'    --*/ ',
'  ',
'  l_request_json        VARCHAR2(32000);  ',
'  l_response_json       CLOB;  ',
'  lr_document_data      cr_document_data%ROWTYPE;  ',
'  ',
'BEGIN  ',
'   ',
'  l_request_json := REPLACE(v_GC_OCI_REQ_AI_PAYLOAD, ''#FILE_NAME#'', p_file_name); ',
'  ',
'  -- Set Content-Type in the Request Header. This is required by the Document AI REST Service.  ',
'  apex_web_service.g_request_headers.DELETE;  ',
'  apex_web_service.g_request_headers(1).name  := ''Content-Type'';  ',
'  apex_web_service.g_request_headers(1).value := ''application/json'';  ',
'  ',
'  -- Call the Document AI analyzeDocument REST Web Service.  ',
'  --v_GC_OCI_OBJ_STORE_BASE_URL ',
'  l_response_json := apex_web_service.make_rest_request  ',
'   (p_url                  => v_GC_OCI_DOC_AI_URL,  ',
'    p_http_method          => ''POST'',  ',
'    p_body                 => l_request_json,  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20112,''Unable to call OCI Document AI.'');  ',
'  END IF;  ',
'  ',
'  -- Get Document Level Data from the JSON response.  ',
'  OPEN  cr_document_data (cp_json => l_response_json);  ',
'  FETCH cr_document_data INTO lr_document_data;  ',
'  CLOSE cr_document_data;  ',
'  ',
'  -- Get Key Value Fields from JSON and populate table.  ',
'  FOR r_field IN cr_document_fields (cp_json => l_response_json) LOOP  ',
'    INSERT INTO cndemo_document_ai_fields (document_id,field_type_code,field_label,label_score,field_value)  ',
'    VALUES (p_document_id,r_field.field_type_code,r_field.field_label,r_field.label_score,r_field.field_value);  ',
'  END LOOP;  ',
'  ',
'  UPDATE cndemo_document_ai_docs  ',
'  SET    doc_ai_json         = l_response_json  ',
'  ,      AISPEECHTRANS_JOBID       = lr_document_data.AISPEECHTRANS_JOBID  ',
'  ,      AISPEECH_PREFIX      = lr_document_data.AISPEECH_PREFIX   ',
'  WHERE  document_id         = p_document_id;  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END speech_ai;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE process_file  ',
'  (p_apex_file_name  IN VARCHAR2,  ',
'   v_id IN MACHINE_LEARNING_CONFIGS.ID%TYPE, ',
'   x_document_id    OUT cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  l_object_store_url    VARCHAR2(1000);  ',
'  l_file_name           VARCHAR2(100);  ',
'  ',
'BEGIN  ',
'  initialize(v_id); ',
'  ',
'  -- Get file and upload to OCI Object Storage.  ',
'  upload_file  ',
'   (p_apex_file_name   => p_apex_file_name,   ',
'    x_file_name        => l_file_name,  ',
'    x_object_store_url => l_object_store_url,  ',
'    x_document_id      => x_document_id);  ',
'  ',
' ',
'  -- Call speech AI  ',
'  speech_ai  ',
'  (p_file_name   => l_file_name,  ',
'    p_document_id => x_document_id);  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END process_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'FUNCTION get_file (p_request_url IN VARCHAR2) RETURN BLOB IS  ',
'  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Call OCI Web Service to get the requested file.  ',
'  l_file_blob := apex_web_service.make_rest_request_b  ',
'   (p_url                  => UTL_URL.ESCAPE(p_request_url),  ',
'    p_http_method          => ''GET'',  ',
'    p_credential_static_id => GC_WC_CREDENTIAL_ID);  ',
'  ',
'  IF apex_web_service.g_status_code != 200 then  ',
'    raise_application_error(-20112,''Unable to Get File.'');  ',
'  END IF;  ',
'    ',
'  RETURN l_file_blob;  ',
'    ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END get_file;  ',
'  ',
'--------------------------------------------------------------------------------  ',
'--------------------------------------------------------------------------------  ',
'PROCEDURE render_document  ',
'  (x_document_id  IN cndemo_document_ai_docs.document_id%TYPE) IS  ',
'  ',
'  CURSOR cr_document IS  ',
'    SELECT mime_type  ',
'    ,      object_store_url  ',
'    FROM   cndemo_document_ai_docs  ',
'    WHERE  document_id = x_document_id;  ',
'  ',
'  lr_document           cr_document%ROWTYPE;  ',
'  l_file_blob           BLOB;  ',
'  ',
'BEGIN  ',
'  ',
'  -- Get the OCI URL and Mimetytpe of the receipt file.  ',
'  OPEN  cr_document;  ',
'  FETCH cr_document INTO lr_document;  ',
'  CLOSE cr_document;  ',
'  ',
'  -- Get the file BLOB from OCI Object Storage.  ',
'  l_file_blob := get_file (p_request_url => lr_document.object_store_url);  ',
'  ',
'  -- Output the file so it shows in APEX.  ',
'  owa_util.mime_header(lr_document.mime_type,false);  ',
'  htp.p(''Content-Length: '' || dbms_lob.getlength(l_file_blob));   ',
'  owa_util.http_header_close;    ',
'  wpg_docload.download_file(l_file_blob);  ',
'  ',
'EXCEPTION WHEN OTHERS THEN  ',
'  RAISE;  ',
'END render_document;  ',
'  ',
'    ',
'END; ',
'/',
'create or replace package body youtube_utils as ',
'',
'    gc_scope_prefix constant varchar2(31) := lower($$plsql_unit) || ''.'';',
'    g_key           constant varchar2(63) := apex_util.url_encode(''replace-this'');',
'    g_playlist_id   constant varchar2(63) := apex_util.url_encode(''replace-this'');',
'',
'',
'    procedure capture_stats',
'    is ',
'    --l_scope logger_logs.scope%type := gc_scope_prefix || ''capture_stats'';',
'    --l_params logger.tab_param;',
'',
'        procedure capture_list_of_videos',
'        is ',
'        begin',
'',
'            merge into yt_video a',
'            using (',
'                    with playlist as (',
'                        select d0.videoid , to_date(substr(d0.videopublishedat,1,10),''yyyy-mm-dd'') videopublishedat',
'                        from (',
'                        select apex_web_service.make_rest_request(',
'                            p_url         => ''https://www.replace-this.com/youtube/v3/playlistItems?key=''||g_key||''&playlistId=''||g_playlist_id||''&part=contentDetails&maxResults=50'', ',
'                            p_http_method => ''GET'' ) thejson',
'                            from dual',
'                        ) yt,',
'                            json_table(yt.thejson, ''$''',
'                            columns (',
'                                nested path ''$.items[*]''',
'                                columns (',
'                                    videoId          varchar(238) PATH ''$.contentDetails.videoId'',',
'                                    videoPublishedAt varchar(238) PATH ''$.contentDetails.videoPublishedAt''',
'                                    ))) d0',
'                    )',
'',
'                    select yt.videoid video_id, d2.title,  yt.videopublishedat video_published_at',
'                        from ',
'                        (select apex_web_service.make_rest_request(',
'                                p_url         => ''https://www.replace-this.com/youtube/v3/videos?key=''||g_key||''&part=localizations&id=''||apex_util.url_encode(p.videoid), ',
'                                p_http_method => ''GET'' ) thejson,',
'                                p.videoid, p.videoPublishedAt',
'                        from playlist p',
'                        ) yt,',
'                        json_table(replace(yt.thejson,''-'',''''), ''$''',
'                            columns (',
'                                nested path ''$.items.localizations.enCA''',
'                                columns (',
'                                    title   varchar2(540) path ''$.title''',
'                                    ))) d2',
'                    minus',
'                    select video_id, title, video_published_at',
'                    from yt_video',
'                ) b',
'            on (a.video_id = b.video_id)',
'            when matched then update set',
'                a.title              = b.title,',
'                a.video_published_at = b.video_published_at',
'            when not matched then',
'                insert (  video_id,   title,   video_published_at)',
'                values (b.video_id, b.title, b.video_published_at);',
'',
'            --logger.log(''. merged into yt_video :'', l_scope, to_char(sql%rowcount));',
'        end capture_list_of_videos;',
'',
'        procedure capture_the_stats',
'        is ',
'        l_log_id yt_log.id%type;',
'        begin',
'          insert into yt_log (name)',
'          values (to_char(sysdate,''YYYY-MM-DD HH24-MI-SS''))',
'          returning id into l_log_id;',
'          --logger.log(''. log_id:'', l_scope, to_char(l_log_id));',
'          ',
'          insert into yt_stats ',
'                (  log_id,  video_id,  view_count,  like_count,  comment_count)',
'          select l_log_id, z.videoid, z.viewcount, z.likecount, z.commentcount',
'          from (',
'          with playlist as (',
'                select d0.videoid, to_date(substr(d0.videopublishedat,1,10),''yyyy-mm-dd'') videopublishedat',
'                from (',
'                select apex_web_service.make_rest_request(',
'                    p_url         => ''https://www.replace-this.com/youtube/v3/playlistItems?key=''||g_key||''&playlistId=''||g_playlist_id||''&part=contentDetails&maxResults=50'', ',
'                    p_http_method => ''GET'' ) thejson',
'                    from dual',
'                ) yt,',
'                    json_table(yt.thejson, ''$''',
'                    columns (',
'                        nested path ''$.items[*]''',
'                        columns (',
'                            videoId          varchar(238) PATH ''$.contentDetails.videoId'',',
'                            videoPublishedAt varchar(238) PATH ''$.contentDetails.videoPublishedAt''',
'                            ))) d0',
'            )',
'',
'            select yt.videoid, d.viewcount, d.likecount, d.commentcount',
'                from (',
'                select apex_web_service.make_rest_request(',
'                        p_url         => ''https://www.replace-this.com/youtube/v3/videos?key=''||g_key||''&part=statistics&id=''||p.videoid, ',
'                        p_http_method => ''GET'' ) thejson,',
'                        p.videoid, p.videoPublishedAt',
'                from playlist p',
'                ) yt,',
'                json_table(yt.thejson, ''$''',
'                columns (',
'                    nested path ''$.items''',
'                    columns (',
'                        viewCount    number path ''$.statistics.viewCount'',',
'                        likeCount    number path ''$.statistics.likeCount'',',
'                        commentCount number path ''$.statistics.commentCount''',
'                        ))) d',
'            order by yt.videoPublishedAt',
'          ) z;',
'          --logger.log(''. inserted into yt_stats :'', l_scope, to_char(sql%rowcount));',
'',
'        end capture_the_stats;',
'',
'    begin',
'        --logger.log(''START'', l_scope, null, l_params);',
'',
'        capture_list_of_videos;',
'',
'        capture_the_stats;',
'',
'        --logger.log(''END'', l_scope);',
'    exception when others then ',
'        --logger.log_error(''Unhandled Exception'', l_scope, null, l_params); ',
'        raise;  ',
'    end capture_stats;',
'',
'end youtube_utils;',
'/',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
' '))
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(316069839473426)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'ADD_TO_CART'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(315897235473428)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'BASE64_TO_BLOB'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(315706869473429)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'BLOB_TO_BASE64'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(315476406473430)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'CARD2SPEECH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(315299686473431)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'CLOB_TO_BLOB'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(315033871473432)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'CUST_SQLGRAPH_JSON'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(314852366473432)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'GENERATE_QRY'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(314626280473433)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'GENERATE_TEXT_RESPONSE2'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(314480656473434)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'GETDATA'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(314293772473435)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'GET_BLOB'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(314050276473436)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'GET_EXTERNAL_IMAGE'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(313809744473437)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'MY_DASHBOARD'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(313686656473437)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'ORA_SQLGRAPH_TO_JSON'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(313422260473438)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'ORDER2SPEECH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(313262016473439)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'PIZZA_DASHBOARD_FUNCTION'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(313038161473440)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'RAG2SPEECH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(312815078473441)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'RAG_FUNCTION'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(312626536473442)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'RAG_FUNCTION_V2'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(312487913473443)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'SPEECH_SYNTHESIZESPEECH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(312234882473444)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'SPEECH_SYNTHESIZESPEECH_UPLOADFILE'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(312101809473445)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'TEXT2SPEECH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(311894702473446)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'VIEWBOOKINGDETAILS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(311633352473446)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'VIEWCHAT'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(311430324473447)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'FUNCTION'
,p_object_name=>'VIEWQUEUE'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(311307259473448)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'ANSWERS_I1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(311086357473449)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'ANSWERS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(310861376473450)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'AQ$_FUNDSTRANSFER_QUEUE_TABLE_I'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(310608777473451)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'AQ$_FUNDSTRANSFER_QUEUE_TABLE_T'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(310482253473451)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'AUDIO_T_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(310260488473452)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'BANK_CUSTOMERS_BENEFICIARIES_I1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(310024664473453)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'BANK_CUSTOMERS_BENEFICIARIES_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(309874915473454)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'CNDEMO_DOCUMENT_AI_DOCS_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(309621648473455)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'CNDEMO_DOCUMENT_AI_FIELDS_N1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(309410986473456)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'CNDEMO_DOCUMENT_AI_FIELDS_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(309275270473457)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'COMMON_ROLE_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(309059581473457)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'COMMON_USER_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(308828429473458)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'CRM_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(308689791473459)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'DELIVERY_MODE_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(308492342473460)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'DEVREL_MAIN_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(308279050473461)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'DEVREL_MONTHLYMETRICS_I1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(308018321473462)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'DEVREL_MONTHLYMETRICS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(307885659473463)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_COUNTRY_C_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(307621136473463)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_DEPT_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(307507766473464)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_EMP_EMAIL_UK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(307294870473465)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_EMP_EMP_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(307086175473466)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_GRAPH_ACTION_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(306858746473467)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_JOB_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(306682313473468)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_LOC_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(306475135473468)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'EBA_GRAPHVIZ_REG_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(306270872473469)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'FD_BANK_NAMES_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(306080140473470)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'FD_TRANSACTIONS_LOG_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(305892352473471)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'HLTERM_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(305636795473472)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'INS_TEST2_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(305421721473473)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MACHINE_LEARNING_C_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(305270520473473)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MSGLOGS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(305067326473474)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MTL_CITY_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(304858361473475)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MTL_ROLE_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(304608996473476)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MTL_USER_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(304506934473477)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'MYAUDIODATA_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(304215479473478)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PASSENGER_LIST_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(304085404473478)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PIZZASHOPS_IDX'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(303827071473479)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PIZZA_ORDER_DETAILS_I1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(303638511473480)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PIZZA_ORDER_DETAILS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(303442024473481)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PIZZA_ORDER_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(303256865473482)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PK_ITEM_NO'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(303072107473483)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'PK_SHOP_ID'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(302888660473484)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'RELATED_LABELS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(302707532473484)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'INDEX'
,p_object_name=>'STUDENTS_ID_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(302417552473485)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'ANOMALYDETECT_AI_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(302222617473486)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'BANK_PKG'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(302092883473487)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'COM_COMMON_AUTH_PKG'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(301811692473488)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'DBMS_GVT'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(301653290473488)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'IMAGE_AI_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(301601503473489)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'MTL_AUTH_PKG'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(301320221473490)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'SENTIMENTAL_AI_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(301145043473491)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'SPEECH_AI_PK'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(300998601473492)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PACKAGE'
,p_object_name=>'YOUTUBE_UTILS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(300787548473492)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'CLEAN_JOURNAL_PARTITION'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(300512432473493)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_BANK_TXS_INSERTS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(300327568473494)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_TX_ANM_INSERTS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(300200144473495)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_TX_HISTORICDATA_INSERTS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(299909621473496)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_TX_INSERTS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(299807430473497)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_TX_INSERTS_ML'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(299554150473497)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'FD_TX_PROC'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(299341677473498)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'INSERT_MY_TABLE_ROW'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(299133682473499)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'INS_TEST2_PROC'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(298911796473500)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'LOAD_BINARY_FROM_URL'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(298803482473501)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'PIZZA_CART_INSERTS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(298540507473502)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'PIZZA_DASHBOARD_PROCEDURE'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(298328427473503)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'SHOW_DASH'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(298168924473503)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'TEST_TBL1_PROC'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(297946641473505)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'PROCEDURE'
,p_object_name=>'UPDATE_BANK_STATUS_PROC'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(297767695473505)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SEQUENCE'
,p_object_name=>'COMMON_USER_SEQ'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(297593488473506)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SEQUENCE'
,p_object_name=>'DEPT_SEQ'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(297315808473507)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SEQUENCE'
,p_object_name=>'EBA_GRAPHVIZ_GRAPH_ACTION_SEQ'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(297194317473508)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SEQUENCE'
,p_object_name=>'EMP_SEQ'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(296990082473509)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SYNONYM'
,p_object_name=>'pizzaorders_pizzaorderdetails_jdv'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(296711267473510)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SYNONYM'
,p_object_name=>'shop_items_dv'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(296523004473511)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'SYNONYM'
,p_object_name=>'shop_items_dv2'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(296309880473512)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'BI_COMMON_USERS'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(296203074473513)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'CNDEMO_DOCUMENT_AI_DOCS_BIU'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(295911210473513)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'CNDEMO_DOCUMENT_AI_FIELDS_BIU'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(295771559473514)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'DEPT_TRG1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(295602784473515)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'EBA_GRAPHVIZ_GRAPH_ACTION_TRIGGER'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(295314716473516)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'EMP_TRG1'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(295108859473517)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'PASSENGER_LIST_TRG'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(294964985473517)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'RETAIL_SHOPPING_FD_TRG'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(294805998473518)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TRIGGER'
,p_object_name=>'TRG_MYBOOKS_VECTOR_STORE_COMPOUND'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(294557220473519)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TYPE'
,p_object_name=>'BANKTRANSFER_Q_PAYLOAD'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(294374663473520)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TYPE'
,p_object_name=>'ORDERS_Q_PAYLOAD'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(294135750473521)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TYPE'
,p_object_name=>'PASSENGER_Q_PAYLOAD'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(293938021473522)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'AQ$FUNDSTRANSFER_QUEUE_TABLE'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(293787457473523)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'AQ$_FUNDSTRANSFER_QUEUE_TABLE_F'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(293601063473524)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'DEVREL_MONTHLY_COUNT_DIFF'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(293312859473525)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'PIZZAORDERS_PIZZAORDERDETAILS_JDV'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(293112438473525)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'PIZZA_ORDERS_DV'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(292916889473526)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'RETAIL_SHOPPING_FD_VIEW'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(292717162473527)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'SHOP_ITEMS_DV'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(292573872473528)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'SHOP_ITEMS_DV2'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(292344538473529)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'TRANSACTIONS_VIEW'
);
wwv_flow_imp_shared.create_install_object(
 p_id=>wwv_flow_imp.id(292198042473529)
,p_script_id=>wwv_flow_imp.id(316173795473415)
,p_object_owner=>'#OWNER#'
,p_object_type=>'VIEW'
,p_object_name=>'USER_QUEUE_SUBSCRIBERS_VIEW'
);
wwv_flow_imp.component_end;
end;
/
