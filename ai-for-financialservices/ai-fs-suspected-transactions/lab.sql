        ```sql 
        <copy> 
        --- Your code
        </copy>
        ``` 

        ---------

        ```sql 
        <copy> 
        CREATE TABLE "FD_TX_HISTORIC_DATA" 
        (	
                "ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 
                INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
                "TX_TIMESTAMP" TIMESTAMP (9) WITH TIME ZONE, 
                "TOTAL_PAY" NUMBER, 
                "IS_ANOMALY" VARCHAR2(50), 
                "INV_NO" VARCHAR2(50), 
                "CATEGORY" VARCHAR2(50), 
                "CUST_ID" NUMBER, 
                "CREDIT_CARD_NO" NUMBER, 
                "TRANS_STATUS" VARCHAR2(20), 
                "TRANSACTION_STATUS" VARCHAR2(50), 
                "MERCHANT_ID" NUMBER, 
                "MERCHANT_CITY" VARCHAR2(100), 
                "MERCHANT_REGION" VARCHAR2(255), 
                "MERCHANT_STATE" VARCHAR2(100), 
                "MERCHANT_PLACE" VARCHAR2(100), 
                "LONGITUDE" NUMBER, 
                "LATITUDE" NUMBER, 
                "MERCHANT_PLACE_ID" NUMBER, 
                "CUSTOMER_FULLNAME" VARCHAR2(100), 
                "MERCHANT_FULLNAME" VARCHAR2(100), 
                "MALL" VARCHAR2(50), 
                PRIMARY KEY ("ID")
                USING INDEX  ENABLE
        ) ;  
        </copy>
        ``` 

select ID,
       to_char(TX_TIMESTAMP,'dd/mm/yyyy hh24:mi:ss') TX_TIMESTAMP,
       '$ '||TOTAL_PAY as TOTAL_PAY,
       IS_ANOMALY,
       INV_NO,
       CATEGORY,
       CUST_ID,
       CREDIT_CARD_NO, 
       MERCHANT_ID,
       MERCHANT_CITY,
       MERCHANT_REGION,
       MERCHANT_STATE,
       MERCHANT_PLACE, 
       MERCHANT_PLACE_ID,
       CUSTOMER_FULLNAME,
       MERCHANT_FULLNAME,
       MALL
  from FD_TX_HISTORIC_DATA   order by IS_ANOMALY
 
-----------------
declare   
 
begin
  
      FD_TX_ANM_INSERTS ( );
   
end;
----------------------- FD_TX_ANM_INSERTS -----------

create or replace PROCEDURE FD_TX_ANM_INSERTS  
AS 
v_total_pay FD_TX_HISTORIC_DATA.TOTAL_PAY%TYPE;
v_time_diff number := 1; 
-- Oracle APEX Web Credentials
GC_WC_CREDENTIAL_ID        CONSTANT VARCHAR2(50)   := 'replace-this'; 
l_response_json CLOB;
json_input_str3 varchar2(32000) ;
l_api_url varchar2(1000) := 'https://anomalydetection.aiservice.us-phoenix-1.oci.oraclecloud.com/20210101/actions/detectAnomalies';
l_body varchar2(32000) ; 
v_INV_NO FD_TX_HISTORIC_DATA.INV_NO%TYPE;
v_TX_TIMESTAMP FD_TX_HISTORIC_DATA.TX_TIMESTAMP%TYPE; 
v_CATEGORY FD_TX_HISTORIC_DATA.CATEGORY%TYPE; 
v_CUST_ID FD_TX_HISTORIC_DATA.CUST_ID%TYPE;
v_MERCHANT_ID FD_TX_HISTORIC_DATA.MERCHANT_ID%TYPE;
v_CUSTOMER_FULLNAME FD_TX_HISTORIC_DATA.CUSTOMER_FULLNAME%TYPE; 
v_MERCHANT_FULLNAME FD_TX_HISTORIC_DATA.MERCHANT_FULLNAME%TYPE;  
v_MERCHANT_PLACE_ID   FD_TX_HISTORIC_DATA.MERCHANT_PLACE_ID%TYPE; 
v_MERCHANT_PLACE   FD_TX_HISTORIC_DATA.MERCHANT_PLACE%TYPE; 
v_LONGITUDE   FD_TX_HISTORIC_DATA.LONGITUDE%TYPE;
v_LATITUDE   FD_TX_HISTORIC_DATA.LATITUDE%TYPE; 
v_MERCHANT_REGION   FD_TX_HISTORIC_DATA.MERCHANT_REGION%TYPE;
v_MERCHANT_CITY FD_TX_HISTORIC_DATA.MERCHANT_CITY%TYPE;
v_MERCHANT_STATE   FD_TX_HISTORIC_DATA.MERCHANT_STATE%TYPE;  
v_MALL  FD_TX_HISTORIC_DATA.MALL%TYPE;
v_CREDIT_CARD_NO   FD_TX_HISTORIC_DATA.CREDIT_CARD_NO%TYPE;  
v_rand_no number;
---------- New variables ----------------
 
CURSOR tx_anm_crs (l_response_json IN CLOB) IS 
    SELECT jt.* 
    FROM   JSON_TABLE(l_response_json, '$.detectionResults[*]' 
             COLUMNS (tx_timestamp      VARCHAR2(100)  PATH '$.timestamp' , actualValue      VARCHAR2(100)  PATH '$.anomalies.actualValue' )) jt; 


cursor c1 is 
      SELECT  JSON_ARRAYAGG(
                 JSON_OBJECT
                 (
                        'timestamp' VALUE TO_CHAR((  TX_TIMESTAMP  ), 'YYYY-MM-DD"T"HH24:MI:SS".000Z"' ), 
                        'values' VALUE json_array(TOTAL_PAY)   
                ) ORDER BY TX_TIMESTAMP   )  as TX_DATA  
FROM FD_TX_HISTORIC_DATA  ;
--*/
BEGIN 

       ---- BEGIN GENERATING RANDOMS ------------------------------- 
      
       ------ clean up current data as we are generating new data here ---------------------------------- 
       delete from FD_TX_HISTORIC_DATA;
       ------ lets make all credit cards active we dont want to start with blocked cards -----------------
       UPDATE CC_FD SET STATUS = 'Active'; 

        FOR Lcntr IN 1..20 LOOP
                v_total_pay := round(DBMS_Random.Value(1,12000),0);  
                v_INV_NO := 'INV-RAND_'||v_total_pay; 
                v_CUST_ID := round(DBMS_Random.Value(1,40),0);
                select distinct FIRST_NAME||' '||LAST_NAME into v_CUSTOMER_FULLNAME from FINBANK_ACCOUNTS where id = v_CUST_ID;
                SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING WHERE CATEGORY != '-' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);
                select distinct FIRST_NAME||' '||LAST_NAME into v_MERCHANT_FULLNAME from FINBANK_ACCOUNTS where id = v_MERCHANT_ID; 
                --select  ID, NAME_EN, LONGITUDE, LATITUDE into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE from (select ID, NAME_EN, LONGITUDE, LATITUDE  from UNESCO_SITES where REGION_EN = 'Europe and North America' AND STATES_NAME_EN = 'United States of America' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                select  ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN into 
                        v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE , 
                        v_MERCHANT_REGION, v_MERCHANT_STATE
                        from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES where REGION_EN = 'Europe and North America' AND STATES_NAME_EN = 'United States of America' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
                select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = 'Active' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                 v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_time_diff, 'second' ); 
                INSERT INTO FD_TX_HISTORIC_DATA 
                (
                        INV_NO,  CATEGORY,  TX_TIMESTAMP, TOTAL_PAY,  
                        MALL,  CUST_ID,  CREDIT_CARD_NO, MERCHANT_ID, 
                        MERCHANT_REGION,  MERCHANT_CITY, MERCHANT_STATE, 
                        MERCHANT_PLACE,  LONGITUDE,  LATITUDE, 
                        MERCHANT_PLACE_ID,  CUSTOMER_FULLNAME,  MERCHANT_FULLNAME
                ) 
                values
                (
                        v_INV_NO,  v_CATEGORY,  v_TX_TIMESTAMP,  v_total_pay,  
                        v_MALL, v_CUST_ID, v_CREDIT_CARD_NO, v_MERCHANT_ID, 
                        v_MERCHANT_REGION, v_MERCHANT_CITY, v_MERCHANT_STATE,  
                        v_MERCHANT_PLACE,  v_LONGITUDE,  v_LATITUDE, 
                        v_MERCHANT_PLACE_ID,  v_CUSTOMER_FULLNAME, v_MERCHANT_FULLNAME
                );
                v_time_diff := v_time_diff + 1;
        END LOOP;
       
        -- Lets ensure that we also generate few anomalies 
        FOR Lcntr2 IN 1..5 LOOP
                v_total_pay := round(DBMS_Random.Value(1,55000),0);  
                v_INV_NO := 'INV-RAND_'||v_total_pay; 
                v_CUST_ID := round(DBMS_Random.Value(1,40),0);
                select distinct FIRST_NAME||' '||LAST_NAME into v_CUSTOMER_FULLNAME from FINBANK_ACCOUNTS where id = v_CUST_ID;
                SELECT category into v_CATEGORY FROM ( select distinct category  from RETAIL_SHOPPING  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                v_MERCHANT_ID := round(DBMS_Random.Value(1,40),0);
                select distinct FIRST_NAME||' '||LAST_NAME into v_MERCHANT_FULLNAME from FINBANK_ACCOUNTS where id = v_MERCHANT_ID;   
                select  ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN into v_MERCHANT_PLACE_ID,  v_MERCHANT_PLACE, v_LONGITUDE, v_LATITUDE , v_MERCHANT_REGION, v_MERCHANT_STATE
                        from (select ID, NAME_EN, LONGITUDE, LATITUDE, REGION_EN, STATES_NAME_EN  from UNESCO_SITES  ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;  
                select  mall into v_MALL from (select distinct mall from RETAIL_SHOPPING where mall is not null ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2;
                select  CC_NO into v_CREDIT_CARD_NO from (select CC_NO from CC_FD where STATUS = 'Active' ORDER BY DBMS_RANDOM.RANDOM) WHERE  rownum < 2; 
                 v_TX_TIMESTAMP := current_timestamp + numToDSInterval( v_time_diff, 'second' ); 
                INSERT INTO FD_TX_HISTORIC_DATA 
                (
                        INV_NO,  CATEGORY,  TX_TIMESTAMP, TOTAL_PAY,  
                        MALL,  CUST_ID,  CREDIT_CARD_NO, MERCHANT_ID, 
                        MERCHANT_REGION,  MERCHANT_CITY, MERCHANT_STATE, 
                        MERCHANT_PLACE,  LONGITUDE,  LATITUDE, 
                        MERCHANT_PLACE_ID,  CUSTOMER_FULLNAME,  MERCHANT_FULLNAME
                ) 
                values
                (
                        v_INV_NO,  v_CATEGORY,  v_TX_TIMESTAMP,  v_total_pay,  
                        v_MALL, v_CUST_ID, v_CREDIT_CARD_NO, v_MERCHANT_ID, 
                        v_MERCHANT_REGION, v_MERCHANT_CITY, v_MERCHANT_STATE,  
                        v_MERCHANT_PLACE,  v_LONGITUDE,  v_LATITUDE, 
                        v_MERCHANT_PLACE_ID,  v_CUSTOMER_FULLNAME, v_MERCHANT_FULLNAME
                );
                v_time_diff := v_time_diff + 1;
        END LOOP;

        
        For row_1 In C1 Loop
        json_input_str3 := row_1.TX_DATA; 
        End Loop;
        -- lets call anomaly detection AI model with the corresponding Model ID 
        -- OCID copied from the Model that we created
        l_body   := '{
                "modelId": "ocid1.aianomalydetectionmodel.oc1.phx.your-model-id",
                "requestType": "INLINE",
                "signalNames":["TOTAL_PAY"],
                "data":   '||json_input_str3||'
        }';

        apex_web_service.g_request_headers.DELETE; 
        apex_web_service.g_request_headers(1).name  := 'Content-Type'; 
        apex_web_service.g_request_headers(1).value := 'application/json'; 

        -- Call the Document AI analyzeDocument REST Web Service.  
        l_response_json := apex_web_service.make_rest_request 
        (p_url                  => l_api_url, 
        p_http_method          => 'POST', 
        p_body                 => l_body, 
        p_credential_static_id => GC_WC_CREDENTIAL_ID); 

        For row_1 In tx_anm_crs (l_response_json) Loop 
        -------- run update query based on Anomalies detected from returing JSON from AI Service -----------
        UPDATE FD_TX_HISTORIC_DATA SET IS_ANOMALY = 'YES' WHERE TOTAL_PAY = row_1.actualValue;
        End Loop; 
END;
/